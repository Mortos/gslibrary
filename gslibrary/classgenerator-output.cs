using System;
using System.Text;
using gslibrary;
using gslibrary.BasicTypes;

using CrystalMpq;
using Gibbed.IO;
using System.Collections.Generic;

namespace gslibrary.packets
{
    public class ACDTranslateAckMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateAckMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class UnlockDifficultyMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public bool Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UnlockDifficultyMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class ActiveSkillSavedData : GameMessage
    {
        public int snoSkill;
        int _snoRune;
        public int snoRune { get { return _snoRune; } set { if (value < -1 || value > 4) throw new ArgumentOutOfRangeException(); _snoRune = value; } }
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSkill = buffer.ReadInt(32);
            snoRune = buffer.ReadInt(3) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSkill);
            buffer.WriteInt(3, snoRune - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActiveSkillSavedData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSkill:" + snoSkill.ToString());
            b.Append(' ', pad); b.AppendLine("snoRune:" + snoRune.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSkill = stream.ReadValueS32();
            stream.Position = offset + 4;
            _snoRune = stream.ReadValueS32();
        }

    }

    public class PlayerKickTimerMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerKickTimerMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class AssignTraitsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int[] _SNOPowers;
        public int[] SNOPowers { get { return _SNOPowers; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _SNOPowers = value; } }
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOPowers = new int[3];
            for (int i = 0; i < _SNOPowers.Length; i++) _SNOPowers[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            for (int i = 0; i < _SNOPowers.Length; i++) buffer.WriteInt(32, _SNOPowers[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AssignTraitsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            for (int loop12 = 0; loop12 < _SNOPowers.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SNOPowers[loop12]:" + _SNOPowers[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOPowers = new int[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                int temp12_SNOPowers;
                temp12_SNOPowers = stream.ReadValueS32();
                _SNOPowers[loop12] = temp12_SNOPowers;
            }
        }

    }

    public class UnassignSkillMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _SkillIndex;
        public int SkillIndex { get { return _SkillIndex; } set { if (value < 0 || value > 5) throw new ArgumentOutOfRangeException(); _SkillIndex = value; } }
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SkillIndex = buffer.ReadInt(3);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, SkillIndex);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UnassignSkillMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SkillIndex:" + SkillIndex.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _SkillIndex = stream.ReadValueS32();
        }

    }

    public class Quaternion : GameMessage
    {
        public float W;
        public Vector3D Vector3D;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            W = buffer.ReadFloat32();
            Vector3D = new Vector3D();
            Vector3D.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(W);
            Vector3D.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Quaternion {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("W:" + W.ToString());
            Vector3D.AsText(b, pad, "Vector3D: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            W = stream.ReadValueF32();
            stream.Position = offset + 0;
            Vector3D = new Vector3D();
            Vector3D.FileRead(stream, stream.Position);
        }

    }

    public class AngularVelocityPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<AngularVelocityNode> _Nodes;
        public List<AngularVelocityNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<AngularVelocityNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new AngularVelocityNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AngularVelocityPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<AngularVelocityNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                AngularVelocityNode temp12_Nodes;
                temp12_Nodes = new AngularVelocityNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class AccelVectorPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<AccelVectorNode> _Nodes;
        public List<AccelVectorNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<AccelVectorNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new AccelVectorNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AccelVectorPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<AccelVectorNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 28); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (28 * i);
                AccelVectorNode temp12_Nodes;
                temp12_Nodes = new AccelVectorNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class VelocityVectorPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<VelocityVectorNode> _Nodes;
        public List<VelocityVectorNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<VelocityVectorNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new VelocityVectorNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VelocityVectorPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<VelocityVectorNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 28); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (28 * i);
                VelocityVectorNode temp12_Nodes;
                temp12_Nodes = new VelocityVectorNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class AccelPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<AccelNode> _Nodes;
        public List<AccelNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<AccelNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new AccelNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AccelPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<AccelNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                AccelNode temp12_Nodes;
                temp12_Nodes = new AccelNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class VelocityPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<VelocityNode> _Nodes;
        public List<VelocityNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<VelocityNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new VelocityNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VelocityPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<VelocityNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                VelocityNode temp12_Nodes;
                temp12_Nodes = new VelocityNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class TimePath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<TimeNode> _Nodes;
        public List<TimeNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<TimeNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new TimeNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TimePath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<TimeNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                TimeNode temp12_Nodes;
                temp12_Nodes = new TimeNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class AnglePath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<AngleNode> _Nodes;
        public List<AngleNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<AngleNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new AngleNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AnglePath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<AngleNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                AngleNode temp12_Nodes;
                temp12_Nodes = new AngleNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class ColorPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<ColorNode> _Nodes;
        public List<ColorNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<ColorNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new ColorNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ColorPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<ColorNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                ColorNode temp12_Nodes;
                temp12_Nodes = new ColorNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class VectorPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<VectorNode> _Nodes;
        public List<VectorNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<VectorNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new VectorNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VectorPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<VectorNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 28); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (28 * i);
                VectorNode temp12_Nodes;
                temp12_Nodes = new VectorNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class IntPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<IntNode> _Nodes;
        public List<IntNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<IntNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new IntNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "IntPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<IntNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                IntNode temp12_Nodes;
                temp12_Nodes = new IntNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class FloatPath : GameMessage
    {
        public InterpolationPathHeader Field0;
        public SerializeData serNodes;
        List<FloatNode> _Nodes;
        public List<FloatNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new InterpolationPathHeader();
            Field0.Parse(buffer);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<FloatNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new FloatNode();
                _Nodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FloatPath {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new InterpolationPathHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Nodes = new List<FloatNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 12); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (12 * i);
                FloatNode temp12_Nodes;
                temp12_Nodes = new FloatNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
        }

    }

    public class PolytopeData : GameMessage
    {
        public dmFloat3 Field0;
        public SerializeData serVertices;
        List<dmFloat3> _Vertices;
        public List<dmFloat3> Vertices { get { return _Vertices; } set { _Vertices = value; } }
        public SerializeData serPlanes;
        List<dmPlane> _Planes;
        public List<dmPlane> Planes { get { return _Planes; } set { _Planes = value; } }
        public SerializeData serSubEdges;
        List<dmSubEdge> _SubEdges;
        public List<dmSubEdge> SubEdges { get { return _SubEdges; } set { _SubEdges = value; } }
        public SerializeData serFaceSubEdges;
        List<byte> _FaceSubEdges;
        public List<byte> FaceSubEdges { get { return _FaceSubEdges; } set { _FaceSubEdges = value; } }
        public int Field9;
        public int Field10;
        public int Field11;
        public float Field12;
        public float Field13;
        public override int StructSize() { return 96; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new dmFloat3();
            Field0.Parse(buffer);
            serVertices = new SerializeData();
            serVertices.Parse(buffer);
            //still checking variablearrays
            this.Vertices = new List<dmFloat3>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12] = new dmFloat3();
                _Vertices[loop12].Parse(buffer);
            }
            serPlanes = new SerializeData();
            serPlanes.Parse(buffer);
            //still checking variablearrays
            this.Planes = new List<dmPlane>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Planes.Count; loop12++)
            {
                _Planes[loop12] = new dmPlane();
                _Planes[loop12].Parse(buffer);
            }
            serSubEdges = new SerializeData();
            serSubEdges.Parse(buffer);
            //still checking variablearrays
            this.SubEdges = new List<dmSubEdge>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SubEdges.Count; loop12++)
            {
                _SubEdges[loop12] = new dmSubEdge();
                _SubEdges[loop12].Parse(buffer);
            }
            serFaceSubEdges = new SerializeData();
            serFaceSubEdges.Parse(buffer);
            //still checking variablearrays
            this.FaceSubEdges = new List<byte>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _FaceSubEdges.Count; loop12++)
            {
                _FaceSubEdges[loop12] = (byte)buffer.ReadInt(0);
            }
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            serVertices.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Vertices.Count);
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12].Encode(buffer);
            }
            serPlanes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Planes.Count);
            for (int loop12 = 0; loop12 < _Planes.Count; loop12++)
            {
                _Planes[loop12].Encode(buffer);
            }
            serSubEdges.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SubEdges.Count);
            for (int loop12 = 0; loop12 < _SubEdges.Count; loop12++)
            {
                _SubEdges[loop12].Encode(buffer);
            }
            serFaceSubEdges.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _FaceSubEdges.Count);
            for (int loop12 = 0; loop12 < _FaceSubEdges.Count; loop12++)
            {
                buffer.WriteInt(0, _FaceSubEdges[loop12]);
            }
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PolytopeData {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            serVertices.AsText(b, pad, "serVertices: ");
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12].AsText(b, pad, "_Vertices[loop12]: ");
            }
            serPlanes.AsText(b, pad, "serPlanes: ");
            for (int loop12 = 0; loop12 < _Planes.Count; loop12++)
            {
                _Planes[loop12].AsText(b, pad, "_Planes[loop12]: ");
            }
            serSubEdges.AsText(b, pad, "serSubEdges: ");
            for (int loop12 = 0; loop12 < _SubEdges.Count; loop12++)
            {
                _SubEdges[loop12].AsText(b, pad, "_SubEdges[loop12]: ");
            }
            serFaceSubEdges.AsText(b, pad, "serFaceSubEdges: ");
            for (int loop12 = 0; loop12 < _FaceSubEdges.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_FaceSubEdges[loop12]:" + _FaceSubEdges[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 32;
            Field0 = new dmFloat3();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            serVertices = new SerializeData();
            serVertices.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            //still checking variablearrays
            Vertices = new List<dmFloat3>();
            for (int i = 0; i < (int)(serVertices.Field1 / 12); i++)
            {
                stream.Position = serVertices.Field0 + 16 + (12 * i);
                dmFloat3 temp12_Vertices;
                temp12_Vertices = new dmFloat3();
                temp12_Vertices.FileRead(stream, stream.Position);
                _Vertices.Add(temp12_Vertices);
            }
            stream.Position = offset + 72;
            serPlanes = new SerializeData();
            serPlanes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Planes = new List<dmPlane>();
            for (int i = 0; i < (int)(serPlanes.Field1 / 16); i++)
            {
                stream.Position = serPlanes.Field0 + 16 + (16 * i);
                dmPlane temp12_Planes;
                temp12_Planes = new dmPlane();
                temp12_Planes.FileRead(stream, stream.Position);
                _Planes.Add(temp12_Planes);
            }
            stream.Position = offset + 80;
            serSubEdges = new SerializeData();
            serSubEdges.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            SubEdges = new List<dmSubEdge>();
            for (int i = 0; i < (int)(serSubEdges.Field1 / 4); i++)
            {
                stream.Position = serSubEdges.Field0 + 16 + (4 * i);
                dmSubEdge temp12_SubEdges;
                temp12_SubEdges = new dmSubEdge();
                temp12_SubEdges.FileRead(stream, stream.Position);
                _SubEdges.Add(temp12_SubEdges);
            }
            stream.Position = offset + 88;
            serFaceSubEdges = new SerializeData();
            serFaceSubEdges.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            FaceSubEdges = new List<byte>();
            for (int i = 0; i < (int)(serFaceSubEdges.Field1 / 1); i++)
            {
                stream.Position = serFaceSubEdges.Field0 + 16 + (1 * i);
                byte temp12_FaceSubEdges;
                temp12_FaceSubEdges = (byte)stream.ReadByte();
                _FaceSubEdges.Add(temp12_FaceSubEdges);
            }
            stream.Position = offset + 44;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field13 = stream.ReadValueF32();
        }

    }

    public class UberMaterial : GameMessage
    {
        public Material2 Field0;
        public int snoShaderMap;
        public SerializeData serMatTexList;
        List<MaterialTextureEntry> _MatTexList;
        public List<MaterialTextureEntry> MatTexList { get { return _MatTexList; } set { _MatTexList = value; } }
        public override int StructSize() { return 104; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Material2();
            Field0.Parse(buffer);
            snoShaderMap = buffer.ReadInt(32);
            serMatTexList = new SerializeData();
            serMatTexList.Parse(buffer);
            //still checking variablearrays
            this.MatTexList = new List<MaterialTextureEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MatTexList.Count; loop12++)
            {
                _MatTexList[loop12] = new MaterialTextureEntry();
                _MatTexList[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoShaderMap);
            serMatTexList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MatTexList.Count);
            for (int loop12 = 0; loop12 < _MatTexList.Count; loop12++)
            {
                _MatTexList[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UberMaterial {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoShaderMap:" + snoShaderMap.ToString());
            serMatTexList.AsText(b, pad, "serMatTexList: ");
            for (int loop12 = 0; loop12 < _MatTexList.Count; loop12++)
            {
                _MatTexList[loop12].AsText(b, pad, "_MatTexList[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Field0 = new Material2();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            snoShaderMap = stream.ReadValueS32();
            stream.Position = offset + 76;
            serMatTexList = new SerializeData();
            serMatTexList.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            //still checking variablearrays
            MatTexList = new List<MaterialTextureEntry>();
            for (int i = 0; i < (int)(serMatTexList.Field1 / 184); i++)
            {
                stream.Position = serMatTexList.Field0 + 16 + (184 * i);
                MaterialTextureEntry temp12_MatTexList;
                temp12_MatTexList = new MaterialTextureEntry();
                temp12_MatTexList.FileRead(stream, stream.Position);
                _MatTexList.Add(temp12_MatTexList);
            }
        }

    }

    public class TexAnimParams : GameMessage
    {
        public int Field0;
        public Matrix4x4 Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public int Field19;
        public int Field20;
        public int Field21;
        public int Field22;
        public FrameAnim Field23;
        public int Field24;
        public override int StructSize() { return 176; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new Matrix4x4();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadInt(32);
            Field22 = buffer.ReadInt(32);
            Field23 = new FrameAnim();
            Field23.Parse(buffer);
            Field24 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(32, Field22);
            Field23.Encode(buffer);
            buffer.WriteInt(32, Field24);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TexAnimParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            Field23.AsText(b, pad, "Field23: ");
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new Matrix4x4();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 68;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 84;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 88;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 92;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 96;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 100;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 108;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 104;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 112;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 116;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 120;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 124;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 128;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 132;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 136;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 140;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 144;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 148;
            Field22 = stream.ReadValueS32();
            stream.Position = offset + 152;
            Field23 = new FrameAnim();
            Field23.FileRead(stream, stream.Position);
            stream.Position = offset + 172;
            Field24 = stream.ReadValueS32();
        }

    }

    public class RequiredMessageHeader : GameMessage
    {
        int _Field0;
        public int Field0 { get { return _Field0; } set { if (value < 0 || value > 320) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(9);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(9, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RequiredMessageHeader {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            _Field0 = stream.ReadValueS32();
        }

    }

    public class Textures : GameMessage
    {
        public int Field0;
        public int dwWidth;
        public int dwHeight;
        public int dwFaceCount;
        public int dwMipMapLevelMax;
        SerializeData[] _Field5;
        public SerializeData[] Field5 { get { return _Field5; } set { if (value != null && value.Length != 60) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int Field6;
        public int Field7;
        public string _Field8;
        public string Field8 { get { return _Field8; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        public SerializeData serImageFileIDs;
        List<ImageFileID> _ImageFileIDs;
        public List<ImageFileID> ImageFileIDs { get { return _ImageFileIDs; } set { _ImageFileIDs = value; } }
        public SerializeData serFrame;
        List<TexFrame> _Frame;
        public List<TexFrame> Frame { get { return _Frame; } set { _Frame = value; } }
        public IVector2D Field13;
        public int Field14;
        public int Field15;
        public int Field16;
        public int Field17;
        public int Field18;
        public int Field19;
        public long Field20;
        public int Field21;
        public byte Field22;
        public byte Field23;
        public byte Field24;
        public override int StructSize() { return 872; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            dwWidth = buffer.ReadInt(32);
            dwHeight = buffer.ReadInt(32);
            dwFaceCount = buffer.ReadInt(32);
            dwMipMapLevelMax = buffer.ReadInt(32);
            Field5 = new SerializeData[60];
            for (int i = 0; i < _Field5.Length; i++)
            {
                _Field5[i] = new SerializeData();
                _Field5[i].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadCharArray(256);
            serImageFileIDs = new SerializeData();
            serImageFileIDs.Parse(buffer);
            //still checking variablearrays
            this.ImageFileIDs = new List<ImageFileID>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ImageFileIDs.Count; loop12++)
            {
                _ImageFileIDs[loop12] = new ImageFileID();
                _ImageFileIDs[loop12].Parse(buffer);
            }
            serFrame = new SerializeData();
            serFrame.Parse(buffer);
            //still checking variablearrays
            this.Frame = new List<TexFrame>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Frame.Count; loop12++)
            {
                _Frame[loop12] = new TexFrame();
                _Frame[loop12].Parse(buffer);
            }
            Field13 = new IVector2D();
            Field13.Parse(buffer);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadInt64(64);
            Field21 = buffer.ReadInt(32);
            Field22 = (byte)buffer.ReadInt(8);
            Field23 = (byte)buffer.ReadInt(8);
            Field24 = (byte)buffer.ReadInt(8);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, dwWidth);
            buffer.WriteInt(32, dwHeight);
            buffer.WriteInt(32, dwFaceCount);
            buffer.WriteInt(32, dwMipMapLevelMax);
            for (int i = 0; i < _Field5.Length; i++) _Field5[i].Encode(buffer);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteCharArray(256, Field8);
            serImageFileIDs.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ImageFileIDs.Count);
            for (int loop12 = 0; loop12 < _ImageFileIDs.Count; loop12++)
            {
                _ImageFileIDs[loop12].Encode(buffer);
            }
            serFrame.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Frame.Count);
            for (int loop12 = 0; loop12 < _Frame.Count; loop12++)
            {
                _Frame[loop12].Encode(buffer);
            }
            Field13.Encode(buffer);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteInt64(64, Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(8, Field22);
            buffer.WriteInt(8, Field23);
            buffer.WriteInt(8, Field24);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Textures {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("dwWidth:" + dwWidth.ToString());
            b.Append(' ', pad); b.AppendLine("dwHeight:" + dwHeight.ToString());
            b.Append(' ', pad); b.AppendLine("dwFaceCount:" + dwFaceCount.ToString());
            b.Append(' ', pad); b.AppendLine("dwMipMapLevelMax:" + dwMipMapLevelMax.ToString());
            for (int loop12 = 0; loop12 < _Field5.Length; loop12++)
            {
                _Field5[loop12].AsText(b, pad, "_Field5[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            serImageFileIDs.AsText(b, pad, "serImageFileIDs: ");
            for (int loop12 = 0; loop12 < _ImageFileIDs.Count; loop12++)
            {
                _ImageFileIDs[loop12].AsText(b, pad, "_ImageFileIDs[loop12]: ");
            }
            serFrame.AsText(b, pad, "serFrame: ");
            for (int loop12 = 0; loop12 < _Frame.Count; loop12++)
            {
                _Frame[loop12].AsText(b, pad, "_Frame[loop12]: ");
            }
            Field13.AsText(b, pad, "Field13: ");
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 16;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 20;
            dwWidth = stream.ReadValueS32();
            stream.Position = offset + 24;
            dwHeight = stream.ReadValueS32();
            stream.Position = offset + 28;
            dwFaceCount = stream.ReadValueS32();
            stream.Position = offset + 36;
            dwMipMapLevelMax = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field5 = new SerializeData[60];
            for (int loop12 = 0; loop12 < 60; loop12++)
            {
                SerializeData temp12_Field5;
                temp12_Field5 = new SerializeData();
                temp12_Field5.FileRead(stream, stream.Position);
                _Field5[loop12] = temp12_Field5;
            }
            stream.Position = offset + 520;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 592;
            Field8 = stream.ReadString(256);
            stream.Position = offset + 852;
            serImageFileIDs = new SerializeData();
            serImageFileIDs.FileRead(stream, stream.Position);
            stream.Position = offset + 848;
            //still checking variablearrays
            ImageFileIDs = new List<ImageFileID>();
            for (int i = 0; i < (int)(serImageFileIDs.Field1 / 516); i++)
            {
                stream.Position = serImageFileIDs.Field0 + 16 + (516 * i);
                ImageFileID temp12_ImageFileIDs;
                temp12_ImageFileIDs = new ImageFileID();
                temp12_ImageFileIDs.FileRead(stream, stream.Position);
                _ImageFileIDs.Add(temp12_ImageFileIDs);
            }
            stream.Position = offset + 524;
            serFrame = new SerializeData();
            serFrame.FileRead(stream, stream.Position);
            stream.Position = offset + 532;
            //still checking variablearrays
            Frame = new List<TexFrame>();
            for (int i = 0; i < (int)(serFrame.Field1 / 80); i++)
            {
                stream.Position = serFrame.Field0 + 16 + (80 * i);
                TexFrame temp12_Frame;
                temp12_Frame = new TexFrame();
                temp12_Frame.FileRead(stream, stream.Position);
                _Frame.Add(temp12_Frame);
            }
            stream.Position = offset + 536;
            Field13 = new IVector2D();
            Field13.FileRead(stream, stream.Position);
            stream.Position = offset + 860;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 864;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 868;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 544;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 548;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 552;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 560;
            Field20 = stream.ReadValueS64();
            stream.Position = offset + 568;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 572;
            Field22 = (byte)stream.ReadByte();
            stream.Position = offset + 573;
            Field23 = (byte)stream.ReadByte();
            stream.Position = offset + 574;
            Field24 = (byte)stream.ReadByte();
        }

    }

    public class EffectGroup : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int SnoPower;
        public SerializeData serEffects;
        List<EffectItem> _EffectItems;
        public List<EffectItem> EffectItems { get { return _EffectItems; } set { _EffectItems = value; } }
        public override int StructSize() { return 304; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            SnoPower = buffer.ReadInt(32);
            serEffects = new SerializeData();
            serEffects.Parse(buffer);
            //still checking variablearrays
            this.EffectItems = new List<EffectItem>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _EffectItems.Count; loop12++)
            {
                _EffectItems[loop12] = new EffectItem();
                _EffectItems[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, SnoPower);
            serEffects.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _EffectItems.Count);
            for (int loop12 = 0; loop12 < _EffectItems.Count; loop12++)
            {
                _EffectItems[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EffectGroup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("SnoPower:" + SnoPower.ToString());
            serEffects.AsText(b, pad, "serEffects: ");
            for (int loop12 = 0; loop12 < _EffectItems.Count; loop12++)
            {
                _EffectItems[loop12].AsText(b, pad, "_EffectItems[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 44;
            SnoPower = stream.ReadValueS32();
            stream.Position = offset + 16;
            serEffects = new SerializeData();
            serEffects.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            EffectItems = new List<EffectItem>();
            for (int i = 0; i < (int)(serEffects.Field1 / 480); i++)
            {
                stream.Position = serEffects.Field0 + 16 + (480 * i);
                EffectItem temp12_EffectItems;
                temp12_EffectItems = new EffectItem();
                temp12_EffectItems.FileRead(stream, stream.Position);
                _EffectItems.Add(temp12_EffectItems);
            }
        }

    }

    public class TriggerEvent : GameMessage
    {
        public int Field0;
        public TriggerConditions TriggerConditions;
        public int Field2;
        public SNOName Field3;
        public int Field4;
        public int Field5;
        HardpointLink[] _HardPointLinks;
        public HardpointLink[] HardPointLinks { get { return _HardPointLinks; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _HardPointLinks = value; } }
        public LookLink LookLink;
        public ConstraintLink ConstraintLink;
        public int Field9;
        public float Field10;
        public int Field11;
        public int Field12;
        public int Field13;
        public int Field14;
        public int Field15;
        public float Field16;
        public float Field17;
        public int Field18;
        public int Field19;
        public float Field20;
        public int Field21;
        public float Velocity;
        public int Ticks1;
        public int RuneType;
        public int UseRuneType;
        public RGBAColor Color1;
        public int Field27;
        public RGBAColor Color2;
        public int Field29;
        public override int StructSize() { return 408; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            TriggerConditions = new TriggerConditions();
            TriggerConditions.Parse(buffer);
            Field2 = buffer.ReadInt(32);
            Field3 = new SNOName();
            Field3.Parse(buffer);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            HardPointLinks = new HardpointLink[2];
            for (int i = 0; i < _HardPointLinks.Length; i++)
            {
                _HardPointLinks[i] = new HardpointLink();
                _HardPointLinks[i].Parse(buffer);
            }
            LookLink = new LookLink();
            LookLink.Parse(buffer);
            ConstraintLink = new ConstraintLink();
            ConstraintLink.Parse(buffer);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadInt(32);
            Velocity = buffer.ReadFloat32();
            Ticks1 = buffer.ReadInt(32);
            RuneType = buffer.ReadInt(32);
            UseRuneType = buffer.ReadInt(32);
            Color1 = new RGBAColor();
            Color1.Parse(buffer);
            Field27 = buffer.ReadInt(32);
            Color2 = new RGBAColor();
            Color2.Parse(buffer);
            Field29 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            TriggerConditions.Encode(buffer);
            buffer.WriteInt(32, Field2);
            Field3.Encode(buffer);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            for (int i = 0; i < _HardPointLinks.Length; i++) _HardPointLinks[i].Encode(buffer);
            LookLink.Encode(buffer);
            ConstraintLink.Encode(buffer);
            buffer.WriteInt(32, Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteFloat32(Velocity);
            buffer.WriteInt(32, Ticks1);
            buffer.WriteInt(32, RuneType);
            buffer.WriteInt(32, UseRuneType);
            Color1.Encode(buffer);
            buffer.WriteInt(32, Field27);
            Color2.Encode(buffer);
            buffer.WriteInt(32, Field29);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TriggerEvent {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            TriggerConditions.AsText(b, pad, "TriggerConditions: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            for (int loop12 = 0; loop12 < _HardPointLinks.Length; loop12++)
            {
                _HardPointLinks[loop12].AsText(b, pad, "_HardPointLinks[loop12]: ");
            }
            LookLink.AsText(b, pad, "LookLink: ");
            ConstraintLink.AsText(b, pad, "ConstraintLink: ");
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Velocity:" + Velocity.ToString());
            b.Append(' ', pad); b.AppendLine("Ticks1:" + Ticks1.ToString());
            b.Append(' ', pad); b.AppendLine("RuneType:" + RuneType.ToString());
            b.Append(' ', pad); b.AppendLine("UseRuneType:" + UseRuneType.ToString());
            Color1.AsText(b, pad, "Color1: ");
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            Color2.AsText(b, pad, "Color2: ");
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            TriggerConditions = new TriggerConditions();
            TriggerConditions.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field3 = new SNOName();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 52;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 68;
            HardPointLinks = new HardpointLink[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                HardpointLink temp12_HardPointLinks;
                temp12_HardPointLinks = new HardpointLink();
                temp12_HardPointLinks.FileRead(stream, stream.Position);
                _HardPointLinks[loop12] = temp12_HardPointLinks;
            }
            stream.Position = offset + 204;
            LookLink = new LookLink();
            LookLink.FileRead(stream, stream.Position);
            stream.Position = offset + 268;
            ConstraintLink = new ConstraintLink();
            ConstraintLink.FileRead(stream, stream.Position);
            stream.Position = offset + 332;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 336;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 340;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 344;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 348;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 352;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 356;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 360;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 364;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 384;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 368;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 372;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 376;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 380;
            Velocity = stream.ReadValueF32();
            stream.Position = offset + 388;
            Ticks1 = stream.ReadValueS32();
            stream.Position = offset + 60;
            RuneType = stream.ReadValueS32();
            stream.Position = offset + 64;
            UseRuneType = stream.ReadValueS32();
            stream.Position = offset + 392;
            Color1 = new RGBAColor();
            Color1.FileRead(stream, stream.Position);
            stream.Position = offset + 396;
            Field27 = stream.ReadValueS32();
            stream.Position = offset + 400;
            Color2 = new RGBAColor();
            Color2.FileRead(stream, stream.Position);
            stream.Position = offset + 404;
            Field29 = stream.ReadValueS32();
        }

    }

    public class Particle : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public InterpolationScalar Field5;
        public FloatPath Field6;
        public IntPath Field7;
        public FloatPath Field8;
        public TimePath Field9;
        public FloatPath Field10;
        public VelocityVectorPath Field11;
        public AnglePath Field12;
        public VelocityVectorPath Field13;
        public VelocityPath Field14;
        public VelocityPath Field15;
        public VelocityPath Field16;
        public UberMaterial Field17;
        public int snoPhysics;
        public float Field19;
        public int Field20;
        public float Field21;
        public float Field22;
        public float Field23;
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public int snoActor;
        public EmitterParams Field29;
        public FloatPath Field30;
        public ColorPath Field31;
        public FloatPath Field32;
        public FloatPath Field33;
        public AnglePath Field34;
        public AngularVelocityPath Field35;
        public AngularVelocityPath Field36;
        public AnglePath Field37;
        public VectorPath Field38;
        public FloatPath Field39;
        public VelocityPath Field40;
        public AngularVelocityPath Field41;
        public FloatPath Field42;
        public VelocityPath Field43;
        public VectorPath Field44;
        public VelocityVectorPath Field45;
        public AccelVectorPath Field46;
        public VectorPath Field47;
        public VelocityVectorPath Field48;
        public AccelVectorPath Field49;
        public VelocityPath Field50;
        public FloatPath Field51;
        public VectorPath Field52;
        public VelocityPath Field53;
        public float Field54;
        public int Field55;
        public float Field56;
        public float Field57;
        public int Field58;
        public SerializeData serMsgTriggeredEvents;
        List<MsgTriggeredEvent> _MsgTriggeredEvents;
        public List<MsgTriggeredEvent> MsgTriggeredEvents { get { return _MsgTriggeredEvents; } set { _MsgTriggeredEvents = value; } }
        public override int StructSize() { return 1880; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = new InterpolationScalar();
            Field5.Parse(buffer);
            Field6 = new FloatPath();
            Field6.Parse(buffer);
            Field7 = new IntPath();
            Field7.Parse(buffer);
            Field8 = new FloatPath();
            Field8.Parse(buffer);
            Field9 = new TimePath();
            Field9.Parse(buffer);
            Field10 = new FloatPath();
            Field10.Parse(buffer);
            Field11 = new VelocityVectorPath();
            Field11.Parse(buffer);
            Field12 = new AnglePath();
            Field12.Parse(buffer);
            Field13 = new VelocityVectorPath();
            Field13.Parse(buffer);
            Field14 = new VelocityPath();
            Field14.Parse(buffer);
            Field15 = new VelocityPath();
            Field15.Parse(buffer);
            Field16 = new VelocityPath();
            Field16.Parse(buffer);
            Field17 = new UberMaterial();
            Field17.Parse(buffer);
            snoPhysics = buffer.ReadInt(32);
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadFloat32();
            Field22 = buffer.ReadFloat32();
            Field23 = buffer.ReadFloat32();
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            snoActor = buffer.ReadInt(32);
            Field29 = new EmitterParams();
            Field29.Parse(buffer);
            Field30 = new FloatPath();
            Field30.Parse(buffer);
            Field31 = new ColorPath();
            Field31.Parse(buffer);
            Field32 = new FloatPath();
            Field32.Parse(buffer);
            Field33 = new FloatPath();
            Field33.Parse(buffer);
            Field34 = new AnglePath();
            Field34.Parse(buffer);
            Field35 = new AngularVelocityPath();
            Field35.Parse(buffer);
            Field36 = new AngularVelocityPath();
            Field36.Parse(buffer);
            Field37 = new AnglePath();
            Field37.Parse(buffer);
            Field38 = new VectorPath();
            Field38.Parse(buffer);
            Field39 = new FloatPath();
            Field39.Parse(buffer);
            Field40 = new VelocityPath();
            Field40.Parse(buffer);
            Field41 = new AngularVelocityPath();
            Field41.Parse(buffer);
            Field42 = new FloatPath();
            Field42.Parse(buffer);
            Field43 = new VelocityPath();
            Field43.Parse(buffer);
            Field44 = new VectorPath();
            Field44.Parse(buffer);
            Field45 = new VelocityVectorPath();
            Field45.Parse(buffer);
            Field46 = new AccelVectorPath();
            Field46.Parse(buffer);
            Field47 = new VectorPath();
            Field47.Parse(buffer);
            Field48 = new VelocityVectorPath();
            Field48.Parse(buffer);
            Field49 = new AccelVectorPath();
            Field49.Parse(buffer);
            Field50 = new VelocityPath();
            Field50.Parse(buffer);
            Field51 = new FloatPath();
            Field51.Parse(buffer);
            Field52 = new VectorPath();
            Field52.Parse(buffer);
            Field53 = new VelocityPath();
            Field53.Parse(buffer);
            Field54 = buffer.ReadFloat32();
            Field55 = buffer.ReadInt(32);
            Field56 = buffer.ReadFloat32();
            Field57 = buffer.ReadFloat32();
            Field58 = buffer.ReadInt(32);
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.Parse(buffer);
            //still checking variablearrays
            this.MsgTriggeredEvents = new List<MsgTriggeredEvent>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12] = new MsgTriggeredEvent();
                _MsgTriggeredEvents[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            Field5.Encode(buffer);
            Field6.Encode(buffer);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            Field11.Encode(buffer);
            Field12.Encode(buffer);
            Field13.Encode(buffer);
            Field14.Encode(buffer);
            Field15.Encode(buffer);
            Field16.Encode(buffer);
            Field17.Encode(buffer);
            buffer.WriteInt(32, snoPhysics);
            buffer.WriteFloat32(Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteFloat32(Field21);
            buffer.WriteFloat32(Field22);
            buffer.WriteFloat32(Field23);
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteInt(32, snoActor);
            Field29.Encode(buffer);
            Field30.Encode(buffer);
            Field31.Encode(buffer);
            Field32.Encode(buffer);
            Field33.Encode(buffer);
            Field34.Encode(buffer);
            Field35.Encode(buffer);
            Field36.Encode(buffer);
            Field37.Encode(buffer);
            Field38.Encode(buffer);
            Field39.Encode(buffer);
            Field40.Encode(buffer);
            Field41.Encode(buffer);
            Field42.Encode(buffer);
            Field43.Encode(buffer);
            Field44.Encode(buffer);
            Field45.Encode(buffer);
            Field46.Encode(buffer);
            Field47.Encode(buffer);
            Field48.Encode(buffer);
            Field49.Encode(buffer);
            Field50.Encode(buffer);
            Field51.Encode(buffer);
            Field52.Encode(buffer);
            Field53.Encode(buffer);
            buffer.WriteFloat32(Field54);
            buffer.WriteInt(32, Field55);
            buffer.WriteFloat32(Field56);
            buffer.WriteFloat32(Field57);
            buffer.WriteInt(32, Field58);
            serMsgTriggeredEvents.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MsgTriggeredEvents.Count);
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Particle {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            Field5.AsText(b, pad, "Field5: ");
            Field6.AsText(b, pad, "Field6: ");
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            Field11.AsText(b, pad, "Field11: ");
            Field12.AsText(b, pad, "Field12: ");
            Field13.AsText(b, pad, "Field13: ");
            Field14.AsText(b, pad, "Field14: ");
            Field15.AsText(b, pad, "Field15: ");
            Field16.AsText(b, pad, "Field16: ");
            Field17.AsText(b, pad, "Field17: ");
            b.Append(' ', pad); b.AppendLine("snoPhysics:" + snoPhysics.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("snoActor:" + snoActor.ToString());
            Field29.AsText(b, pad, "Field29: ");
            Field30.AsText(b, pad, "Field30: ");
            Field31.AsText(b, pad, "Field31: ");
            Field32.AsText(b, pad, "Field32: ");
            Field33.AsText(b, pad, "Field33: ");
            Field34.AsText(b, pad, "Field34: ");
            Field35.AsText(b, pad, "Field35: ");
            Field36.AsText(b, pad, "Field36: ");
            Field37.AsText(b, pad, "Field37: ");
            Field38.AsText(b, pad, "Field38: ");
            Field39.AsText(b, pad, "Field39: ");
            Field40.AsText(b, pad, "Field40: ");
            Field41.AsText(b, pad, "Field41: ");
            Field42.AsText(b, pad, "Field42: ");
            Field43.AsText(b, pad, "Field43: ");
            Field44.AsText(b, pad, "Field44: ");
            Field45.AsText(b, pad, "Field45: ");
            Field46.AsText(b, pad, "Field46: ");
            Field47.AsText(b, pad, "Field47: ");
            Field48.AsText(b, pad, "Field48: ");
            Field49.AsText(b, pad, "Field49: ");
            Field50.AsText(b, pad, "Field50: ");
            Field51.AsText(b, pad, "Field51: ");
            Field52.AsText(b, pad, "Field52: ");
            Field53.AsText(b, pad, "Field53: ");
            b.Append(' ', pad); b.AppendLine("Field54:" + Field54.ToString());
            b.Append(' ', pad); b.AppendLine("Field55:" + Field55.ToString());
            b.Append(' ', pad); b.AppendLine("Field56:" + Field56.ToString());
            b.Append(' ', pad); b.AppendLine("Field57:" + Field57.ToString());
            b.Append(' ', pad); b.AppendLine("Field58:" + Field58.ToString());
            serMsgTriggeredEvents.AsText(b, pad, "serMsgTriggeredEvents: ");
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].AsText(b, pad, "_MsgTriggeredEvents[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = new InterpolationScalar();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            Field6 = new FloatPath();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 84;
            Field7 = new IntPath();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 124;
            Field8 = new FloatPath();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 164;
            Field9 = new TimePath();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 204;
            Field10 = new FloatPath();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 284;
            Field11 = new VelocityVectorPath();
            Field11.FileRead(stream, stream.Position);
            stream.Position = offset + 244;
            Field12 = new AnglePath();
            Field12.FileRead(stream, stream.Position);
            stream.Position = offset + 324;
            Field13 = new VelocityVectorPath();
            Field13.FileRead(stream, stream.Position);
            stream.Position = offset + 364;
            Field14 = new VelocityPath();
            Field14.FileRead(stream, stream.Position);
            stream.Position = offset + 404;
            Field15 = new VelocityPath();
            Field15.FileRead(stream, stream.Position);
            stream.Position = offset + 444;
            Field16 = new VelocityPath();
            Field16.FileRead(stream, stream.Position);
            stream.Position = offset + 568;
            Field17 = new UberMaterial();
            Field17.FileRead(stream, stream.Position);
            stream.Position = offset + 672;
            snoPhysics = stream.ReadValueS32();
            stream.Position = offset + 676;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 680;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 684;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 688;
            Field22 = stream.ReadValueF32();
            stream.Position = offset + 692;
            Field23 = stream.ReadValueF32();
            stream.Position = offset + 696;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 700;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 704;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 708;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 712;
            snoActor = stream.ReadValueS32();
            stream.Position = offset + 716;
            Field29 = new EmitterParams();
            Field29.FileRead(stream, stream.Position);
            stream.Position = offset + 1008;
            Field30 = new FloatPath();
            Field30.FileRead(stream, stream.Position);
            stream.Position = offset + 968;
            Field31 = new ColorPath();
            Field31.FileRead(stream, stream.Position);
            stream.Position = offset + 1048;
            Field32 = new FloatPath();
            Field32.FileRead(stream, stream.Position);
            stream.Position = offset + 1088;
            Field33 = new FloatPath();
            Field33.FileRead(stream, stream.Position);
            stream.Position = offset + 1128;
            Field34 = new AnglePath();
            Field34.FileRead(stream, stream.Position);
            stream.Position = offset + 1168;
            Field35 = new AngularVelocityPath();
            Field35.FileRead(stream, stream.Position);
            stream.Position = offset + 1208;
            Field36 = new AngularVelocityPath();
            Field36.FileRead(stream, stream.Position);
            stream.Position = offset + 1248;
            Field37 = new AnglePath();
            Field37.FileRead(stream, stream.Position);
            stream.Position = offset + 1288;
            Field38 = new VectorPath();
            Field38.FileRead(stream, stream.Position);
            stream.Position = offset + 1328;
            Field39 = new FloatPath();
            Field39.FileRead(stream, stream.Position);
            stream.Position = offset + 1368;
            Field40 = new VelocityPath();
            Field40.FileRead(stream, stream.Position);
            stream.Position = offset + 1408;
            Field41 = new AngularVelocityPath();
            Field41.FileRead(stream, stream.Position);
            stream.Position = offset + 1448;
            Field42 = new FloatPath();
            Field42.FileRead(stream, stream.Position);
            stream.Position = offset + 1488;
            Field43 = new VelocityPath();
            Field43.FileRead(stream, stream.Position);
            stream.Position = offset + 1528;
            Field44 = new VectorPath();
            Field44.FileRead(stream, stream.Position);
            stream.Position = offset + 1568;
            Field45 = new VelocityVectorPath();
            Field45.FileRead(stream, stream.Position);
            stream.Position = offset + 1608;
            Field46 = new AccelVectorPath();
            Field46.FileRead(stream, stream.Position);
            stream.Position = offset + 1648;
            Field47 = new VectorPath();
            Field47.FileRead(stream, stream.Position);
            stream.Position = offset + 1688;
            Field48 = new VelocityVectorPath();
            Field48.FileRead(stream, stream.Position);
            stream.Position = offset + 1728;
            Field49 = new AccelVectorPath();
            Field49.FileRead(stream, stream.Position);
            stream.Position = offset + 1768;
            Field50 = new VelocityPath();
            Field50.FileRead(stream, stream.Position);
            stream.Position = offset + 1808;
            Field51 = new FloatPath();
            Field51.FileRead(stream, stream.Position);
            stream.Position = offset + 484;
            Field52 = new VectorPath();
            Field52.FileRead(stream, stream.Position);
            stream.Position = offset + 524;
            Field53 = new VelocityPath();
            Field53.FileRead(stream, stream.Position);
            stream.Position = offset + 564;
            Field54 = stream.ReadValueF32();
            stream.Position = offset + 1848;
            Field55 = stream.ReadValueS32();
            stream.Position = offset + 1852;
            Field56 = stream.ReadValueF32();
            stream.Position = offset + 1856;
            Field57 = stream.ReadValueF32();
            stream.Position = offset + 1868;
            Field58 = stream.ReadValueS32();
            stream.Position = offset + 1860;
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.FileRead(stream, stream.Position);
            stream.Position = offset + 1872;
            //still checking variablearrays
            MsgTriggeredEvents = new List<MsgTriggeredEvent>();
            for (int i = 0; i < (int)(serMsgTriggeredEvents.Field1 / 412); i++)
            {
                stream.Position = serMsgTriggeredEvents.Field0 + 16 + (412 * i);
                MsgTriggeredEvent temp12_MsgTriggeredEvents;
                temp12_MsgTriggeredEvents = new MsgTriggeredEvent();
                temp12_MsgTriggeredEvents.FileRead(stream, stream.Position);
                _MsgTriggeredEvents.Add(temp12_MsgTriggeredEvents);
            }
        }

    }

    public class UIControlData : GameMessage
    {
        public int Field0;
        public long Field1;
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public long Field3;
        public string _Field4;
        public string Field4 { get { return _Field4; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public int Field5;
        public UIStyle Field6;
        public UIAnimationElements Field7;
        public override int StructSize() { return 1760; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt64(64);
            Field2 = buffer.ReadCharArray(512);
            Field3 = buffer.ReadInt64(64);
            Field4 = buffer.ReadCharArray(512);
            Field5 = buffer.ReadInt(32);
            Field6 = new UIStyle();
            Field6.Parse(buffer);
            Field7 = new UIAnimationElements();
            Field7.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt64(64, Field1);
            buffer.WriteCharArray(512, Field2);
            buffer.WriteInt64(64, Field3);
            buffer.WriteCharArray(512, Field4);
            buffer.WriteInt(32, Field5);
            Field6.Encode(buffer);
            Field7.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIControlData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            Field6.AsText(b, pad, "Field6: ");
            Field7.AsText(b, pad, "Field7: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS64();
            stream.Position = offset + 16;
            Field2 = stream.ReadString(512);
            stream.Position = offset + 528;
            Field3 = stream.ReadValueS64();
            stream.Position = offset + 536;
            Field4 = stream.ReadString(512);
            stream.Position = offset + 1048;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 1056;
            Field6 = new UIStyle();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 1664;
            Field7 = new UIAnimationElements();
            Field7.FileRead(stream, stream.Position);
        }

    }

    public class UIStyle : GameMessage
    {
        public long Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public DataElements Field2;
        public int Field3;
        public SerializeData serChildSpecs;
        List<UIStyleChildSpec> _ChildSpecs;
        public List<UIStyleChildSpec> ChildSpecs { get { return _ChildSpecs; } set { _ChildSpecs = value; } }
        public override int StructSize() { return 608; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadCharArray(512);
            Field2 = new DataElements();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt(32);
            serChildSpecs = new SerializeData();
            serChildSpecs.Parse(buffer);
            //still checking variablearrays
            this.ChildSpecs = new List<UIStyleChildSpec>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ChildSpecs.Count; loop12++)
            {
                _ChildSpecs[loop12] = new UIStyleChildSpec();
                _ChildSpecs[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteCharArray(512, Field1);
            Field2.Encode(buffer);
            buffer.WriteInt(32, Field3);
            serChildSpecs.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ChildSpecs.Count);
            for (int loop12 = 0; loop12 < _ChildSpecs.Count; loop12++)
            {
                _ChildSpecs[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIStyle {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serChildSpecs.AsText(b, pad, "serChildSpecs: ");
            for (int loop12 = 0; loop12 < _ChildSpecs.Count; loop12++)
            {
                _ChildSpecs[loop12].AsText(b, pad, "_ChildSpecs[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadString(512);
            stream.Position = offset + 520;
            Field2 = new DataElements();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 568;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 572;
            serChildSpecs = new SerializeData();
            serChildSpecs.FileRead(stream, stream.Position);
            stream.Position = offset + 580;
            //still checking variablearrays
            ChildSpecs = new List<UIStyleChildSpec>();
            for (int i = 0; i < (int)(serChildSpecs.Field1 / 572); i++)
            {
                stream.Position = serChildSpecs.Field0 + 16 + (572 * i);
                UIStyleChildSpec temp12_ChildSpecs;
                temp12_ChildSpecs = new UIStyleChildSpec();
                temp12_ChildSpecs.FileRead(stream, stream.Position);
                _ChildSpecs.Add(temp12_ChildSpecs);
            }
        }

    }

    public class UIControlElement : GameMessage
    {
        public long Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 264; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteCharArray(256, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIControlElement {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadString(256);
        }

    }

    public class UIDataElementInt32 : GameMessage
    {
        public long Field0;
        public int Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIDataElementInt32 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class UIDataElementFloat32 : GameMessage
    {
        public long Field0;
        public float Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIDataElementFloat32 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadValueF32();
        }

    }

    public class UIAnimationDescription : GameMessage
    {
        public long Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        int[] _Field3;
        public int[] Field3 { get { return _Field3; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 536; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadCharArray(512);
            Field2 = buffer.ReadInt(32);
            Field3 = new int[2];
            for (int i = 0; i < _Field3.Length; i++) _Field3[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteCharArray(512, Field1);
            buffer.WriteInt(32, Field2);
            for (int i = 0; i < _Field3.Length; i++) buffer.WriteInt(32, _Field3[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIAnimationDescription {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            for (int loop12 = 0; loop12 < _Field3.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field3[loop12]:" + _Field3[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadString(512);
            stream.Position = offset + 520;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 524;
            Field3 = new int[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                int temp12_Field3;
                temp12_Field3 = stream.ReadValueS32();
                _Field3[loop12] = temp12_Field3;
            }
        }

    }

    public class SoundBank : GameMessage
    {
        public int Field0;
        public SerializeData serSoundSamples;
        List<SoundSample> _SoundSamples;
        public List<SoundSample> SoundSamples { get { return _SoundSamples; } set { _SoundSamples = value; } }
        public SerializeData serSampleTimestamps;
        List<long> _SampleTimestamps;
        public List<long> SampleTimestamps { get { return _SampleTimestamps; } set { _SampleTimestamps = value; } }
        public int Field5;
        public override int StructSize() { return 44; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serSoundSamples = new SerializeData();
            serSoundSamples.Parse(buffer);
            //still checking variablearrays
            this.SoundSamples = new List<SoundSample>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SoundSamples.Count; loop12++)
            {
                _SoundSamples[loop12] = new SoundSample();
                _SoundSamples[loop12].Parse(buffer);
            }
            serSampleTimestamps = new SerializeData();
            serSampleTimestamps.Parse(buffer);
            //still checking variablearrays
            this.SampleTimestamps = new List<long>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SampleTimestamps.Count; loop12++)
            {
                _SampleTimestamps[loop12] = buffer.ReadInt64(0);
            }
            Field5 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serSoundSamples.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SoundSamples.Count);
            for (int loop12 = 0; loop12 < _SoundSamples.Count; loop12++)
            {
                _SoundSamples[loop12].Encode(buffer);
            }
            serSampleTimestamps.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SampleTimestamps.Count);
            for (int loop12 = 0; loop12 < _SampleTimestamps.Count; loop12++)
            {
                buffer.WriteInt64(0, _SampleTimestamps[loop12]);
            }
            buffer.WriteInt(32, Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SoundBank {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serSoundSamples.AsText(b, pad, "serSoundSamples: ");
            for (int loop12 = 0; loop12 < _SoundSamples.Count; loop12++)
            {
                _SoundSamples[loop12].AsText(b, pad, "_SoundSamples[loop12]: ");
            }
            serSampleTimestamps.AsText(b, pad, "serSampleTimestamps: ");
            for (int loop12 = 0; loop12 < _SampleTimestamps.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SampleTimestamps[loop12]:" + _SampleTimestamps[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 20;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 12;
            serSoundSamples = new SerializeData();
            serSoundSamples.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            SoundSamples = new List<SoundSample>();
            for (int i = 0; i < (int)(serSoundSamples.Field1 / 680); i++)
            {
                stream.Position = serSoundSamples.Field0 + 16 + (680 * i);
                SoundSample temp12_SoundSamples;
                temp12_SoundSamples = new SoundSample();
                temp12_SoundSamples.FileRead(stream, stream.Position);
                _SoundSamples.Add(temp12_SoundSamples);
            }
            stream.Position = offset + 28;
            serSampleTimestamps = new SerializeData();
            serSampleTimestamps.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            //still checking variablearrays
            SampleTimestamps = new List<long>();
            for (int i = 0; i < (int)(serSampleTimestamps.Field1 / 8); i++)
            {
                stream.Position = serSampleTimestamps.Field0 + 16 + (8 * i);
                long temp12_SampleTimestamps;
                temp12_SampleTimestamps = stream.ReadValueS64();
                _SampleTimestamps.Add(temp12_SampleTimestamps);
            }
            stream.Position = offset + 40;
            Field5 = stream.ReadValueS32();
        }

    }

    public class SoundSample : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 129) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public bool Field2;
        public bool Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int eFormat;
        public SerializeData serSamples;
        public string _Field9;
        public string Field9 { get { return _Field9; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field9 = value; } }
        public override int StructSize() { return 680; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(129);
            Field1 = buffer.ReadCharArray(256);
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadBool();
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            eFormat = buffer.ReadInt(32);
            serSamples = new SerializeData();
            serSamples.Parse(buffer);
            Field9 = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(129, Field0);
            buffer.WriteCharArray(256, Field1);
            buffer.WriteBool(Field2);
            buffer.WriteBool(Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, eFormat);
            serSamples.Encode(buffer);
            buffer.WriteCharArray(256, Field9);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SoundSample {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("eFormat:" + eFormat.ToString());
            serSamples.AsText(b, pad, "serSamples: ");
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(129);
            stream.Position = offset + 385;
            Field1 = stream.ReadString(256);
            stream.Position = offset + 644;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 648;
            Field3 = stream.ReadValueS32() == 1;
            stream.Position = offset + 652;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 656;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 660;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 664;
            eFormat = stream.ReadValueS32();
            stream.Position = offset + 668;
            serSamples = new SerializeData();
            serSamples.FileRead(stream, stream.Position);
            stream.Position = offset + 129;
            Field9 = stream.ReadString(256);
        }

    }

    public class Sound : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public int Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public int Field13;
        public SerializeData serPermutations;
        List<SoundPermutation> _Permutations;
        public List<SoundPermutation> Permutations { get { return _Permutations; } set { _Permutations = value; } }
        public int Field16;
        public int Field17;
        public int Field18;
        public SerializeData serDspEffects;
        List<DspEffect> _DspEffects;
        public List<DspEffect> DspEffects { get { return _DspEffects; } set { _DspEffects = value; } }
        public override int StructSize() { return 124; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadInt(32);
            serPermutations = new SerializeData();
            serPermutations.Parse(buffer);
            //still checking variablearrays
            this.Permutations = new List<SoundPermutation>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Permutations.Count; loop12++)
            {
                _Permutations[loop12] = new SoundPermutation();
                _Permutations[loop12].Parse(buffer);
            }
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            serDspEffects = new SerializeData();
            serDspEffects.Parse(buffer);
            //still checking variablearrays
            this.DspEffects = new List<DspEffect>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DspEffects.Count; loop12++)
            {
                _DspEffects[loop12] = new DspEffect();
                _DspEffects[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteInt(32, Field13);
            serPermutations.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Permutations.Count);
            for (int loop12 = 0; loop12 < _Permutations.Count; loop12++)
            {
                _Permutations[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            serDspEffects.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DspEffects.Count);
            for (int loop12 = 0; loop12 < _DspEffects.Count; loop12++)
            {
                _DspEffects[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Sound {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            serPermutations.AsText(b, pad, "serPermutations: ");
            for (int loop12 = 0; loop12 < _Permutations.Count; loop12++)
            {
                _Permutations[loop12].AsText(b, pad, "_Permutations[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            serDspEffects.AsText(b, pad, "serDspEffects: ");
            for (int loop12 = 0; loop12 < _DspEffects.Count; loop12++)
            {
                _DspEffects[loop12].AsText(b, pad, "_DspEffects[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 64;
            serPermutations = new SerializeData();
            serPermutations.FileRead(stream, stream.Position);
            stream.Position = offset + 76;
            //still checking variablearrays
            Permutations = new List<SoundPermutation>();
            for (int i = 0; i < (int)(serPermutations.Field1 / 172); i++)
            {
                stream.Position = serPermutations.Field0 + 16 + (172 * i);
                SoundPermutation temp12_Permutations;
                temp12_Permutations = new SoundPermutation();
                temp12_Permutations.FileRead(stream, stream.Position);
                _Permutations.Add(temp12_Permutations);
            }
            stream.Position = offset + 80;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 100;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 92;
            serDspEffects = new SerializeData();
            serDspEffects.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            //still checking variablearrays
            DspEffects = new List<DspEffect>();
            for (int i = 0; i < (int)(serDspEffects.Field1 / 136); i++)
            {
                stream.Position = serDspEffects.Field0 + 16 + (136 * i);
                DspEffect temp12_DspEffects;
                temp12_DspEffects = new DspEffect();
                temp12_DspEffects.FileRead(stream, stream.Position);
                _DspEffects.Add(temp12_DspEffects);
            }
        }

    }

    public class Music : GameMessage
    {
        public int Field0;
        public float Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public SerializeData serPlaylistEntries;
        List<PlaylistEntry> _PlaylistEntries;
        public List<PlaylistEntry> PlaylistEntries { get { return _PlaylistEntries; } set { _PlaylistEntries = value; } }
        RandomMusicSoundParams[] _Field7;
        public RandomMusicSoundParams[] Field7 { get { return _Field7; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        public override int StructSize() { return 76; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            serPlaylistEntries = new SerializeData();
            serPlaylistEntries.Parse(buffer);
            //still checking variablearrays
            this.PlaylistEntries = new List<PlaylistEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _PlaylistEntries.Count; loop12++)
            {
                _PlaylistEntries[loop12] = new PlaylistEntry();
                _PlaylistEntries[loop12].Parse(buffer);
            }
            Field7 = new RandomMusicSoundParams[2];
            for (int i = 0; i < _Field7.Length; i++)
            {
                _Field7[i] = new RandomMusicSoundParams();
                _Field7[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            serPlaylistEntries.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _PlaylistEntries.Count);
            for (int loop12 = 0; loop12 < _PlaylistEntries.Count; loop12++)
            {
                _PlaylistEntries[loop12].Encode(buffer);
            }
            for (int i = 0; i < _Field7.Length; i++) _Field7[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Music {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            serPlaylistEntries.AsText(b, pad, "serPlaylistEntries: ");
            for (int loop12 = 0; loop12 < _PlaylistEntries.Count; loop12++)
            {
                _PlaylistEntries[loop12].AsText(b, pad, "_PlaylistEntries[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _Field7.Length; loop12++)
            {
                _Field7[loop12].AsText(b, pad, "_Field7[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 28;
            serPlaylistEntries = new SerializeData();
            serPlaylistEntries.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            //still checking variablearrays
            PlaylistEntries = new List<PlaylistEntry>();
            for (int i = 0; i < (int)(serPlaylistEntries.Field1 / 188); i++)
            {
                stream.Position = serPlaylistEntries.Field0 + 16 + (188 * i);
                PlaylistEntry temp12_PlaylistEntries;
                temp12_PlaylistEntries = new PlaylistEntry();
                temp12_PlaylistEntries.FileRead(stream, stream.Position);
                _PlaylistEntries.Add(temp12_PlaylistEntries);
            }
            stream.Position = offset + 44;
            Field7 = new RandomMusicSoundParams[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                RandomMusicSoundParams temp12_Field7;
                temp12_Field7 = new RandomMusicSoundParams();
                temp12_Field7.FileRead(stream, stream.Position);
                _Field7[loop12] = temp12_Field7;
            }
        }

    }

    public class Rope : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public UberMaterial Field8;
        public int snoPhysics;
        public int Field10;
        public int Field11;
        public int Field12;
        public int Field13;
        public ColorPath Field14;
        public ColorPath Field15;
        public FloatPath Field16;
        public FloatPath Field17;
        public FloatPath Field18;
        public FloatPath Field19;
        public FloatPath Field20;
        public FloatPath Field21;
        public FloatPath Field22;
        public FloatPath Field23;
        public FloatPath Field24;
        public FloatPath Field25;
        public VectorPath Field26;
        public VelocityPath Field27;
        public float Field28;
        public float Field29;
        public FloatPath Field30;
        public FloatPath Field31;
        public FloatPath Field32;
        public FloatPath Field33;
        public FloatPath Field34;
        public int Field35;
        public SerializeData serMsgTriggeredEvents;
        List<MsgTriggeredEvent> _MsgTriggeredEvents;
        public List<MsgTriggeredEvent> MsgTriggeredEvents { get { return _MsgTriggeredEvents; } set { _MsgTriggeredEvents = value; } }
        public override int StructSize() { return 960; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = new UberMaterial();
            Field8.Parse(buffer);
            snoPhysics = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = new ColorPath();
            Field14.Parse(buffer);
            Field15 = new ColorPath();
            Field15.Parse(buffer);
            Field16 = new FloatPath();
            Field16.Parse(buffer);
            Field17 = new FloatPath();
            Field17.Parse(buffer);
            Field18 = new FloatPath();
            Field18.Parse(buffer);
            Field19 = new FloatPath();
            Field19.Parse(buffer);
            Field20 = new FloatPath();
            Field20.Parse(buffer);
            Field21 = new FloatPath();
            Field21.Parse(buffer);
            Field22 = new FloatPath();
            Field22.Parse(buffer);
            Field23 = new FloatPath();
            Field23.Parse(buffer);
            Field24 = new FloatPath();
            Field24.Parse(buffer);
            Field25 = new FloatPath();
            Field25.Parse(buffer);
            Field26 = new VectorPath();
            Field26.Parse(buffer);
            Field27 = new VelocityPath();
            Field27.Parse(buffer);
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = new FloatPath();
            Field30.Parse(buffer);
            Field31 = new FloatPath();
            Field31.Parse(buffer);
            Field32 = new FloatPath();
            Field32.Parse(buffer);
            Field33 = new FloatPath();
            Field33.Parse(buffer);
            Field34 = new FloatPath();
            Field34.Parse(buffer);
            Field35 = buffer.ReadInt(32);
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.Parse(buffer);
            //still checking variablearrays
            this.MsgTriggeredEvents = new List<MsgTriggeredEvent>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12] = new MsgTriggeredEvent();
                _MsgTriggeredEvents[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            Field8.Encode(buffer);
            buffer.WriteInt(32, snoPhysics);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            Field14.Encode(buffer);
            Field15.Encode(buffer);
            Field16.Encode(buffer);
            Field17.Encode(buffer);
            Field18.Encode(buffer);
            Field19.Encode(buffer);
            Field20.Encode(buffer);
            Field21.Encode(buffer);
            Field22.Encode(buffer);
            Field23.Encode(buffer);
            Field24.Encode(buffer);
            Field25.Encode(buffer);
            Field26.Encode(buffer);
            Field27.Encode(buffer);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            Field30.Encode(buffer);
            Field31.Encode(buffer);
            Field32.Encode(buffer);
            Field33.Encode(buffer);
            Field34.Encode(buffer);
            buffer.WriteInt(32, Field35);
            serMsgTriggeredEvents.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MsgTriggeredEvents.Count);
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Rope {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            Field8.AsText(b, pad, "Field8: ");
            b.Append(' ', pad); b.AppendLine("snoPhysics:" + snoPhysics.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            Field14.AsText(b, pad, "Field14: ");
            Field15.AsText(b, pad, "Field15: ");
            Field16.AsText(b, pad, "Field16: ");
            Field17.AsText(b, pad, "Field17: ");
            Field18.AsText(b, pad, "Field18: ");
            Field19.AsText(b, pad, "Field19: ");
            Field20.AsText(b, pad, "Field20: ");
            Field21.AsText(b, pad, "Field21: ");
            Field22.AsText(b, pad, "Field22: ");
            Field23.AsText(b, pad, "Field23: ");
            Field24.AsText(b, pad, "Field24: ");
            Field25.AsText(b, pad, "Field25: ");
            Field26.AsText(b, pad, "Field26: ");
            Field27.AsText(b, pad, "Field27: ");
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            Field30.AsText(b, pad, "Field30: ");
            Field31.AsText(b, pad, "Field31: ");
            Field32.AsText(b, pad, "Field32: ");
            Field33.AsText(b, pad, "Field33: ");
            Field34.AsText(b, pad, "Field34: ");
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            serMsgTriggeredEvents.AsText(b, pad, "serMsgTriggeredEvents: ");
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].AsText(b, pad, "_MsgTriggeredEvents[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field8 = new UberMaterial();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 152;
            snoPhysics = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 160;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 164;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 168;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 172;
            Field14 = new ColorPath();
            Field14.FileRead(stream, stream.Position);
            stream.Position = offset + 212;
            Field15 = new ColorPath();
            Field15.FileRead(stream, stream.Position);
            stream.Position = offset + 252;
            Field16 = new FloatPath();
            Field16.FileRead(stream, stream.Position);
            stream.Position = offset + 292;
            Field17 = new FloatPath();
            Field17.FileRead(stream, stream.Position);
            stream.Position = offset + 332;
            Field18 = new FloatPath();
            Field18.FileRead(stream, stream.Position);
            stream.Position = offset + 372;
            Field19 = new FloatPath();
            Field19.FileRead(stream, stream.Position);
            stream.Position = offset + 412;
            Field20 = new FloatPath();
            Field20.FileRead(stream, stream.Position);
            stream.Position = offset + 452;
            Field21 = new FloatPath();
            Field21.FileRead(stream, stream.Position);
            stream.Position = offset + 492;
            Field22 = new FloatPath();
            Field22.FileRead(stream, stream.Position);
            stream.Position = offset + 532;
            Field23 = new FloatPath();
            Field23.FileRead(stream, stream.Position);
            stream.Position = offset + 572;
            Field24 = new FloatPath();
            Field24.FileRead(stream, stream.Position);
            stream.Position = offset + 612;
            Field25 = new FloatPath();
            Field25.FileRead(stream, stream.Position);
            stream.Position = offset + 652;
            Field26 = new VectorPath();
            Field26.FileRead(stream, stream.Position);
            stream.Position = offset + 692;
            Field27 = new VelocityPath();
            Field27.FileRead(stream, stream.Position);
            stream.Position = offset + 732;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 736;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 740;
            Field30 = new FloatPath();
            Field30.FileRead(stream, stream.Position);
            stream.Position = offset + 780;
            Field31 = new FloatPath();
            Field31.FileRead(stream, stream.Position);
            stream.Position = offset + 820;
            Field32 = new FloatPath();
            Field32.FileRead(stream, stream.Position);
            stream.Position = offset + 860;
            Field33 = new FloatPath();
            Field33.FileRead(stream, stream.Position);
            stream.Position = offset + 900;
            Field34 = new FloatPath();
            Field34.FileRead(stream, stream.Position);
            stream.Position = offset + 948;
            Field35 = stream.ReadValueS32();
            stream.Position = offset + 940;
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.FileRead(stream, stream.Position);
            stream.Position = offset + 952;
            //still checking variablearrays
            MsgTriggeredEvents = new List<MsgTriggeredEvent>();
            for (int i = 0; i < (int)(serMsgTriggeredEvents.Field1 / 412); i++)
            {
                stream.Position = serMsgTriggeredEvents.Field0 + 16 + (412 * i);
                MsgTriggeredEvent temp12_MsgTriggeredEvents;
                temp12_MsgTriggeredEvents = new MsgTriggeredEvent();
                temp12_MsgTriggeredEvents.FileRead(stream, stream.Position);
                _MsgTriggeredEvents.Add(temp12_MsgTriggeredEvents);
            }
        }

    }

    public class Appearance : GameMessage
    {
        public int Field0;
        public SerializeData serAppearanceMaterials;
        List<AppearanceMaterial> _AppearanceMaterials;
        public List<AppearanceMaterial> AppearanceMaterials { get { return _AppearanceMaterials; } set { _AppearanceMaterials = value; } }
        public SerializeData serAppearanceLooks;
        List<AppearanceLook> _AppearanceLooks;
        public List<AppearanceLook> AppearanceLooks { get { return _AppearanceLooks; } set { _AppearanceLooks = value; } }
        public Structure Field5;
        public int Field6;
        public int nStaticLightCount;
        public SerializeData serStaticLights;
        List<StaticLight> _StaticLights;
        public List<StaticLight> StaticLights { get { return _StaticLights; } set { _StaticLights = value; } }
        public int Field10;
        public int Field11;
        public int Field12;
        public int Field13;
        public int Field14;
        public int Field15;
        public int Field16;
        public float Field17;
        public int Field18;
        public int Field19;
        public long Field20;
        public int Field21;
        public override int StructSize() { return 1576; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serAppearanceMaterials = new SerializeData();
            serAppearanceMaterials.Parse(buffer);
            //still checking variablearrays
            this.AppearanceMaterials = new List<AppearanceMaterial>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _AppearanceMaterials.Count; loop12++)
            {
                _AppearanceMaterials[loop12] = new AppearanceMaterial();
                _AppearanceMaterials[loop12].Parse(buffer);
            }
            serAppearanceLooks = new SerializeData();
            serAppearanceLooks.Parse(buffer);
            //still checking variablearrays
            this.AppearanceLooks = new List<AppearanceLook>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _AppearanceLooks.Count; loop12++)
            {
                _AppearanceLooks[loop12] = new AppearanceLook();
                _AppearanceLooks[loop12].Parse(buffer);
            }
            Field5 = new Structure();
            Field5.Parse(buffer);
            Field6 = buffer.ReadInt(32);
            nStaticLightCount = buffer.ReadInt(32);
            serStaticLights = new SerializeData();
            serStaticLights.Parse(buffer);
            //still checking variablearrays
            this.StaticLights = new List<StaticLight>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StaticLights.Count; loop12++)
            {
                _StaticLights[loop12] = new StaticLight();
                _StaticLights[loop12].Parse(buffer);
            }
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadInt64(64);
            Field21 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serAppearanceMaterials.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _AppearanceMaterials.Count);
            for (int loop12 = 0; loop12 < _AppearanceMaterials.Count; loop12++)
            {
                _AppearanceMaterials[loop12].Encode(buffer);
            }
            serAppearanceLooks.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _AppearanceLooks.Count);
            for (int loop12 = 0; loop12 < _AppearanceLooks.Count; loop12++)
            {
                _AppearanceLooks[loop12].Encode(buffer);
            }
            Field5.Encode(buffer);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, nStaticLightCount);
            serStaticLights.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StaticLights.Count);
            for (int loop12 = 0; loop12 < _StaticLights.Count; loop12++)
            {
                _StaticLights[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteInt64(64, Field20);
            buffer.WriteInt(32, Field21);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Appearance {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serAppearanceMaterials.AsText(b, pad, "serAppearanceMaterials: ");
            for (int loop12 = 0; loop12 < _AppearanceMaterials.Count; loop12++)
            {
                _AppearanceMaterials[loop12].AsText(b, pad, "_AppearanceMaterials[loop12]: ");
            }
            serAppearanceLooks.AsText(b, pad, "serAppearanceLooks: ");
            for (int loop12 = 0; loop12 < _AppearanceLooks.Count; loop12++)
            {
                _AppearanceLooks[loop12].AsText(b, pad, "_AppearanceLooks[loop12]: ");
            }
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("nStaticLightCount:" + nStaticLightCount.ToString());
            serStaticLights.AsText(b, pad, "serStaticLights: ");
            for (int loop12 = 0; loop12 < _StaticLights.Count; loop12++)
            {
                _StaticLights[loop12].AsText(b, pad, "_StaticLights[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 1460;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 1464;
            serAppearanceMaterials = new SerializeData();
            serAppearanceMaterials.FileRead(stream, stream.Position);
            stream.Position = offset + 1472;
            //still checking variablearrays
            AppearanceMaterials = new List<AppearanceMaterial>();
            for (int i = 0; i < (int)(serAppearanceMaterials.Field1 / 140); i++)
            {
                stream.Position = serAppearanceMaterials.Field0 + 16 + (140 * i);
                AppearanceMaterial temp12_AppearanceMaterials;
                temp12_AppearanceMaterials = new AppearanceMaterial();
                temp12_AppearanceMaterials.FileRead(stream, stream.Position);
                _AppearanceMaterials.Add(temp12_AppearanceMaterials);
            }
            stream.Position = offset + 1480;
            serAppearanceLooks = new SerializeData();
            serAppearanceLooks.FileRead(stream, stream.Position);
            stream.Position = offset + 1488;
            //still checking variablearrays
            AppearanceLooks = new List<AppearanceLook>();
            for (int i = 0; i < (int)(serAppearanceLooks.Field1 / 64); i++)
            {
                stream.Position = serAppearanceLooks.Field0 + 16 + (64 * i);
                AppearanceLook temp12_AppearanceLooks;
                temp12_AppearanceLooks = new AppearanceLook();
                temp12_AppearanceLooks.FileRead(stream, stream.Position);
                _AppearanceLooks.Add(temp12_AppearanceLooks);
            }
            stream.Position = offset + 16;
            Field5 = new Structure();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 1456;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 1496;
            nStaticLightCount = stream.ReadValueS32();
            stream.Position = offset + 1500;
            serStaticLights = new SerializeData();
            serStaticLights.FileRead(stream, stream.Position);
            stream.Position = offset + 1512;
            //still checking variablearrays
            StaticLights = new List<StaticLight>();
            for (int i = 0; i < (int)(serStaticLights.Field1 / 92); i++)
            {
                stream.Position = serStaticLights.Field0 + 16 + (92 * i);
                StaticLight temp12_StaticLights;
                temp12_StaticLights = new StaticLight();
                temp12_StaticLights.FileRead(stream, stream.Position);
                _StaticLights.Add(temp12_StaticLights);
            }
            stream.Position = offset + 1520;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 1524;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 1528;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 1532;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 1536;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 1540;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 1544;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 1548;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 1552;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 1556;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 1560;
            Field20 = stream.ReadValueS64();
            stream.Position = offset + 1568;
            Field21 = stream.ReadValueS32();
        }

    }

    public class Structure : GameMessage
    {
        public int dwFlags;
        public int nBoneCount;
        public SerializeData serBoneStructure;
        List<BoneStructure> _BoneStructure;
        public List<BoneStructure> BoneStructure { get { return _BoneStructure; } set { _BoneStructure = value; } }
        public LookAtData Field4;
        public int Field5;
        public SerializeData serBonePulses;
        List<BonePulseData> _BonePulses;
        public List<BonePulseData> BonePulses { get { return _BonePulses; } set { _BonePulses = value; } }
        GeoSet[] _Field8;
        public GeoSet[] Field8 { get { return _Field8; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        public Sphere Field9;
        public int nCollisionCapsuleCount;
        public SerializeData serCollisionCapsules;
        List<CollisionCapsule> _CollisionCapsules;
        public List<CollisionCapsule> CollisionCapsules { get { return _CollisionCapsules; } set { _CollisionCapsules = value; } }
        public int nHardpointCount;
        public SerializeData serHardpoints;
        List<Hardpoint> _Hardpoints;
        public List<Hardpoint> Hardpoints { get { return _Hardpoints; } set { _Hardpoints = value; } }
        public Vector3D Field16;
        public Octree tOctreeVisualMesh;
        public AABB aabbBounds;
        public string _Field19;
        public string Field19 { get { return _Field19; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field19 = value; } }
        public string _Field20;
        public string Field20 { get { return _Field20; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field20 = value; } }
        public string _Field21;
        public string Field21 { get { return _Field21; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field21 = value; } }
        public string _Field22;
        public string Field22 { get { return _Field22; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field22 = value; } }
        public int Field23;
        public float Field24;
        public int Field25;
        public int nLoopConstraintCount;
        public SerializeData serLoopConstraints;
        List<ConstraintParameters> _LoopConstraints;
        public List<ConstraintParameters> LoopConstraints { get { return _LoopConstraints; } set { _LoopConstraints = value; } }
        public int uRagdollDegrade;
        public override int StructSize() { return 1440; }

        public override void Parse(GameBitBuffer buffer)
        {
            dwFlags = buffer.ReadInt(32);
            nBoneCount = buffer.ReadInt(32);
            serBoneStructure = new SerializeData();
            serBoneStructure.Parse(buffer);
            //still checking variablearrays
            this.BoneStructure = new List<BoneStructure>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _BoneStructure.Count; loop12++)
            {
                _BoneStructure[loop12] = new BoneStructure();
                _BoneStructure[loop12].Parse(buffer);
            }
            Field4 = new LookAtData();
            Field4.Parse(buffer);
            Field5 = buffer.ReadInt(32);
            serBonePulses = new SerializeData();
            serBonePulses.Parse(buffer);
            //still checking variablearrays
            this.BonePulses = new List<BonePulseData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _BonePulses.Count; loop12++)
            {
                _BonePulses[loop12] = new BonePulseData();
                _BonePulses[loop12].Parse(buffer);
            }
            Field8 = new GeoSet[2];
            for (int i = 0; i < _Field8.Length; i++)
            {
                _Field8[i] = new GeoSet();
                _Field8[i].Parse(buffer);
            }
            Field9 = new Sphere();
            Field9.Parse(buffer);
            nCollisionCapsuleCount = buffer.ReadInt(32);
            serCollisionCapsules = new SerializeData();
            serCollisionCapsules.Parse(buffer);
            //still checking variablearrays
            this.CollisionCapsules = new List<CollisionCapsule>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _CollisionCapsules.Count; loop12++)
            {
                _CollisionCapsules[loop12] = new CollisionCapsule();
                _CollisionCapsules[loop12].Parse(buffer);
            }
            nHardpointCount = buffer.ReadInt(32);
            serHardpoints = new SerializeData();
            serHardpoints.Parse(buffer);
            //still checking variablearrays
            this.Hardpoints = new List<Hardpoint>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Hardpoints.Count; loop12++)
            {
                _Hardpoints[loop12] = new Hardpoint();
                _Hardpoints[loop12].Parse(buffer);
            }
            Field16 = new Vector3D();
            Field16.Parse(buffer);
            tOctreeVisualMesh = new Octree();
            tOctreeVisualMesh.Parse(buffer);
            aabbBounds = new AABB();
            aabbBounds.Parse(buffer);
            Field19 = buffer.ReadCharArray(256);
            Field20 = buffer.ReadCharArray(256);
            Field21 = buffer.ReadCharArray(256);
            Field22 = buffer.ReadCharArray(256);
            Field23 = buffer.ReadInt(32);
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadInt(32);
            nLoopConstraintCount = buffer.ReadInt(32);
            serLoopConstraints = new SerializeData();
            serLoopConstraints.Parse(buffer);
            //still checking variablearrays
            this.LoopConstraints = new List<ConstraintParameters>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _LoopConstraints.Count; loop12++)
            {
                _LoopConstraints[loop12] = new ConstraintParameters();
                _LoopConstraints[loop12].Parse(buffer);
            }
            uRagdollDegrade = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, dwFlags);
            buffer.WriteInt(32, nBoneCount);
            serBoneStructure.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _BoneStructure.Count);
            for (int loop12 = 0; loop12 < _BoneStructure.Count; loop12++)
            {
                _BoneStructure[loop12].Encode(buffer);
            }
            Field4.Encode(buffer);
            buffer.WriteInt(32, Field5);
            serBonePulses.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _BonePulses.Count);
            for (int loop12 = 0; loop12 < _BonePulses.Count; loop12++)
            {
                _BonePulses[loop12].Encode(buffer);
            }
            for (int i = 0; i < _Field8.Length; i++) _Field8[i].Encode(buffer);
            Field9.Encode(buffer);
            buffer.WriteInt(32, nCollisionCapsuleCount);
            serCollisionCapsules.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _CollisionCapsules.Count);
            for (int loop12 = 0; loop12 < _CollisionCapsules.Count; loop12++)
            {
                _CollisionCapsules[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, nHardpointCount);
            serHardpoints.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Hardpoints.Count);
            for (int loop12 = 0; loop12 < _Hardpoints.Count; loop12++)
            {
                _Hardpoints[loop12].Encode(buffer);
            }
            Field16.Encode(buffer);
            tOctreeVisualMesh.Encode(buffer);
            aabbBounds.Encode(buffer);
            buffer.WriteCharArray(256, Field19);
            buffer.WriteCharArray(256, Field20);
            buffer.WriteCharArray(256, Field21);
            buffer.WriteCharArray(256, Field22);
            buffer.WriteInt(32, Field23);
            buffer.WriteFloat32(Field24);
            buffer.WriteInt(32, Field25);
            buffer.WriteInt(32, nLoopConstraintCount);
            serLoopConstraints.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _LoopConstraints.Count);
            for (int loop12 = 0; loop12 < _LoopConstraints.Count; loop12++)
            {
                _LoopConstraints[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, uRagdollDegrade);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Structure {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("dwFlags:" + dwFlags.ToString());
            b.Append(' ', pad); b.AppendLine("nBoneCount:" + nBoneCount.ToString());
            serBoneStructure.AsText(b, pad, "serBoneStructure: ");
            for (int loop12 = 0; loop12 < _BoneStructure.Count; loop12++)
            {
                _BoneStructure[loop12].AsText(b, pad, "_BoneStructure[loop12]: ");
            }
            Field4.AsText(b, pad, "Field4: ");
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            serBonePulses.AsText(b, pad, "serBonePulses: ");
            for (int loop12 = 0; loop12 < _BonePulses.Count; loop12++)
            {
                _BonePulses[loop12].AsText(b, pad, "_BonePulses[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _Field8.Length; loop12++)
            {
                _Field8[loop12].AsText(b, pad, "_Field8[loop12]: ");
            }
            Field9.AsText(b, pad, "Field9: ");
            b.Append(' ', pad); b.AppendLine("nCollisionCapsuleCount:" + nCollisionCapsuleCount.ToString());
            serCollisionCapsules.AsText(b, pad, "serCollisionCapsules: ");
            for (int loop12 = 0; loop12 < _CollisionCapsules.Count; loop12++)
            {
                _CollisionCapsules[loop12].AsText(b, pad, "_CollisionCapsules[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("nHardpointCount:" + nHardpointCount.ToString());
            serHardpoints.AsText(b, pad, "serHardpoints: ");
            for (int loop12 = 0; loop12 < _Hardpoints.Count; loop12++)
            {
                _Hardpoints[loop12].AsText(b, pad, "_Hardpoints[loop12]: ");
            }
            Field16.AsText(b, pad, "Field16: ");
            tOctreeVisualMesh.AsText(b, pad, "tOctreeVisualMesh: ");
            aabbBounds.AsText(b, pad, "aabbBounds: ");
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("nLoopConstraintCount:" + nLoopConstraintCount.ToString());
            serLoopConstraints.AsText(b, pad, "serLoopConstraints: ");
            for (int loop12 = 0; loop12 < _LoopConstraints.Count; loop12++)
            {
                _LoopConstraints[loop12].AsText(b, pad, "_LoopConstraints[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("uRagdollDegrade:" + uRagdollDegrade.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            dwFlags = stream.ReadValueS32();
            stream.Position = offset + 4;
            nBoneCount = stream.ReadValueS32();
            stream.Position = offset + 8;
            serBoneStructure = new SerializeData();
            serBoneStructure.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            BoneStructure = new List<BoneStructure>();
            for (int i = 0; i < (int)(serBoneStructure.Field1 / 236); i++)
            {
                stream.Position = serBoneStructure.Field0 + 16 + (236 * i);
                BoneStructure temp12_BoneStructure;
                temp12_BoneStructure = new BoneStructure();
                temp12_BoneStructure.FileRead(stream, stream.Position);
                _BoneStructure.Add(temp12_BoneStructure);
            }
            stream.Position = offset + 24;
            Field4 = new LookAtData();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 116;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 128;
            serBonePulses = new SerializeData();
            serBonePulses.FileRead(stream, stream.Position);
            stream.Position = offset + 120;
            //still checking variablearrays
            BonePulses = new List<BonePulseData>();
            for (int i = 0; i < (int)(serBonePulses.Field1 / 76); i++)
            {
                stream.Position = serBonePulses.Field0 + 16 + (76 * i);
                BonePulseData temp12_BonePulses;
                temp12_BonePulses = new BonePulseData();
                temp12_BonePulses.FileRead(stream, stream.Position);
                _BonePulses.Add(temp12_BonePulses);
            }
            stream.Position = offset + 136;
            Field8 = new GeoSet[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                GeoSet temp12_Field8;
                temp12_Field8 = new GeoSet();
                temp12_Field8.FileRead(stream, stream.Position);
                _Field8[loop12] = temp12_Field8;
            }
            stream.Position = offset + 184;
            Field9 = new Sphere();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 200;
            nCollisionCapsuleCount = stream.ReadValueS32();
            stream.Position = offset + 204;
            serCollisionCapsules = new SerializeData();
            serCollisionCapsules.FileRead(stream, stream.Position);
            stream.Position = offset + 216;
            //still checking variablearrays
            CollisionCapsules = new List<CollisionCapsule>();
            for (int i = 0; i < (int)(serCollisionCapsules.Field1 / 104); i++)
            {
                stream.Position = serCollisionCapsules.Field0 + 16 + (104 * i);
                CollisionCapsule temp12_CollisionCapsules;
                temp12_CollisionCapsules = new CollisionCapsule();
                temp12_CollisionCapsules.FileRead(stream, stream.Position);
                _CollisionCapsules.Add(temp12_CollisionCapsules);
            }
            stream.Position = offset + 224;
            nHardpointCount = stream.ReadValueS32();
            stream.Position = offset + 228;
            serHardpoints = new SerializeData();
            serHardpoints.FileRead(stream, stream.Position);
            stream.Position = offset + 240;
            //still checking variablearrays
            Hardpoints = new List<Hardpoint>();
            for (int i = 0; i < (int)(serHardpoints.Field1 / 96); i++)
            {
                stream.Position = serHardpoints.Field0 + 16 + (96 * i);
                Hardpoint temp12_Hardpoints;
                temp12_Hardpoints = new Hardpoint();
                temp12_Hardpoints.FileRead(stream, stream.Position);
                _Hardpoints.Add(temp12_Hardpoints);
            }
            stream.Position = offset + 248;
            Field16 = new Vector3D();
            Field16.FileRead(stream, stream.Position);
            stream.Position = offset + 264;
            tOctreeVisualMesh = new Octree();
            tOctreeVisualMesh.FileRead(stream, stream.Position);
            stream.Position = offset + 336;
            aabbBounds = new AABB();
            aabbBounds.FileRead(stream, stream.Position);
            stream.Position = offset + 400;
            Field19 = stream.ReadString(256);
            stream.Position = offset + 656;
            Field20 = stream.ReadString(256);
            stream.Position = offset + 912;
            Field21 = stream.ReadString(256);
            stream.Position = offset + 1168;
            Field22 = stream.ReadString(256);
            stream.Position = offset + 1424;
            Field23 = stream.ReadValueS32();
            stream.Position = offset + 1428;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 1432;
            Field25 = stream.ReadValueS32();
            stream.Position = offset + 360;
            nLoopConstraintCount = stream.ReadValueS32();
            stream.Position = offset + 364;
            serLoopConstraints = new SerializeData();
            serLoopConstraints.FileRead(stream, stream.Position);
            stream.Position = offset + 376;
            //still checking variablearrays
            LoopConstraints = new List<ConstraintParameters>();
            for (int i = 0; i < (int)(serLoopConstraints.Field1 / 276); i++)
            {
                stream.Position = serLoopConstraints.Field0 + 16 + (276 * i);
                ConstraintParameters temp12_LoopConstraints;
                temp12_LoopConstraints = new ConstraintParameters();
                temp12_LoopConstraints.FileRead(stream, stream.Position);
                _LoopConstraints.Add(temp12_LoopConstraints);
            }
            stream.Position = offset + 384;
            uRagdollDegrade = stream.ReadValueS32();
        }

    }

    public class ClothVertex : GameMessage
    {
        public Vector3D Field0;
        public Vector3D Field1;
        public float Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public override int StructSize() { return 84; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ClothVertex {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field6 = stream.ReadValueS32();
        }

    }

    public class ClothFace : GameMessage
    {
        public float Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ClothFace {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
        }

    }

    public class ClothConstraint : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public float Field3;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ClothConstraint {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field3 = stream.ReadValueF32();
        }

    }

    public class PlayLineParams : GameMessage
    {
        public int snoConversation;
        public int Field1;
        public bool Field2;
        public bool Field3;
        public bool Field4;
        public int LineID;
        public int Speaker;
        public int Field7;
        public int TextClass;
        public int Gender;
        public int AudioClass;
        public int SNOSpeakerActor;
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 49) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field13;
        public int AnimationTag;
        public int Duration;
        public int Id;
        public int Field17;
        public override int StructSize() { return 124; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoConversation = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadBool();
            Field4 = buffer.ReadBool();
            LineID = buffer.ReadInt(32);
            Speaker = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            TextClass = buffer.ReadInt(32);
            Gender = buffer.ReadInt(32);
            AudioClass = buffer.ReadInt(32);
            SNOSpeakerActor = buffer.ReadInt(32);
            Name = buffer.ReadCharArray(49);
            Field13 = buffer.ReadInt(32);
            AnimationTag = buffer.ReadInt(32);
            Duration = buffer.ReadInt(32);
            Id = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoConversation);
            buffer.WriteInt(32, Field1);
            buffer.WriteBool(Field2);
            buffer.WriteBool(Field3);
            buffer.WriteBool(Field4);
            buffer.WriteInt(32, LineID);
            buffer.WriteInt(32, Speaker);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, TextClass);
            buffer.WriteInt(32, Gender);
            buffer.WriteInt(32, AudioClass);
            buffer.WriteInt(32, SNOSpeakerActor);
            buffer.WriteCharArray(49, Name);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, AnimationTag);
            buffer.WriteInt(32, Duration);
            buffer.WriteInt(32, Id);
            buffer.WriteInt(32, Field17);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayLineParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoConversation:" + snoConversation.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("LineID:" + LineID.ToString());
            b.Append(' ', pad); b.AppendLine("Speaker:" + Speaker.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("TextClass:" + TextClass.ToString());
            b.Append(' ', pad); b.AppendLine("Gender:" + Gender.ToString());
            b.Append(' ', pad); b.AppendLine("AudioClass:" + AudioClass.ToString());
            b.Append(' ', pad); b.AppendLine("SNOSpeakerActor:" + SNOSpeakerActor.ToString());
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationTag:" + AnimationTag.ToString());
            b.Append(' ', pad); b.AppendLine("Duration:" + Duration.ToString());
            b.Append(' ', pad); b.AppendLine("Id:" + Id.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoConversation = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32() == 1;
            stream.Position = offset + 20;
            LineID = stream.ReadValueS32();
            stream.Position = offset + 24;
            Speaker = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 32;
            TextClass = stream.ReadValueS32();
            stream.Position = offset + 44;
            Gender = stream.ReadValueS32();
            stream.Position = offset + 48;
            AudioClass = stream.ReadValueS32();
            stream.Position = offset + 40;
            SNOSpeakerActor = stream.ReadValueS32();
            stream.Position = offset + 52;
            Name = stream.ReadString(49);
            stream.Position = offset + 104;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 108;
            AnimationTag = stream.ReadValueS32();
            stream.Position = offset + 112;
            Duration = stream.ReadValueS32();
            stream.Position = offset + 116;
            Id = stream.ReadValueS32();
            stream.Position = offset + 120;
            Field17 = stream.ReadValueS32();
        }

    }

    public class ACDClientTranslateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Tick;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 12) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public Vector3D Position;
        public float Angle;
        public float Speed;
        public int Field6;
        int _AnimationTag;
        public int AnimationTag { get { return _AnimationTag; } set { if (value < -1 || value > 0xFFFFF) throw new ArgumentOutOfRangeException(); _AnimationTag = value; } }
        public int? Field8;
        public override int StructSize() { return 52; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Tick = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(4);
            Position = new Vector3D();
            Position.Parse(buffer);
            Angle = buffer.ReadFloat32();
            Speed = buffer.ReadFloat32();
            Field6 = buffer.ReadInt(32);
            AnimationTag = buffer.ReadInt(21) + (-1);
            if (buffer.ReadBool())
                Field8 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Tick);
            buffer.WriteInt(4, Field2);
            Position.Encode(buffer);
            buffer.WriteFloat32(Angle);
            buffer.WriteFloat32(Speed);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(21, AnimationTag - (-1));
            if (Field8.HasValue)
                buffer.WriteInt(32, Field8.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDClientTranslateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Tick:" + Tick.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            Position.AsText(b, pad, "Position: ");
            b.Append(' ', pad); b.AppendLine("Angle:" + Angle.ToString());
            b.Append(' ', pad); b.AppendLine("Speed:" + Speed.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationTag:" + AnimationTag.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Tick = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Position = new Vector3D();
            Position.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            Angle = stream.ReadValueF32();
            stream.Position = offset + 32;
            Speed = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 40;
            _AnimationTag = stream.ReadValueS32();
            stream.Position = offset + 44;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class ACDTranslateSyncMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public Vector3D Field2;
        public bool? Field3;
        int? _Field4;
        public int? Field4 { get { return _Field4; } set { if (value.HasValue && (value.Value < 0 || value.Value > 0xFFFF)) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new Vector3D();
            Field2.Parse(buffer);
            if (buffer.ReadBool())
                Field3 = buffer.ReadBool();
            if (buffer.ReadBool())
                Field4 = buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            if (Field3.HasValue)
                buffer.WriteBool(Field3.Value);
            if (Field4.HasValue)
                buffer.WriteInt(16, Field4.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateSyncMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new Vector3D();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 32;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class ACDTranslateSnappedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public Vector3D Field2;
        public float Field3;
        public bool Field4;
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < 0 || value > 0x1FFFFFF) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        int? _Field6;
        public int? Field6 { get { return _Field6; } set { if (value.HasValue && (value.Value < 0 || value.Value > 0xFFFF)) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public override int StructSize() { return 44; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new Vector3D();
            Field2.Parse(buffer);
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadBool();
            Field5 = buffer.ReadInt(25);
            if (buffer.ReadBool())
                Field6 = buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            buffer.WriteFloat32(Field3);
            buffer.WriteBool(Field4);
            buffer.WriteInt(25, Field5);
            if (Field6.HasValue)
                buffer.WriteInt(16, Field6.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateSnappedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new Vector3D();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32() == 1;
            stream.Position = offset + 32;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class ACDTranslateNormalMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        public Vector3D Position;
        public float? Angle;
        public bool? TurnImmediately;
        public float? Speed;
        int? _Field6;
        public int? Field6 { get { return _Field6; } set { if (value.HasValue && (value.Value < 0 || value.Value > 0x1FFFFFF)) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        int? _AnimationTag;
        public int? AnimationTag { get { return _AnimationTag; } set { if (value.HasValue && (value.Value < -1 || value.Value > 0xFFFFF)) throw new ArgumentOutOfRangeException(); _AnimationTag = value; } }
        public int? Field8;
        public int? Field9;
        int? _Field10;
        public int? Field10 { get { return _Field10; } set { if (value.HasValue && (value.Value < 0 || value.Value > 0xFFFF)) throw new ArgumentOutOfRangeException(); _Field10 = value; } }
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            if (buffer.ReadBool())
            {
                Position = new Vector3D();
                Position.Parse(buffer);
            }
            if (buffer.ReadBool())
                Angle = buffer.ReadFloat32();
            if (buffer.ReadBool())
                TurnImmediately = buffer.ReadBool();
            if (buffer.ReadBool())
                Speed = buffer.ReadFloat32();
            if (buffer.ReadBool())
                Field6 = buffer.ReadInt(25);
            if (buffer.ReadBool())
                AnimationTag = buffer.ReadInt(21) + (-1);
            if (buffer.ReadBool())
                Field8 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field9 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field10 = buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            if (Position != null)
                Position.Encode(buffer);
            if (Angle.HasValue)
                buffer.WriteFloat32(Angle);
            if (TurnImmediately.HasValue)
                buffer.WriteBool(TurnImmediately.Value);
            if (Speed.HasValue)
                buffer.WriteFloat32(Speed);
            if (Field6.HasValue)
                buffer.WriteInt(25, Field6.Value);
            if (AnimationTag.HasValue)
                buffer.WriteInt(21, AnimationTag.Value - (-1));
            if (Field8.HasValue)
                buffer.WriteInt(32, Field8.Value);
            if (Field9.HasValue)
                buffer.WriteInt(32, Field9.Value);
            if (Field10.HasValue)
                buffer.WriteInt(16, Field10.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateNormalMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            b.Append(' ', pad); b.AppendLine("Position:" + Position.ToString());
            b.Append(' ', pad); b.AppendLine("Angle:" + Angle.ToString());
            b.Append(' ', pad); b.AppendLine("TurnImmediately:" + TurnImmediately.ToString());
            b.Append(' ', pad); b.AppendLine("Speed:" + Speed.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationTag:" + AnimationTag.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            // Position: type DT_OPTIONAL[Vector3D] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 28;
            // Angle: type DT_OPTIONAL[float] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 36;
            // TurnImmediately: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 44;
            // Speed: type DT_OPTIONAL[float] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 52;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 60;
            // AnimationTag: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 68;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 76;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 84;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class SceneClusterSet : GameMessage
    {
        public int Field0;
        public SerializeData serClusters;
        List<SceneCluster> _Clusters;
        public List<SceneCluster> Clusters { get { return _Clusters; } set { _Clusters = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serClusters = new SerializeData();
            serClusters.Parse(buffer);
            //still checking variablearrays
            this.Clusters = new List<SceneCluster>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Clusters.Count; loop12++)
            {
                _Clusters[loop12] = new SceneCluster();
                _Clusters[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serClusters.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Clusters.Count);
            for (int loop12 = 0; loop12 < _Clusters.Count; loop12++)
            {
                _Clusters[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneClusterSet {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serClusters.AsText(b, pad, "serClusters: ");
            for (int loop12 = 0; loop12 < _Clusters.Count; loop12++)
            {
                _Clusters[loop12].AsText(b, pad, "_Clusters[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serClusters = new SerializeData();
            serClusters.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Clusters = new List<SceneCluster>();
            for (int i = 0; i < (int)(serClusters.Field1 / 176); i++)
            {
                stream.Position = serClusters.Field0 + 16 + (176 * i);
                SceneCluster temp12_Clusters;
                temp12_Clusters = new SceneCluster();
                temp12_Clusters.FileRead(stream, stream.Position);
                _Clusters.Add(temp12_Clusters);
            }
        }

    }

    public class SceneCluster : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public int Field2;
        public SerializeData serSubSceneGroups;
        List<SubSceneGroup> _SubSceneGroups;
        public List<SubSceneGroup> SubSceneGroups { get { return _SubSceneGroups; } set { _SubSceneGroups = value; } }
        public SubSceneGroup Field5;
        public override int StructSize() { return 176; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(128);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            serSubSceneGroups = new SerializeData();
            serSubSceneGroups.Parse(buffer);
            //still checking variablearrays
            this.SubSceneGroups = new List<SubSceneGroup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SubSceneGroups.Count; loop12++)
            {
                _SubSceneGroups[loop12] = new SubSceneGroup();
                _SubSceneGroups[loop12].Parse(buffer);
            }
            Field5 = new SubSceneGroup();
            Field5.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            serSubSceneGroups.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SubSceneGroups.Count);
            for (int loop12 = 0; loop12 < _SubSceneGroups.Count; loop12++)
            {
                _SubSceneGroups[loop12].Encode(buffer);
            }
            Field5.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneCluster {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            serSubSceneGroups.AsText(b, pad, "serSubSceneGroups: ");
            for (int loop12 = 0; loop12 < _SubSceneGroups.Count; loop12++)
            {
                _SubSceneGroups[loop12].AsText(b, pad, "_SubSceneGroups[loop12]: ");
            }
            Field5.AsText(b, pad, "Field5: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(128);
            stream.Position = offset + 128;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 132;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 144;
            serSubSceneGroups = new SerializeData();
            serSubSceneGroups.FileRead(stream, stream.Position);
            stream.Position = offset + 136;
            //still checking variablearrays
            SubSceneGroups = new List<SubSceneGroup>();
            for (int i = 0; i < (int)(serSubSceneGroups.Field1 / 24); i++)
            {
                stream.Position = serSubSceneGroups.Field0 + 16 + (24 * i);
                SubSceneGroup temp12_SubSceneGroups;
                temp12_SubSceneGroups = new SubSceneGroup();
                temp12_SubSceneGroups.FileRead(stream, stream.Position);
                _SubSceneGroups.Add(temp12_SubSceneGroups);
            }
            stream.Position = offset + 152;
            Field5 = new SubSceneGroup();
            Field5.FileRead(stream, stream.Position);
        }

    }

    public class SubSceneGroup : GameMessage
    {
        public int Field0;
        public int Field1;
        public SerializeData serSubScenes;
        List<SubSceneEntry> _SubScenes;
        public List<SubSceneEntry> SubScenes { get { return _SubScenes; } set { _SubScenes = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            serSubScenes = new SerializeData();
            serSubScenes.Parse(buffer);
            //still checking variablearrays
            this.SubScenes = new List<SubSceneEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SubScenes.Count; loop12++)
            {
                _SubScenes[loop12] = new SubSceneEntry();
                _SubScenes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            serSubScenes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SubScenes.Count);
            for (int loop12 = 0; loop12 < _SubScenes.Count; loop12++)
            {
                _SubScenes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SubSceneGroup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            serSubScenes.AsText(b, pad, "serSubScenes: ");
            for (int loop12 = 0; loop12 < _SubScenes.Count; loop12++)
            {
                _SubScenes[loop12].AsText(b, pad, "_SubScenes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serSubScenes = new SerializeData();
            serSubScenes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            SubScenes = new List<SubSceneEntry>();
            for (int i = 0; i < (int)(serSubScenes.Field1 / 32); i++)
            {
                stream.Position = serSubScenes.Field0 + 16 + (32 * i);
                SubSceneEntry temp12_SubScenes;
                temp12_SubScenes = new SubSceneEntry();
                temp12_SubScenes.FileRead(stream, stream.Position);
                _SubScenes.Add(temp12_SubScenes);
            }
        }

    }

    public class SubSceneEntry : GameMessage
    {
        public int snoScene;
        public int Field1;
        public int Field2;
        public SerializeData serLabels;
        List<SubSceneLabel> _Labels;
        public List<SubSceneLabel> Labels { get { return _Labels; } set { _Labels = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoScene = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            serLabels = new SerializeData();
            serLabels.Parse(buffer);
            //still checking variablearrays
            this.Labels = new List<SubSceneLabel>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Labels.Count; loop12++)
            {
                _Labels[loop12] = new SubSceneLabel();
                _Labels[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoScene);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            serLabels.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Labels.Count);
            for (int loop12 = 0; loop12 < _Labels.Count; loop12++)
            {
                _Labels[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SubSceneEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoScene:" + snoScene.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            serLabels.AsText(b, pad, "serLabels: ");
            for (int loop12 = 0; loop12 < _Labels.Count; loop12++)
            {
                _Labels[loop12].AsText(b, pad, "_Labels[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoScene = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            serLabels = new SerializeData();
            serLabels.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            Labels = new List<SubSceneLabel>();
            for (int i = 0; i < (int)(serLabels.Field1 / 8); i++)
            {
                stream.Position = serLabels.Field0 + 16 + (8 * i);
                SubSceneLabel temp12_Labels;
                temp12_Labels = new SubSceneLabel();
                temp12_Labels.FileRead(stream, stream.Position);
                _Labels.Add(temp12_Labels);
            }
        }

    }

    public class PowerDef : GameMessage
    {
        public SerializeData serTagMap;
        public DT_TAGMAP TagMap;
        public SerializeData serGlobalTagMap;
        public DT_TAGMAP GeneralTagMap;
        public SerializeData serPVPGlobalTagMap;
        public DT_TAGMAP PVPGeneralTagMap;
        public SerializeData serContactTagMap_0_;
        public DT_TAGMAP Contact0TagMap;
        public SerializeData serContactTagMap_1_;
        public DT_TAGMAP Contact1TagMap;
        public SerializeData serContactTagMap_2_;
        public DT_TAGMAP Contact2TagMap;
        public SerializeData serContactTagMap_3_;
        public DT_TAGMAP Contact3TagMap;
        public SerializeData serPVPContactTagMap_0_;
        public DT_TAGMAP PVPContact0TagMap;
        public SerializeData serPVPContactTagMap_1_;
        public DT_TAGMAP PVPContact1TagMap;
        public SerializeData serPVPContactTagMap_2_;
        public DT_TAGMAP PVPContact2TagMap;
        public SerializeData serPVPContactTagMap_3_;
        public DT_TAGMAP PVPContact3TagMap;
        public int Field22;
        public ActorCollisionFlags ActColFlags1;
        public ActorCollisionFlags ActColFlags2;
        public BuffDef Field25;
        public BuffDef Field26;
        public BuffDef Field27;
        public BuffDef Field28;
        public override int StructSize() { return 344; }

        public override void Parse(GameBitBuffer buffer)
        {
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            TagMap = new DT_TAGMAP();
            TagMap.Parse(buffer);
            serGlobalTagMap = new SerializeData();
            serGlobalTagMap.Parse(buffer);
            GeneralTagMap = new DT_TAGMAP();
            GeneralTagMap.Parse(buffer);
            serPVPGlobalTagMap = new SerializeData();
            serPVPGlobalTagMap.Parse(buffer);
            PVPGeneralTagMap = new DT_TAGMAP();
            PVPGeneralTagMap.Parse(buffer);
            serContactTagMap_0_ = new SerializeData();
            serContactTagMap_0_.Parse(buffer);
            Contact0TagMap = new DT_TAGMAP();
            Contact0TagMap.Parse(buffer);
            serContactTagMap_1_ = new SerializeData();
            serContactTagMap_1_.Parse(buffer);
            Contact1TagMap = new DT_TAGMAP();
            Contact1TagMap.Parse(buffer);
            serContactTagMap_2_ = new SerializeData();
            serContactTagMap_2_.Parse(buffer);
            Contact2TagMap = new DT_TAGMAP();
            Contact2TagMap.Parse(buffer);
            serContactTagMap_3_ = new SerializeData();
            serContactTagMap_3_.Parse(buffer);
            Contact3TagMap = new DT_TAGMAP();
            Contact3TagMap.Parse(buffer);
            serPVPContactTagMap_0_ = new SerializeData();
            serPVPContactTagMap_0_.Parse(buffer);
            PVPContact0TagMap = new DT_TAGMAP();
            PVPContact0TagMap.Parse(buffer);
            serPVPContactTagMap_1_ = new SerializeData();
            serPVPContactTagMap_1_.Parse(buffer);
            PVPContact1TagMap = new DT_TAGMAP();
            PVPContact1TagMap.Parse(buffer);
            serPVPContactTagMap_2_ = new SerializeData();
            serPVPContactTagMap_2_.Parse(buffer);
            PVPContact2TagMap = new DT_TAGMAP();
            PVPContact2TagMap.Parse(buffer);
            serPVPContactTagMap_3_ = new SerializeData();
            serPVPContactTagMap_3_.Parse(buffer);
            PVPContact3TagMap = new DT_TAGMAP();
            PVPContact3TagMap.Parse(buffer);
            Field22 = buffer.ReadInt(32);
            ActColFlags1 = new ActorCollisionFlags();
            ActColFlags1.Parse(buffer);
            ActColFlags2 = new ActorCollisionFlags();
            ActColFlags2.Parse(buffer);
            Field25 = new BuffDef();
            Field25.Parse(buffer);
            Field26 = new BuffDef();
            Field26.Parse(buffer);
            Field27 = new BuffDef();
            Field27.Parse(buffer);
            Field28 = new BuffDef();
            Field28.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serTagMap.Encode(buffer);
            TagMap.Encode(buffer);
            serGlobalTagMap.Encode(buffer);
            GeneralTagMap.Encode(buffer);
            serPVPGlobalTagMap.Encode(buffer);
            PVPGeneralTagMap.Encode(buffer);
            serContactTagMap_0_.Encode(buffer);
            Contact0TagMap.Encode(buffer);
            serContactTagMap_1_.Encode(buffer);
            Contact1TagMap.Encode(buffer);
            serContactTagMap_2_.Encode(buffer);
            Contact2TagMap.Encode(buffer);
            serContactTagMap_3_.Encode(buffer);
            Contact3TagMap.Encode(buffer);
            serPVPContactTagMap_0_.Encode(buffer);
            PVPContact0TagMap.Encode(buffer);
            serPVPContactTagMap_1_.Encode(buffer);
            PVPContact1TagMap.Encode(buffer);
            serPVPContactTagMap_2_.Encode(buffer);
            PVPContact2TagMap.Encode(buffer);
            serPVPContactTagMap_3_.Encode(buffer);
            PVPContact3TagMap.Encode(buffer);
            buffer.WriteInt(32, Field22);
            ActColFlags1.Encode(buffer);
            ActColFlags2.Encode(buffer);
            Field25.Encode(buffer);
            Field26.Encode(buffer);
            Field27.Encode(buffer);
            Field28.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PowerDef {");
            pad += 4;
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("TagMap:" + TagMap.ToString());
            serGlobalTagMap.AsText(b, pad, "serGlobalTagMap: ");
            b.Append(' ', pad); b.AppendLine("GeneralTagMap:" + GeneralTagMap.ToString());
            serPVPGlobalTagMap.AsText(b, pad, "serPVPGlobalTagMap: ");
            b.Append(' ', pad); b.AppendLine("PVPGeneralTagMap:" + PVPGeneralTagMap.ToString());
            serContactTagMap_0_.AsText(b, pad, "serContactTagMap_0_: ");
            b.Append(' ', pad); b.AppendLine("Contact0TagMap:" + Contact0TagMap.ToString());
            serContactTagMap_1_.AsText(b, pad, "serContactTagMap_1_: ");
            b.Append(' ', pad); b.AppendLine("Contact1TagMap:" + Contact1TagMap.ToString());
            serContactTagMap_2_.AsText(b, pad, "serContactTagMap_2_: ");
            b.Append(' ', pad); b.AppendLine("Contact2TagMap:" + Contact2TagMap.ToString());
            serContactTagMap_3_.AsText(b, pad, "serContactTagMap_3_: ");
            b.Append(' ', pad); b.AppendLine("Contact3TagMap:" + Contact3TagMap.ToString());
            serPVPContactTagMap_0_.AsText(b, pad, "serPVPContactTagMap_0_: ");
            b.Append(' ', pad); b.AppendLine("PVPContact0TagMap:" + PVPContact0TagMap.ToString());
            serPVPContactTagMap_1_.AsText(b, pad, "serPVPContactTagMap_1_: ");
            b.Append(' ', pad); b.AppendLine("PVPContact1TagMap:" + PVPContact1TagMap.ToString());
            serPVPContactTagMap_2_.AsText(b, pad, "serPVPContactTagMap_2_: ");
            b.Append(' ', pad); b.AppendLine("PVPContact2TagMap:" + PVPContact2TagMap.ToString());
            serPVPContactTagMap_3_.AsText(b, pad, "serPVPContactTagMap_3_: ");
            b.Append(' ', pad); b.AppendLine("PVPContact3TagMap:" + PVPContact3TagMap.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            ActColFlags1.AsText(b, pad, "ActColFlags1: ");
            ActColFlags2.AsText(b, pad, "ActColFlags2: ");
            Field25.AsText(b, pad, "Field25: ");
            Field26.AsText(b, pad, "Field26: ");
            Field27.AsText(b, pad, "Field27: ");
            Field28.AsText(b, pad, "Field28: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            // TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 16;
            serGlobalTagMap = new SerializeData();
            serGlobalTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            // GeneralTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 32;
            serPVPGlobalTagMap = new SerializeData();
            serPVPGlobalTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            // PVPGeneralTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 48;
            serContactTagMap_0_ = new SerializeData();
            serContactTagMap_0_.FileRead(stream, stream.Position);
            stream.Position = offset + 80;
            // Contact0TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 56;
            serContactTagMap_1_ = new SerializeData();
            serContactTagMap_1_.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            // Contact1TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 64;
            serContactTagMap_2_ = new SerializeData();
            serContactTagMap_2_.FileRead(stream, stream.Position);
            stream.Position = offset + 96;
            // Contact2TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 72;
            serContactTagMap_3_ = new SerializeData();
            serContactTagMap_3_.FileRead(stream, stream.Position);
            stream.Position = offset + 104;
            // Contact3TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 112;
            serPVPContactTagMap_0_ = new SerializeData();
            serPVPContactTagMap_0_.FileRead(stream, stream.Position);
            stream.Position = offset + 144;
            // PVPContact0TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 120;
            serPVPContactTagMap_1_ = new SerializeData();
            serPVPContactTagMap_1_.FileRead(stream, stream.Position);
            stream.Position = offset + 152;
            // PVPContact1TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 128;
            serPVPContactTagMap_2_ = new SerializeData();
            serPVPContactTagMap_2_.FileRead(stream, stream.Position);
            stream.Position = offset + 160;
            // PVPContact2TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 136;
            serPVPContactTagMap_3_ = new SerializeData();
            serPVPContactTagMap_3_.FileRead(stream, stream.Position);
            stream.Position = offset + 168;
            // PVPContact3TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 176;
            Field22 = stream.ReadValueS32();
            stream.Position = offset + 180;
            ActColFlags1 = new ActorCollisionFlags();
            ActColFlags1.FileRead(stream, stream.Position);
            stream.Position = offset + 196;
            ActColFlags2 = new ActorCollisionFlags();
            ActColFlags2.FileRead(stream, stream.Position);
            stream.Position = offset + 216;
            Field25 = new BuffDef();
            Field25.FileRead(stream, stream.Position);
            stream.Position = offset + 232;
            Field26 = new BuffDef();
            Field26.FileRead(stream, stream.Position);
            stream.Position = offset + 248;
            Field27 = new BuffDef();
            Field27.FileRead(stream, stream.Position);
            stream.Position = offset + 264;
            Field28 = new BuffDef();
            Field28.FileRead(stream, stream.Position);
        }

    }

    public class GizmoLocSpawnType : GameMessage
    {
        public SerializeData serEntry;
        List<GizmoLocSpawnEntry> _SpawnEntry;
        public List<GizmoLocSpawnEntry> SpawnEntry { get { return _SpawnEntry; } set { _SpawnEntry = value; } }
        public string _Description;
        public string Description { get { return _Description; } set { if (value != null && value.Length > 80) throw new ArgumentOutOfRangeException(); _Description = value; } }
        public string _Comment;
        public string Comment { get { return _Comment; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Comment = value; } }
        public override int StructSize() { return 352; }

        public override void Parse(GameBitBuffer buffer)
        {
            serEntry = new SerializeData();
            serEntry.Parse(buffer);
            //still checking variablearrays
            this.SpawnEntry = new List<GizmoLocSpawnEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpawnEntry.Count; loop12++)
            {
                _SpawnEntry[loop12] = new GizmoLocSpawnEntry();
                _SpawnEntry[loop12].Parse(buffer);
            }
            Description = buffer.ReadCharArray(80);
            Comment = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serEntry.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpawnEntry.Count);
            for (int loop12 = 0; loop12 < _SpawnEntry.Count; loop12++)
            {
                _SpawnEntry[loop12].Encode(buffer);
            }
            buffer.WriteCharArray(80, Description);
            buffer.WriteCharArray(256, Comment);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GizmoLocSpawnType {");
            pad += 4;
            serEntry.AsText(b, pad, "serEntry: ");
            for (int loop12 = 0; loop12 < _SpawnEntry.Count; loop12++)
            {
                _SpawnEntry[loop12].AsText(b, pad, "_SpawnEntry[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Description:" + Description.ToString());
            b.Append(' ', pad); b.AppendLine("Comment:" + Comment.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 8;
            serEntry = new SerializeData();
            serEntry.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            //still checking variablearrays
            SpawnEntry = new List<GizmoLocSpawnEntry>();
            for (int i = 0; i < (int)(serEntry.Field1 / 20); i++)
            {
                stream.Position = serEntry.Field0 + 16 + (20 * i);
                GizmoLocSpawnEntry temp12_SpawnEntry;
                temp12_SpawnEntry = new GizmoLocSpawnEntry();
                temp12_SpawnEntry.FileRead(stream, stream.Position);
                _SpawnEntry.Add(temp12_SpawnEntry);
            }
            stream.Position = offset + 16;
            Description = stream.ReadString(80);
            stream.Position = offset + 96;
            Comment = stream.ReadString(256);
        }

    }

    public class LabelRuleSet : GameMessage
    {
        public int Field0;
        public SerializeData serRules;
        List<LabelRule> _Rules;
        public List<LabelRule> Rules { get { return _Rules; } set { _Rules = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serRules = new SerializeData();
            serRules.Parse(buffer);
            //still checking variablearrays
            this.Rules = new List<LabelRule>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Rules.Count; loop12++)
            {
                _Rules[loop12] = new LabelRule();
                _Rules[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serRules.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Rules.Count);
            for (int loop12 = 0; loop12 < _Rules.Count; loop12++)
            {
                _Rules[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LabelRuleSet {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serRules.AsText(b, pad, "serRules: ");
            for (int loop12 = 0; loop12 < _Rules.Count; loop12++)
            {
                _Rules[loop12].AsText(b, pad, "_Rules[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serRules = new SerializeData();
            serRules.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Rules = new List<LabelRule>();
            for (int i = 0; i < (int)(serRules.Field1 / 176); i++)
            {
                stream.Position = serRules.Field0 + 16 + (176 * i);
                LabelRule temp12_Rules;
                temp12_Rules = new LabelRule();
                temp12_Rules.FileRead(stream, stream.Position);
                _Rules.Add(temp12_Rules);
            }
        }

    }

    public class LabelRule : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public LabelCondition Field1;
        public int Field2;
        public int Field3;
        public SerializeData serEntries;
        List<LabelEntry> _Entries;
        public List<LabelEntry> Entries { get { return _Entries; } set { _Entries = value; } }
        public override int StructSize() { return 176; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(128);
            Field1 = new LabelCondition();
            Field1.Parse(buffer);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            serEntries = new SerializeData();
            serEntries.Parse(buffer);
            //still checking variablearrays
            this.Entries = new List<LabelEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Entries.Count; loop12++)
            {
                _Entries[loop12] = new LabelEntry();
                _Entries[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Field0);
            Field1.Encode(buffer);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            serEntries.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Entries.Count);
            for (int loop12 = 0; loop12 < _Entries.Count; loop12++)
            {
                _Entries[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LabelRule {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serEntries.AsText(b, pad, "serEntries: ");
            for (int loop12 = 0; loop12 < _Entries.Count; loop12++)
            {
                _Entries[loop12].AsText(b, pad, "_Entries[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(128);
            stream.Position = offset + 128;
            Field1 = new LabelCondition();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 152;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 168;
            serEntries = new SerializeData();
            serEntries.FileRead(stream, stream.Position);
            stream.Position = offset + 160;
            //still checking variablearrays
            Entries = new List<LabelEntry>();
            for (int i = 0; i < (int)(serEntries.Field1 / 20); i++)
            {
                stream.Position = serEntries.Field0 + 16 + (20 * i);
                LabelEntry temp12_Entries;
                temp12_Entries = new LabelEntry();
                temp12_Entries.FileRead(stream, stream.Position);
                _Entries.Add(temp12_Entries);
            }
        }

    }

    public class HotbarButtonData : GameMessage
    {
        public int SNOSkill;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 4) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int ItemGBId;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOSkill = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(3) + (-1);
            ItemGBId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOSkill);
            buffer.WriteInt(3, Field1 - (-1));
            buffer.WriteInt(32, ItemGBId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HotbarButtonData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOSkill:" + SNOSkill.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("ItemGBId:" + ItemGBId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOSkill = stream.ReadValueS32();
            stream.Position = offset + 4;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            ItemGBId = stream.ReadValueS32();
        }

    }

    public class MapMarkerInfoMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public WorldPlace Field2;
        public int Field3;
        public int m_snoStringList;
        public int Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public int Field9;
        public bool Field10;
        public bool Field11;
        public bool Field12;
        public int Field13;
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new WorldPlace();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt(32);
            m_snoStringList = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadBool();
            Field11 = buffer.ReadBool();
            Field12 = buffer.ReadBool();
            Field13 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, m_snoStringList);
            buffer.WriteInt(32, Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteBool(Field10);
            buffer.WriteBool(Field11);
            buffer.WriteBool(Field12);
            buffer.WriteInt(32, Field13);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MapMarkerInfoMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("m_snoStringList:" + m_snoStringList.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new WorldPlace();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 36;
            m_snoStringList = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 64;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field10 = stream.ReadValueS32() == 1;
            stream.Position = offset + 48;
            Field11 = stream.ReadValueS32() == 1;
            stream.Position = offset + 52;
            Field12 = stream.ReadValueS32() == 1;
            stream.Position = offset + 68;
            Field13 = stream.ReadValueS32();
        }

    }

    public class InvLoc : GameMessage
    {
        public int OwnerID;
        int _EquipmentSlot;
        public int EquipmentSlot { get { return _EquipmentSlot; } set { if (value < -1 || value > 26) throw new ArgumentOutOfRangeException(); _EquipmentSlot = value; } }
        public int Column;
        public int Row;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            OwnerID = buffer.ReadInt(32);
            EquipmentSlot = buffer.ReadInt(5) + (-1);
            Column = buffer.ReadInt(32);
            Row = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, OwnerID);
            buffer.WriteInt(5, EquipmentSlot - (-1));
            buffer.WriteInt(32, Column);
            buffer.WriteInt(32, Row);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InvLoc {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("OwnerID:" + OwnerID.ToString());
            b.Append(' ', pad); b.AppendLine("EquipmentSlot:" + EquipmentSlot.ToString());
            b.Append(' ', pad); b.AppendLine("Column:" + Column.ToString());
            b.Append(' ', pad); b.AppendLine("Row:" + Row.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            OwnerID = stream.ReadValueS32();
            stream.Position = offset + 4;
            _EquipmentSlot = stream.ReadValueS32();
            stream.Position = offset + 8;
            Column = stream.ReadValueS32();
            stream.Position = offset + 12;
            Row = stream.ReadValueS32();
        }

    }

    public class InventoryRequestQuickMoveMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ItemID;
        public int Field2;
        int _DestEquipmentSlot;
        public int DestEquipmentSlot { get { return _DestEquipmentSlot; } set { if (value < -1 || value > 26) throw new ArgumentOutOfRangeException(); _DestEquipmentSlot = value; } }
        public int DestRowStart;
        public int DestRowEnd;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ItemID = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            DestEquipmentSlot = buffer.ReadInt(5) + (-1);
            DestRowStart = buffer.ReadInt(32);
            DestRowEnd = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ItemID);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(5, DestEquipmentSlot - (-1));
            buffer.WriteInt(32, DestRowStart);
            buffer.WriteInt(32, DestRowEnd);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryRequestQuickMoveMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ItemID:" + ItemID.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("DestEquipmentSlot:" + DestEquipmentSlot.ToString());
            b.Append(' ', pad); b.AppendLine("DestRowStart:" + DestRowStart.ToString());
            b.Append(' ', pad); b.AppendLine("DestRowEnd:" + DestRowEnd.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ItemID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _DestEquipmentSlot = stream.ReadValueS32();
            stream.Position = offset + 20;
            DestRowStart = stream.ReadValueS32();
            stream.Position = offset + 24;
            DestRowEnd = stream.ReadValueS32();
        }

    }

    public class VictimMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 100) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 11) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public int snoKillerActor;
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < -1 || value > 23) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        int[] _Field7;
        public int[] Field7 { get { return _Field7; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        public int snoPowerDmgSource;
        public override int StructSize() { return 44; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(7);
            Field3 = buffer.ReadInt(4) + (-1);
            Field4 = buffer.ReadInt(4) + (-1);
            snoKillerActor = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(5) + (-1);
            Field7 = new int[2];
            for (int i = 0; i < _Field7.Length; i++) _Field7[i] = buffer.ReadInt(32);
            snoPowerDmgSource = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1);
            buffer.WriteInt(7, Field2);
            buffer.WriteInt(4, Field3 - (-1));
            buffer.WriteInt(4, Field4 - (-1));
            buffer.WriteInt(32, snoKillerActor);
            buffer.WriteInt(5, Field6 - (-1));
            for (int i = 0; i < _Field7.Length; i++) buffer.WriteInt(32, _Field7[i]);
            buffer.WriteInt(32, snoPowerDmgSource);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VictimMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("snoKillerActor:" + snoKillerActor.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            for (int loop12 = 0; loop12 < _Field7.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field7[loop12]:" + _Field7[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("snoPowerDmgSource:" + snoPowerDmgSource.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            snoKillerActor = stream.ReadValueS32();
            stream.Position = offset + 28;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field7 = new int[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                int temp12_Field7;
                temp12_Field7 = stream.ReadValueS32();
                _Field7[loop12] = temp12_Field7;
            }
            stream.Position = offset + 40;
            snoPowerDmgSource = stream.ReadValueS32();
        }

    }

    public class ChatMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public string _Field3;
        public string Field3 { get { return _Field3; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 528; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(2);
            Field2 = buffer.ReadInt(4) + (-1);
            Field3 = buffer.ReadCharArray(512);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(2, Field1);
            buffer.WriteInt(4, Field2 - (-1));
            buffer.WriteCharArray(512, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ChatMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadString(512);
        }

    }

    public class TryConsoleCommand : GameMessage
    {
        public RequiredMessageHeader Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public WorldPlace Field3;
        public int Field4;
        public override int StructSize() { return 544; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadCharArray(512);
            Field2 = buffer.ReadInt(4) + (-1);
            Field3 = new WorldPlace();
            Field3.Parse(buffer);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteCharArray(512, Field1);
            buffer.WriteInt(4, Field2 - (-1));
            Field3.Encode(buffer);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TryConsoleCommand {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = stream.ReadString(512);
            stream.Position = offset + 8;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 524;
            Field3 = new WorldPlace();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 540;
            Field4 = stream.ReadValueS32();
        }

    }

    public class InventoryLocationMessageData : GameMessage
    {
        public int OwnerID;
        int _EquipmentSlot;
        public int EquipmentSlot { get { return _EquipmentSlot; } set { if (value < -1 || value > 26) throw new ArgumentOutOfRangeException(); _EquipmentSlot = value; } }
        public IVector2D InventoryLocation;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            OwnerID = buffer.ReadInt(32);
            EquipmentSlot = buffer.ReadInt(5) + (-1);
            InventoryLocation = new IVector2D();
            InventoryLocation.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, OwnerID);
            buffer.WriteInt(5, EquipmentSlot - (-1));
            InventoryLocation.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryLocationMessageData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("OwnerID:" + OwnerID.ToString());
            b.Append(' ', pad); b.AppendLine("EquipmentSlot:" + EquipmentSlot.ToString());
            InventoryLocation.AsText(b, pad, "InventoryLocation: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            OwnerID = stream.ReadValueS32();
            stream.Position = offset + 4;
            _EquipmentSlot = stream.ReadValueS32();
            stream.Position = offset + 8;
            InventoryLocation = new IVector2D();
            InventoryLocation.FileRead(stream, stream.Position);
        }

    }

    public class ACDEnterKnownMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public int ActorSNOId;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 63) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 1) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public WorldLocationMessageData WorldLocation;
        public InventoryLocationMessageData InventoryLocation;
        public GBHandle Field7;
        public int Field8;
        public int NameSNOId;
        int _Qualilty;
        public int Qualilty { get { return _Qualilty; } set { if (value < -1 || value > 10) throw new ArgumentOutOfRangeException(); _Qualilty = value; } }
        public byte Field11;
        public int? Field12;
        public int? MarkerSetSNO;
        public int? MarketSetIndex;
        public override int StructSize() { return 132; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            ActorSNOId = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(6);
            Field4 = buffer.ReadInt(2) + (-1);
            if (buffer.ReadBool())
            {
                WorldLocation = new WorldLocationMessageData();
                WorldLocation.Parse(buffer);
            }
            if (buffer.ReadBool())
            {
                InventoryLocation = new InventoryLocationMessageData();
                InventoryLocation.Parse(buffer);
            }
            Field7 = new GBHandle();
            Field7.Parse(buffer);
            Field8 = buffer.ReadInt(32);
            NameSNOId = buffer.ReadInt(32);
            Qualilty = buffer.ReadInt(4) + (-1);
            Field11 = (byte)buffer.ReadInt(8);
            if (buffer.ReadBool())
                Field12 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                MarkerSetSNO = buffer.ReadInt(32);
            if (buffer.ReadBool())
                MarketSetIndex = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(32, ActorSNOId);
            buffer.WriteInt(6, Field3);
            buffer.WriteInt(2, Field4 - (-1));
            if (WorldLocation != null)
                WorldLocation.Encode(buffer);
            if (InventoryLocation != null)
                InventoryLocation.Encode(buffer);
            Field7.Encode(buffer);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, NameSNOId);
            buffer.WriteInt(4, Qualilty - (-1));
            buffer.WriteInt(8, Field11);
            if (Field12.HasValue)
                buffer.WriteInt(32, Field12.Value);
            if (MarkerSetSNO.HasValue)
                buffer.WriteInt(32, MarkerSetSNO.Value);
            if (MarketSetIndex.HasValue)
                buffer.WriteInt(32, MarketSetIndex.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDEnterKnownMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("ActorSNOId:" + ActorSNOId.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("WorldLocation:" + WorldLocation.ToString());
            b.Append(' ', pad); b.AppendLine("InventoryLocation:" + InventoryLocation.ToString());
            Field7.AsText(b, pad, "Field7: ");
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("NameSNOId:" + NameSNOId.ToString());
            b.Append(' ', pad); b.AppendLine("Qualilty:" + Qualilty.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("MarkerSetSNO:" + MarkerSetSNO.ToString());
            b.Append(' ', pad); b.AppendLine("MarketSetIndex:" + MarketSetIndex.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            ActorSNOId = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            // WorldLocation: type DT_OPTIONAL[WorldLocationMessageData] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 64;
            // InventoryLocation: type DT_OPTIONAL[InventoryLocationMessageData] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 84;
            Field7 = new GBHandle();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 92;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 96;
            NameSNOId = stream.ReadValueS32();
            stream.Position = offset + 100;
            _Qualilty = stream.ReadValueS32();
            stream.Position = offset + 104;
            Field11 = (byte)stream.ReadByte();
            stream.Position = offset + 121;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 105;
            // MarkerSetSNO: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 113;
            // MarketSetIndex: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class QuitGameMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _PlayerIndex;
        public int PlayerIndex { get { return _PlayerIndex; } set { if (value < 0 || value > 12) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PlayerIndex = buffer.ReadInt(4);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, PlayerIndex);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuitGameMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _PlayerIndex = stream.ReadValueS32();
        }

    }

    public class HeroStateData : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        int _PlayerFlags;
        public int PlayerFlags { get { return _PlayerFlags; } set { if (value < 0 || value > 0x3FFFFFFF) throw new ArgumentOutOfRangeException(); _PlayerFlags = value; } }
        public PlayerSavedData PlayerSavedData;
        public int QuestRewardHistoryEntriesCount;
        PlayerQuestRewardHistoryEntry[] _tQuestRewardHistory;
        public PlayerQuestRewardHistoryEntry[] tQuestRewardHistory { get { return _tQuestRewardHistory; } set { if (value != null && value.Length > 100) throw new ArgumentOutOfRangeException(); _tQuestRewardHistory = value; } }
        public override int StructSize() { return 17052; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            PlayerFlags = buffer.ReadInt(30);
            PlayerSavedData = new PlayerSavedData();
            PlayerSavedData.Parse(buffer);
            QuestRewardHistoryEntriesCount = buffer.ReadInt(32);
            tQuestRewardHistory = new PlayerQuestRewardHistoryEntry[buffer.ReadInt(7)];
            for (int i = 0; i < _tQuestRewardHistory.Length; i++)
            {
                _tQuestRewardHistory[i] = new PlayerQuestRewardHistoryEntry();
                _tQuestRewardHistory[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(30, PlayerFlags);
            PlayerSavedData.Encode(buffer);
            buffer.WriteInt(32, QuestRewardHistoryEntriesCount);
            buffer.WriteInt(7, _tQuestRewardHistory.Length);
            for (int i = 0; i < _tQuestRewardHistory.Length; i++) _tQuestRewardHistory[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HeroStateData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("PlayerFlags:" + PlayerFlags.ToString());
            PlayerSavedData.AsText(b, pad, "PlayerSavedData: ");
            b.Append(' ', pad); b.AppendLine("QuestRewardHistoryEntriesCount:" + QuestRewardHistoryEntriesCount.ToString());
            for (int loop12 = 0; loop12 < _tQuestRewardHistory.Length; loop12++)
            {
                _tQuestRewardHistory[loop12].AsText(b, pad, "_tQuestRewardHistory[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _PlayerFlags = stream.ReadValueS32();
            stream.Position = offset + 20;
            PlayerSavedData = new PlayerSavedData();
            PlayerSavedData.FileRead(stream, stream.Position);
            stream.Position = offset + 2436;
            QuestRewardHistoryEntriesCount = stream.ReadValueS32();
            stream.Position = offset + 2440;
            tQuestRewardHistory = new PlayerQuestRewardHistoryEntry[100];
            for (int loop12 = 0; loop12 < 100; loop12++)
            {
                PlayerQuestRewardHistoryEntry temp12_tQuestRewardHistory;
                temp12_tQuestRewardHistory = new PlayerQuestRewardHistoryEntry();
                temp12_tQuestRewardHistory.FileRead(stream, stream.Position);
                _tQuestRewardHistory[loop12] = temp12_tQuestRewardHistory;
            }
        }

    }

    public class PlayerSavedData : GameMessage
    {
        HotbarButtonData[] _HotBarButtons;
        public HotbarButtonData[] HotBarButtons { get { return _HotBarButtons; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _HotBarButtons = value; } }
        public byte Field1;
        public HotbarButtonData HotBarButton;
        public int PlaytimeTotal;
        public int WaypointFlags;
        public HirelingSavedData Field5;
        public int Field6;
        public LearnedLore LearnedLore;
        ActiveSkillSavedData[] _ActiveSkills;
        public ActiveSkillSavedData[] ActiveSkills { get { return _ActiveSkills; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _ActiveSkills = value; } }
        int[] _snoTraits;
        public int[] snoTraits { get { return _snoTraits; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _snoTraits = value; } }
        public SavePointData SavePointData;
        public override int StructSize() { return 2416; }

        public override void Parse(GameBitBuffer buffer)
        {
            HotBarButtons = new HotbarButtonData[6];
            for (int i = 0; i < _HotBarButtons.Length; i++)
            {
                _HotBarButtons[i] = new HotbarButtonData();
                _HotBarButtons[i].Parse(buffer);
            }
            Field1 = (byte)buffer.ReadInt(8);
            HotBarButton = new HotbarButtonData();
            HotBarButton.Parse(buffer);
            PlaytimeTotal = buffer.ReadInt(32);
            WaypointFlags = buffer.ReadInt(32);
            Field5 = new HirelingSavedData();
            Field5.Parse(buffer);
            Field6 = buffer.ReadInt(32);
            LearnedLore = new LearnedLore();
            LearnedLore.Parse(buffer);
            ActiveSkills = new ActiveSkillSavedData[6];
            for (int i = 0; i < _ActiveSkills.Length; i++)
            {
                _ActiveSkills[i] = new ActiveSkillSavedData();
                _ActiveSkills[i].Parse(buffer);
            }
            snoTraits = new int[3];
            for (int i = 0; i < _snoTraits.Length; i++) _snoTraits[i] = buffer.ReadInt(32);
            SavePointData = new SavePointData();
            SavePointData.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _HotBarButtons.Length; i++) _HotBarButtons[i].Encode(buffer);
            buffer.WriteInt(8, Field1);
            HotBarButton.Encode(buffer);
            buffer.WriteInt(32, PlaytimeTotal);
            buffer.WriteInt(32, WaypointFlags);
            Field5.Encode(buffer);
            buffer.WriteInt(32, Field6);
            LearnedLore.Encode(buffer);
            for (int i = 0; i < _ActiveSkills.Length; i++) _ActiveSkills[i].Encode(buffer);
            for (int i = 0; i < _snoTraits.Length; i++) buffer.WriteInt(32, _snoTraits[i]);
            SavePointData.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerSavedData {");
            pad += 4;
            for (int loop12 = 0; loop12 < _HotBarButtons.Length; loop12++)
            {
                _HotBarButtons[loop12].AsText(b, pad, "_HotBarButtons[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            HotBarButton.AsText(b, pad, "HotBarButton: ");
            b.Append(' ', pad); b.AppendLine("PlaytimeTotal:" + PlaytimeTotal.ToString());
            b.Append(' ', pad); b.AppendLine("WaypointFlags:" + WaypointFlags.ToString());
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            LearnedLore.AsText(b, pad, "LearnedLore: ");
            for (int loop12 = 0; loop12 < _ActiveSkills.Length; loop12++)
            {
                _ActiveSkills[loop12].AsText(b, pad, "_ActiveSkills[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _snoTraits.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_snoTraits[loop12]:" + _snoTraits[loop12].ToString());
            }
            SavePointData.AsText(b, pad, "SavePointData: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            HotBarButtons = new HotbarButtonData[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                HotbarButtonData temp12_HotBarButtons;
                temp12_HotBarButtons = new HotbarButtonData();
                temp12_HotBarButtons.FileRead(stream, stream.Position);
                _HotBarButtons[loop12] = temp12_HotBarButtons;
            }
            stream.Position = offset + 84;
            Field1 = (byte)stream.ReadByte();
            stream.Position = offset + 72;
            HotBarButton = new HotbarButtonData();
            HotBarButton.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            PlaytimeTotal = stream.ReadValueS32();
            stream.Position = offset + 92;
            WaypointFlags = stream.ReadValueS32();
            stream.Position = offset + 96;
            Field5 = new HirelingSavedData();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 248;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 252;
            LearnedLore = new LearnedLore();
            LearnedLore.FileRead(stream, stream.Position);
            stream.Position = offset + 2340;
            ActiveSkills = new ActiveSkillSavedData[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                ActiveSkillSavedData temp12_ActiveSkills;
                temp12_ActiveSkills = new ActiveSkillSavedData();
                temp12_ActiveSkills.FileRead(stream, stream.Position);
                _ActiveSkills[loop12] = temp12_ActiveSkills;
            }
            stream.Position = offset + 2388;
            snoTraits = new int[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                int temp12_snoTraits;
                temp12_snoTraits = stream.ReadValueS32();
                _snoTraits[loop12] = temp12_snoTraits;
            }
            stream.Position = offset + 2400;
            SavePointData = new SavePointData();
            SavePointData.FileRead(stream, stream.Position);
        }

    }

    public class NewPlayerMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _PlayerIndex;
        public int PlayerIndex { get { return _PlayerIndex; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        public EntityId ToonId;
        public EntityId GameAccountId;
        public string _ToonName;
        public string ToonName { get { return _ToonName; } set { if (value != null && value.Length > 49) throw new ArgumentOutOfRangeException(); _ToonName = value; } }
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < -1 || value > 22) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < -1 || value > 4) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public int snoActorPortrait;
        int _Field8;
        public int Field8 { get { return _Field8; } set { if (value < 0 || value > 127) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        public HeroStateData StateData;
        public bool Field10;
        public int Field11;
        public int ActorID;
        public override int StructSize() { return 17184; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PlayerIndex = buffer.ReadInt(3);
            ToonId = new EntityId();
            ToonId.Parse(buffer);
            GameAccountId = new EntityId();
            GameAccountId.Parse(buffer);
            ToonName = buffer.ReadCharArray(49);
            Field5 = buffer.ReadInt(5) + (-1);
            Field6 = buffer.ReadInt(3) + (-1);
            snoActorPortrait = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(7);
            StateData = new HeroStateData();
            StateData.Parse(buffer);
            Field10 = buffer.ReadBool();
            Field11 = buffer.ReadInt(32);
            ActorID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, PlayerIndex);
            ToonId.Encode(buffer);
            GameAccountId.Encode(buffer);
            buffer.WriteCharArray(49, ToonName);
            buffer.WriteInt(5, Field5 - (-1));
            buffer.WriteInt(3, Field6 - (-1));
            buffer.WriteInt(32, snoActorPortrait);
            buffer.WriteInt(7, Field8);
            StateData.Encode(buffer);
            buffer.WriteBool(Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, ActorID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NewPlayerMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            ToonId.AsText(b, pad, "ToonId: ");
            GameAccountId.AsText(b, pad, "GameAccountId: ");
            b.Append(' ', pad); b.AppendLine("ToonName:" + ToonName.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("snoActorPortrait:" + snoActorPortrait.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            StateData.AsText(b, pad, "StateData: ");
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _PlayerIndex = stream.ReadValueS32();
            stream.Position = offset + 16;
            ToonId = new EntityId();
            ToonId.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            GameAccountId = new EntityId();
            GameAccountId.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            ToonName = stream.ReadString(49);
            stream.Position = offset + 100;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 104;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 108;
            snoActorPortrait = stream.ReadValueS32();
            stream.Position = offset + 112;
            _Field8 = stream.ReadValueS32();
            stream.Position = offset + 116;
            StateData = new HeroStateData();
            StateData.FileRead(stream, stream.Position);
            stream.Position = offset + 17168;
            Field10 = stream.ReadValueS32() == 1;
            stream.Position = offset + 17172;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 17176;
            ActorID = stream.ReadValueS32();
        }

    }

    public class GameErrorData : GameMessage
    {
        int _Field0;
        public int Field0 { get { return _Field0; } set { if (value < 0 || value > 84) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(7);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(7, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameErrorData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class PhysMesh : GameMessage
    {
        public int Field0;
        public int CollisionMeshCount;
        public SerializeData serCollisionMeshes;
        List<CollisionMesh> _CollisionMeshes;
        public List<CollisionMesh> CollisionMeshes { get { return _CollisionMeshes; } set { _CollisionMeshes = value; } }
        public string _Field4;
        public string Field4 { get { return _Field4; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public string _Field5;
        public string Field5 { get { return _Field5; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int Field6;
        public override int StructSize() { return 560; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            CollisionMeshCount = buffer.ReadInt(32);
            serCollisionMeshes = new SerializeData();
            serCollisionMeshes.Parse(buffer);
            //still checking variablearrays
            this.CollisionMeshes = new List<CollisionMesh>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _CollisionMeshes.Count; loop12++)
            {
                _CollisionMeshes[loop12] = new CollisionMesh();
                _CollisionMeshes[loop12].Parse(buffer);
            }
            Field4 = buffer.ReadCharArray(256);
            Field5 = buffer.ReadCharArray(256);
            Field6 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, CollisionMeshCount);
            serCollisionMeshes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _CollisionMeshes.Count);
            for (int loop12 = 0; loop12 < _CollisionMeshes.Count; loop12++)
            {
                _CollisionMeshes[loop12].Encode(buffer);
            }
            buffer.WriteCharArray(256, Field4);
            buffer.WriteCharArray(256, Field5);
            buffer.WriteInt(32, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PhysMesh {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("CollisionMeshCount:" + CollisionMeshCount.ToString());
            serCollisionMeshes.AsText(b, pad, "serCollisionMeshes: ");
            for (int loop12 = 0; loop12 < _CollisionMeshes.Count; loop12++)
            {
                _CollisionMeshes[loop12].AsText(b, pad, "_CollisionMeshes[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            CollisionMeshCount = stream.ReadValueS32();
            stream.Position = offset + 20;
            serCollisionMeshes = new SerializeData();
            serCollisionMeshes.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking variablearrays
            CollisionMeshes = new List<CollisionMesh>();
            for (int i = 0; i < (int)(serCollisionMeshes.Field1 / 136); i++)
            {
                stream.Position = serCollisionMeshes.Field0 + 16 + (136 * i);
                CollisionMesh temp12_CollisionMeshes;
                temp12_CollisionMeshes = new CollisionMesh();
                temp12_CollisionMeshes.FileRead(stream, stream.Position);
                _CollisionMeshes.Add(temp12_CollisionMeshes);
            }
            stream.Position = offset + 44;
            Field4 = stream.ReadString(256);
            stream.Position = offset + 300;
            Field5 = stream.ReadString(256);
            stream.Position = offset + 40;
            Field6 = stream.ReadValueS32();
        }

    }

    public class CollisionMesh : GameMessage
    {
        public dmFloat3 Field0;
        public dmFloat3 Field1;
        public dmFloat3 Field2;
        public int DominoNodeCount;
        public SerializeData serDominoVertices;
        List<dmFloat3> _DominoVertices;
        public List<dmFloat3> DominoVertices { get { return _DominoVertices; } set { _DominoVertices = value; } }
        public int Field6;
        public SerializeData serDominoTriangles;
        List<dmMeshTriangle> _DominoTriangles;
        public List<dmMeshTriangle> DominoTriangles { get { return _DominoTriangles; } set { _DominoTriangles = value; } }
        public int Field9;
        public SerializeData serDominoEdges;
        List<dmMeshEdge> _DominoEdges;
        public List<dmMeshEdge> DominoEdges { get { return _DominoEdges; } set { _DominoEdges = value; } }
        public int Field12;
        public SerializeData serDominoNodes;
        List<dmMeshNode> _DominoNodes;
        public List<dmMeshNode> DominoNodes { get { return _DominoNodes; } set { _DominoNodes = value; } }
        public int Field15;
        public int Field16;
        public int Field17;
        public int Field18;
        public override int StructSize() { return 136; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new dmFloat3();
            Field0.Parse(buffer);
            Field1 = new dmFloat3();
            Field1.Parse(buffer);
            Field2 = new dmFloat3();
            Field2.Parse(buffer);
            DominoNodeCount = buffer.ReadInt(32);
            serDominoVertices = new SerializeData();
            serDominoVertices.Parse(buffer);
            //still checking variablearrays
            this.DominoVertices = new List<dmFloat3>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DominoVertices.Count; loop12++)
            {
                _DominoVertices[loop12] = new dmFloat3();
                _DominoVertices[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            serDominoTriangles = new SerializeData();
            serDominoTriangles.Parse(buffer);
            //still checking variablearrays
            this.DominoTriangles = new List<dmMeshTriangle>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DominoTriangles.Count; loop12++)
            {
                _DominoTriangles[loop12] = new dmMeshTriangle();
                _DominoTriangles[loop12].Parse(buffer);
            }
            Field9 = buffer.ReadInt(32);
            serDominoEdges = new SerializeData();
            serDominoEdges.Parse(buffer);
            //still checking variablearrays
            this.DominoEdges = new List<dmMeshEdge>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DominoEdges.Count; loop12++)
            {
                _DominoEdges[loop12] = new dmMeshEdge();
                _DominoEdges[loop12].Parse(buffer);
            }
            Field12 = buffer.ReadInt(32);
            serDominoNodes = new SerializeData();
            serDominoNodes.Parse(buffer);
            //still checking variablearrays
            this.DominoNodes = new List<dmMeshNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DominoNodes.Count; loop12++)
            {
                _DominoNodes[loop12] = new dmMeshNode();
                _DominoNodes[loop12].Parse(buffer);
            }
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
            buffer.WriteInt(32, DominoNodeCount);
            serDominoVertices.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DominoVertices.Count);
            for (int loop12 = 0; loop12 < _DominoVertices.Count; loop12++)
            {
                _DominoVertices[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field6);
            serDominoTriangles.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DominoTriangles.Count);
            for (int loop12 = 0; loop12 < _DominoTriangles.Count; loop12++)
            {
                _DominoTriangles[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field9);
            serDominoEdges.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DominoEdges.Count);
            for (int loop12 = 0; loop12 < _DominoEdges.Count; loop12++)
            {
                _DominoEdges[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field12);
            serDominoNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DominoNodes.Count);
            for (int loop12 = 0; loop12 < _DominoNodes.Count; loop12++)
            {
                _DominoNodes[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CollisionMesh {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("DominoNodeCount:" + DominoNodeCount.ToString());
            serDominoVertices.AsText(b, pad, "serDominoVertices: ");
            for (int loop12 = 0; loop12 < _DominoVertices.Count; loop12++)
            {
                _DominoVertices[loop12].AsText(b, pad, "_DominoVertices[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serDominoTriangles.AsText(b, pad, "serDominoTriangles: ");
            for (int loop12 = 0; loop12 < _DominoTriangles.Count; loop12++)
            {
                _DominoTriangles[loop12].AsText(b, pad, "_DominoTriangles[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            serDominoEdges.AsText(b, pad, "serDominoEdges: ");
            for (int loop12 = 0; loop12 < _DominoEdges.Count; loop12++)
            {
                _DominoEdges[loop12].AsText(b, pad, "_DominoEdges[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            serDominoNodes.AsText(b, pad, "serDominoNodes: ");
            for (int loop12 = 0; loop12 < _DominoNodes.Count; loop12++)
            {
                _DominoNodes[loop12].AsText(b, pad, "_DominoNodes[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new dmFloat3();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new dmFloat3();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = new dmFloat3();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 76;
            DominoNodeCount = stream.ReadValueS32();
            stream.Position = offset + 96;
            serDominoVertices = new SerializeData();
            serDominoVertices.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            //still checking variablearrays
            DominoVertices = new List<dmFloat3>();
            for (int i = 0; i < (int)(serDominoVertices.Field1 / 12); i++)
            {
                stream.Position = serDominoVertices.Field0 + 16 + (12 * i);
                dmFloat3 temp12_DominoVertices;
                temp12_DominoVertices = new dmFloat3();
                temp12_DominoVertices.FileRead(stream, stream.Position);
                _DominoVertices.Add(temp12_DominoVertices);
            }
            stream.Position = offset + 80;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 104;
            serDominoTriangles = new SerializeData();
            serDominoTriangles.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            //still checking variablearrays
            DominoTriangles = new List<dmMeshTriangle>();
            for (int i = 0; i < (int)(serDominoTriangles.Field1 / 28); i++)
            {
                stream.Position = serDominoTriangles.Field0 + 16 + (28 * i);
                dmMeshTriangle temp12_DominoTriangles;
                temp12_DominoTriangles = new dmMeshTriangle();
                temp12_DominoTriangles.FileRead(stream, stream.Position);
                _DominoTriangles.Add(temp12_DominoTriangles);
            }
            stream.Position = offset + 84;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 120;
            serDominoEdges = new SerializeData();
            serDominoEdges.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            //still checking variablearrays
            DominoEdges = new List<dmMeshEdge>();
            for (int i = 0; i < (int)(serDominoEdges.Field1 / 20); i++)
            {
                stream.Position = serDominoEdges.Field0 + 16 + (20 * i);
                dmMeshEdge temp12_DominoEdges;
                temp12_DominoEdges = new dmMeshEdge();
                temp12_DominoEdges.FileRead(stream, stream.Position);
                _DominoEdges.Add(temp12_DominoEdges);
            }
            stream.Position = offset + 72;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 112;
            serDominoNodes = new SerializeData();
            serDominoNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            //still checking variablearrays
            DominoNodes = new List<dmMeshNode>();
            for (int i = 0; i < (int)(serDominoNodes.Field1 / 12); i++)
            {
                stream.Position = serDominoNodes.Field0 + 16 + (12 * i);
                dmMeshNode temp12_DominoNodes;
                temp12_DominoNodes = new dmMeshNode();
                temp12_DominoNodes.FileRead(stream, stream.Position);
                _DominoNodes.Add(temp12_DominoNodes);
            }
            stream.Position = offset + 88;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 92;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 128;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 132;
            Field18 = stream.ReadValueS32();
        }

    }

    public class Globals : GameMessage
    {
        public SerializeData serServerData;
        List<GlobalServerData> _ServerData;
        public List<GlobalServerData> ServerData { get { return _ServerData; } set { _ServerData = value; } }
        public int Field2;
        public SerializeData serStartLocationNames;
        List<StartLocationName> _StartLocationNames;
        public List<StartLocationName> StartLocationNames { get { return _StartLocationNames; } set { _StartLocationNames = value; } }
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        RGBAColor[] _Colors;
        public RGBAColor[] Colors { get { return _Colors; } set { if (value != null && value.Length != 400) throw new ArgumentOutOfRangeException(); _Colors = value; } }
        public int Field10;
        public int Field11;
        public float Field12;
        public int Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public int Field19;
        int[] _Field20;
        public int[] Field20 { get { return _Field20; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field20 = value; } }
        public BannerParams BannerParams;
        public int Field22;
        public int Field23;
        public int Field24;
        public int Field25;
        public float Field26;
        public float Field27;
        public float Field28;
        public float Field29;
        public float Field30;
        public float Field31;
        public float Field32;
        public float Field33;
        public override int StructSize() { return 2008; }

        public override void Parse(GameBitBuffer buffer)
        {
            serServerData = new SerializeData();
            serServerData.Parse(buffer);
            //still checking variablearrays
            this.ServerData = new List<GlobalServerData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12] = new GlobalServerData();
                _ServerData[loop12].Parse(buffer);
            }
            Field2 = buffer.ReadInt(32);
            serStartLocationNames = new SerializeData();
            serStartLocationNames.Parse(buffer);
            //still checking variablearrays
            this.StartLocationNames = new List<StartLocationName>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StartLocationNames.Count; loop12++)
            {
                _StartLocationNames[loop12] = new StartLocationName();
                _StartLocationNames[loop12].Parse(buffer);
            }
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Colors = new RGBAColor[400];
            for (int i = 0; i < _Colors.Length; i++)
            {
                _Colors[i] = new RGBAColor();
                _Colors[i].Parse(buffer);
            }
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadInt(32);
            Field20 = new int[4];
            for (int i = 0; i < _Field20.Length; i++) _Field20[i] = buffer.ReadInt(32);
            BannerParams = new BannerParams();
            BannerParams.Parse(buffer);
            Field22 = buffer.ReadInt(32);
            Field23 = buffer.ReadInt(32);
            Field24 = buffer.ReadInt(32);
            Field25 = buffer.ReadInt(32);
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = buffer.ReadFloat32();
            Field31 = buffer.ReadFloat32();
            Field32 = buffer.ReadFloat32();
            Field33 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serServerData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ServerData.Count);
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field2);
            serStartLocationNames.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StartLocationNames.Count);
            for (int loop12 = 0; loop12 < _StartLocationNames.Count; loop12++)
            {
                _StartLocationNames[loop12].Encode(buffer);
            }
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            for (int i = 0; i < _Colors.Length; i++) _Colors[i].Encode(buffer);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteInt(32, Field19);
            for (int i = 0; i < _Field20.Length; i++) buffer.WriteInt(32, _Field20[i]);
            BannerParams.Encode(buffer);
            buffer.WriteInt(32, Field22);
            buffer.WriteInt(32, Field23);
            buffer.WriteInt(32, Field24);
            buffer.WriteInt(32, Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            buffer.WriteFloat32(Field30);
            buffer.WriteFloat32(Field31);
            buffer.WriteFloat32(Field32);
            buffer.WriteFloat32(Field33);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Globals {");
            pad += 4;
            serServerData.AsText(b, pad, "serServerData: ");
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12].AsText(b, pad, "_ServerData[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            serStartLocationNames.AsText(b, pad, "serStartLocationNames: ");
            for (int loop12 = 0; loop12 < _StartLocationNames.Count; loop12++)
            {
                _StartLocationNames[loop12].AsText(b, pad, "_StartLocationNames[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            for (int loop12 = 0; loop12 < _Colors.Length; loop12++)
            {
                _Colors[loop12].AsText(b, pad, "_Colors[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            for (int loop12 = 0; loop12 < _Field20.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field20[loop12]:" + _Field20[loop12].ToString());
            }
            BannerParams.AsText(b, pad, "BannerParams: ");
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 24;
            serServerData = new SerializeData();
            serServerData.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            ServerData = new List<GlobalServerData>();
            for (int i = 0; i < (int)(serServerData.Field1 / 320); i++)
            {
                stream.Position = serServerData.Field0 + 16 + (320 * i);
                GlobalServerData temp12_ServerData;
                temp12_ServerData = new GlobalServerData();
                temp12_ServerData.FileRead(stream, stream.Position);
                _ServerData.Add(temp12_ServerData);
            }
            stream.Position = offset + 32;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 48;
            serStartLocationNames = new SerializeData();
            serStartLocationNames.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            //still checking variablearrays
            StartLocationNames = new List<StartLocationName>();
            for (int i = 0; i < (int)(serStartLocationNames.Field1 / 68); i++)
            {
                stream.Position = serStartLocationNames.Field0 + 16 + (68 * i);
                StartLocationName temp12_StartLocationNames;
                temp12_StartLocationNames = new StartLocationName();
                temp12_StartLocationNames.FileRead(stream, stream.Position);
                _StartLocationNames.Add(temp12_StartLocationNames);
            }
            stream.Position = offset + 56;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 64;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 68;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Colors = new RGBAColor[400];
            for (int loop12 = 0; loop12 < 400; loop12++)
            {
                RGBAColor temp12_Colors;
                temp12_Colors = new RGBAColor();
                temp12_Colors.FileRead(stream, stream.Position);
                _Colors[loop12] = temp12_Colors;
            }
            stream.Position = offset + 1672;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 1676;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 1680;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 1684;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 1688;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 1692;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 1696;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 1700;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 1704;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 1708;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 1712;
            Field20 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field20;
                temp12_Field20 = stream.ReadValueS32();
                _Field20[loop12] = temp12_Field20;
            }
            stream.Position = offset + 1728;
            BannerParams = new BannerParams();
            BannerParams.FileRead(stream, stream.Position);
            stream.Position = offset + 1960;
            Field22 = stream.ReadValueS32();
            stream.Position = offset + 1964;
            Field23 = stream.ReadValueS32();
            stream.Position = offset + 1968;
            Field24 = stream.ReadValueS32();
            stream.Position = offset + 1972;
            Field25 = stream.ReadValueS32();
            stream.Position = offset + 1976;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 1980;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 1984;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 1988;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 1992;
            Field30 = stream.ReadValueF32();
            stream.Position = offset + 1996;
            Field31 = stream.ReadValueF32();
            stream.Position = offset + 2000;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 2004;
            Field33 = stream.ReadValueF32();
        }

    }

    public class GlobalServerData : GameMessage
    {
        public SerializeData serActorGroups;
        List<ActorGroup> _ActorGroups;
        public List<ActorGroup> ActorGroups { get { return _ActorGroups; } set { _ActorGroups = value; } }
        public SerializeData serScriptGlobalVars;
        List<GlobalScriptVariable> _ScriptGlobalVars;
        public List<GlobalScriptVariable> ScriptGlobalVars { get { return _ScriptGlobalVars; } set { _ScriptGlobalVars = value; } }
        DifficultyTuningParams[] _TuningParams;
        public DifficultyTuningParams[] TuningParams { get { return _TuningParams; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _TuningParams = value; } }
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public int Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public int Field18;
        public float Field19;
        public int Field20;
        public int Field21;
        public int Field22;
        public float Field23;
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public float Field28;
        public float Field29;
        public float Field30;
        public float Field31;
        public float Field32;
        float[] _Field33;
        public float[] Field33 { get { return _Field33; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field33 = value; } }
        public override int StructSize() { return 320; }

        public override void Parse(GameBitBuffer buffer)
        {
            serActorGroups = new SerializeData();
            serActorGroups.Parse(buffer);
            //still checking variablearrays
            this.ActorGroups = new List<ActorGroup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActorGroups.Count; loop12++)
            {
                _ActorGroups[loop12] = new ActorGroup();
                _ActorGroups[loop12].Parse(buffer);
            }
            serScriptGlobalVars = new SerializeData();
            serScriptGlobalVars.Parse(buffer);
            //still checking variablearrays
            this.ScriptGlobalVars = new List<GlobalScriptVariable>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ScriptGlobalVars.Count; loop12++)
            {
                _ScriptGlobalVars[loop12] = new GlobalScriptVariable();
                _ScriptGlobalVars[loop12].Parse(buffer);
            }
            TuningParams = new DifficultyTuningParams[4];
            for (int i = 0; i < _TuningParams.Length; i++)
            {
                _TuningParams[i] = new DifficultyTuningParams();
                _TuningParams[i].Parse(buffer);
            }
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadInt(32);
            Field22 = buffer.ReadInt(32);
            Field23 = buffer.ReadFloat32();
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = buffer.ReadFloat32();
            Field31 = buffer.ReadFloat32();
            Field32 = buffer.ReadFloat32();
            //still checking fixedarrays on basictypes
            Field33 = new float[4];
            for (int loop12 = 0; loop12 < _Field33.Length; loop12++)
            {
                _Field33[loop12] = buffer.ReadFloat32();
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serActorGroups.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActorGroups.Count);
            for (int loop12 = 0; loop12 < _ActorGroups.Count; loop12++)
            {
                _ActorGroups[loop12].Encode(buffer);
            }
            serScriptGlobalVars.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ScriptGlobalVars.Count);
            for (int loop12 = 0; loop12 < _ScriptGlobalVars.Count; loop12++)
            {
                _ScriptGlobalVars[loop12].Encode(buffer);
            }
            for (int i = 0; i < _TuningParams.Length; i++) _TuningParams[i].Encode(buffer);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(32, Field22);
            buffer.WriteFloat32(Field23);
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            buffer.WriteFloat32(Field30);
            buffer.WriteFloat32(Field31);
            buffer.WriteFloat32(Field32);
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field33.Length; loop12++)
            {
                buffer.WriteFloat32(_Field33[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GlobalServerData {");
            pad += 4;
            serActorGroups.AsText(b, pad, "serActorGroups: ");
            for (int loop12 = 0; loop12 < _ActorGroups.Count; loop12++)
            {
                _ActorGroups[loop12].AsText(b, pad, "_ActorGroups[loop12]: ");
            }
            serScriptGlobalVars.AsText(b, pad, "serScriptGlobalVars: ");
            for (int loop12 = 0; loop12 < _ScriptGlobalVars.Count; loop12++)
            {
                _ScriptGlobalVars[loop12].AsText(b, pad, "_ScriptGlobalVars[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _TuningParams.Length; loop12++)
            {
                _TuningParams[loop12].AsText(b, pad, "_TuningParams[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            for (int loop12 = 0; loop12 < _Field33.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field33[loop12]:" + _Field33[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 8;
            serActorGroups = new SerializeData();
            serActorGroups.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            //still checking variablearrays
            ActorGroups = new List<ActorGroup>();
            for (int i = 0; i < (int)(serActorGroups.Field1 / 68); i++)
            {
                stream.Position = serActorGroups.Field0 + 16 + (68 * i);
                ActorGroup temp12_ActorGroups;
                temp12_ActorGroups = new ActorGroup();
                temp12_ActorGroups.FileRead(stream, stream.Position);
                _ActorGroups.Add(temp12_ActorGroups);
            }
            stream.Position = offset + 24;
            serScriptGlobalVars = new SerializeData();
            serScriptGlobalVars.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            ScriptGlobalVars = new List<GlobalScriptVariable>();
            for (int i = 0; i < (int)(serScriptGlobalVars.Field1 / 40); i++)
            {
                stream.Position = serScriptGlobalVars.Field0 + 16 + (40 * i);
                GlobalScriptVariable temp12_ScriptGlobalVars;
                temp12_ScriptGlobalVars = new GlobalScriptVariable();
                temp12_ScriptGlobalVars.FileRead(stream, stream.Position);
                _ScriptGlobalVars.Add(temp12_ScriptGlobalVars);
            }
            stream.Position = offset + 32;
            TuningParams = new DifficultyTuningParams[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                DifficultyTuningParams temp12_TuningParams;
                temp12_TuningParams = new DifficultyTuningParams();
                temp12_TuningParams.FileRead(stream, stream.Position);
                _TuningParams[loop12] = temp12_TuningParams;
            }
            stream.Position = offset + 192;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 196;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 200;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 204;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 208;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 212;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 216;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 220;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 224;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 228;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 232;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 236;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 240;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 244;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 248;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 252;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 256;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 260;
            Field22 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field23 = stream.ReadValueF32();
            stream.Position = offset + 268;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 272;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 276;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 280;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 284;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 288;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 292;
            Field30 = stream.ReadValueF32();
            stream.Position = offset + 296;
            Field31 = stream.ReadValueF32();
            stream.Position = offset + 300;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 304;
            Field33 = new float[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                float temp12_Field33;
                temp12_Field33 = stream.ReadValueF32();
                _Field33[loop12] = temp12_Field33;
            }
        }

    }

    public class DifficultyTuningParams : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DifficultyTuningParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueF32();
        }

    }

    public class BannerParams : GameMessage
    {
        public SerializeData serTexBackgrounds;
        List<BannerTexturePair> _TexBackgrounds;
        public List<BannerTexturePair> TexBackgrounds { get { return _TexBackgrounds; } set { _TexBackgrounds = value; } }
        public int Field2;
        public SerializeData serTexPatterns;
        List<BannerTexturePair> _TexPatterns;
        public List<BannerTexturePair> TexPatterns { get { return _TexPatterns; } set { _TexPatterns = value; } }
        public int Field5;
        public SerializeData serTexMainSigils;
        List<BannerTexturePair> _TexMainSigils;
        public List<BannerTexturePair> TexMainSigils { get { return _TexMainSigils; } set { _TexMainSigils = value; } }
        public SerializeData serTexVariantSigils;
        List<BannerTexturePair> _TexVariantSigils;
        public List<BannerTexturePair> TexVariantSigils { get { return _TexVariantSigils; } set { _TexVariantSigils = value; } }
        public int Field10;
        public SerializeData serTexSigilAccents;
        List<BannerTexturePair> _TexSigilAccents;
        public List<BannerTexturePair> TexSigilAccents { get { return _TexSigilAccents; } set { _TexSigilAccents = value; } }
        public int Field13;
        public SerializeData serColorSets;
        List<BannerColorSet> _ColorSets;
        public List<BannerColorSet> ColorSets { get { return _ColorSets; } set { _ColorSets = value; } }
        public SerializeData serSigilPlacements;
        List<BannerSigilPlacement> _SigilPlacements;
        public List<BannerSigilPlacement> SigilPlacements { get { return _SigilPlacements; } set { _SigilPlacements = value; } }
        public SerializeData serActorBases;
        List<int> _ActorBases;
        public List<int> ActorBases { get { return _ActorBases; } set { _ActorBases = value; } }
        public SerializeData serActorCaps;
        List<int> _ActorCaps;
        public List<int> ActorCaps { get { return _ActorCaps; } set { _ActorCaps = value; } }
        public SerializeData serActorPoles;
        List<int> _ActorPoles;
        public List<int> ActorPoles { get { return _ActorPoles; } set { _ActorPoles = value; } }
        public SerializeData serActorRibbons;
        List<int> _ActorRibbons;
        public List<int> ActorRibbons { get { return _ActorRibbons; } set { _ActorRibbons = value; } }
        public SerializeData serEpicBannerDescriptions;
        List<EpicBannerDescription> _EpicBannerDescriptions;
        public List<EpicBannerDescription> EpicBannerDescriptions { get { return _EpicBannerDescriptions; } set { _EpicBannerDescriptions = value; } }
        public override int StructSize() { return 232; }

        public override void Parse(GameBitBuffer buffer)
        {
            serTexBackgrounds = new SerializeData();
            serTexBackgrounds.Parse(buffer);
            //still checking variablearrays
            this.TexBackgrounds = new List<BannerTexturePair>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TexBackgrounds.Count; loop12++)
            {
                _TexBackgrounds[loop12] = new BannerTexturePair();
                _TexBackgrounds[loop12].Parse(buffer);
            }
            Field2 = buffer.ReadInt(32);
            serTexPatterns = new SerializeData();
            serTexPatterns.Parse(buffer);
            //still checking variablearrays
            this.TexPatterns = new List<BannerTexturePair>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TexPatterns.Count; loop12++)
            {
                _TexPatterns[loop12] = new BannerTexturePair();
                _TexPatterns[loop12].Parse(buffer);
            }
            Field5 = buffer.ReadInt(32);
            serTexMainSigils = new SerializeData();
            serTexMainSigils.Parse(buffer);
            //still checking variablearrays
            this.TexMainSigils = new List<BannerTexturePair>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TexMainSigils.Count; loop12++)
            {
                _TexMainSigils[loop12] = new BannerTexturePair();
                _TexMainSigils[loop12].Parse(buffer);
            }
            serTexVariantSigils = new SerializeData();
            serTexVariantSigils.Parse(buffer);
            //still checking variablearrays
            this.TexVariantSigils = new List<BannerTexturePair>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TexVariantSigils.Count; loop12++)
            {
                _TexVariantSigils[loop12] = new BannerTexturePair();
                _TexVariantSigils[loop12].Parse(buffer);
            }
            Field10 = buffer.ReadInt(32);
            serTexSigilAccents = new SerializeData();
            serTexSigilAccents.Parse(buffer);
            //still checking variablearrays
            this.TexSigilAccents = new List<BannerTexturePair>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TexSigilAccents.Count; loop12++)
            {
                _TexSigilAccents[loop12] = new BannerTexturePair();
                _TexSigilAccents[loop12].Parse(buffer);
            }
            Field13 = buffer.ReadInt(32);
            serColorSets = new SerializeData();
            serColorSets.Parse(buffer);
            //still checking variablearrays
            this.ColorSets = new List<BannerColorSet>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ColorSets.Count; loop12++)
            {
                _ColorSets[loop12] = new BannerColorSet();
                _ColorSets[loop12].Parse(buffer);
            }
            serSigilPlacements = new SerializeData();
            serSigilPlacements.Parse(buffer);
            //still checking variablearrays
            this.SigilPlacements = new List<BannerSigilPlacement>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SigilPlacements.Count; loop12++)
            {
                _SigilPlacements[loop12] = new BannerSigilPlacement();
                _SigilPlacements[loop12].Parse(buffer);
            }
            serActorBases = new SerializeData();
            serActorBases.Parse(buffer);
            //still checking variablearrays
            this.ActorBases = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActorBases.Count; loop12++)
            {
                _ActorBases[loop12] = buffer.ReadInt(0);
            }
            serActorCaps = new SerializeData();
            serActorCaps.Parse(buffer);
            //still checking variablearrays
            this.ActorCaps = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActorCaps.Count; loop12++)
            {
                _ActorCaps[loop12] = buffer.ReadInt(0);
            }
            serActorPoles = new SerializeData();
            serActorPoles.Parse(buffer);
            //still checking variablearrays
            this.ActorPoles = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActorPoles.Count; loop12++)
            {
                _ActorPoles[loop12] = buffer.ReadInt(0);
            }
            serActorRibbons = new SerializeData();
            serActorRibbons.Parse(buffer);
            //still checking variablearrays
            this.ActorRibbons = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActorRibbons.Count; loop12++)
            {
                _ActorRibbons[loop12] = buffer.ReadInt(0);
            }
            serEpicBannerDescriptions = new SerializeData();
            serEpicBannerDescriptions.Parse(buffer);
            //still checking variablearrays
            this.EpicBannerDescriptions = new List<EpicBannerDescription>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _EpicBannerDescriptions.Count; loop12++)
            {
                _EpicBannerDescriptions[loop12] = new EpicBannerDescription();
                _EpicBannerDescriptions[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serTexBackgrounds.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TexBackgrounds.Count);
            for (int loop12 = 0; loop12 < _TexBackgrounds.Count; loop12++)
            {
                _TexBackgrounds[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field2);
            serTexPatterns.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TexPatterns.Count);
            for (int loop12 = 0; loop12 < _TexPatterns.Count; loop12++)
            {
                _TexPatterns[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field5);
            serTexMainSigils.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TexMainSigils.Count);
            for (int loop12 = 0; loop12 < _TexMainSigils.Count; loop12++)
            {
                _TexMainSigils[loop12].Encode(buffer);
            }
            serTexVariantSigils.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TexVariantSigils.Count);
            for (int loop12 = 0; loop12 < _TexVariantSigils.Count; loop12++)
            {
                _TexVariantSigils[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field10);
            serTexSigilAccents.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TexSigilAccents.Count);
            for (int loop12 = 0; loop12 < _TexSigilAccents.Count; loop12++)
            {
                _TexSigilAccents[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field13);
            serColorSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ColorSets.Count);
            for (int loop12 = 0; loop12 < _ColorSets.Count; loop12++)
            {
                _ColorSets[loop12].Encode(buffer);
            }
            serSigilPlacements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SigilPlacements.Count);
            for (int loop12 = 0; loop12 < _SigilPlacements.Count; loop12++)
            {
                _SigilPlacements[loop12].Encode(buffer);
            }
            serActorBases.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActorBases.Count);
            for (int loop12 = 0; loop12 < _ActorBases.Count; loop12++)
            {
                buffer.WriteInt(0, _ActorBases[loop12]);
            }
            serActorCaps.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActorCaps.Count);
            for (int loop12 = 0; loop12 < _ActorCaps.Count; loop12++)
            {
                buffer.WriteInt(0, _ActorCaps[loop12]);
            }
            serActorPoles.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActorPoles.Count);
            for (int loop12 = 0; loop12 < _ActorPoles.Count; loop12++)
            {
                buffer.WriteInt(0, _ActorPoles[loop12]);
            }
            serActorRibbons.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActorRibbons.Count);
            for (int loop12 = 0; loop12 < _ActorRibbons.Count; loop12++)
            {
                buffer.WriteInt(0, _ActorRibbons[loop12]);
            }
            serEpicBannerDescriptions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _EpicBannerDescriptions.Count);
            for (int loop12 = 0; loop12 < _EpicBannerDescriptions.Count; loop12++)
            {
                _EpicBannerDescriptions[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BannerParams {");
            pad += 4;
            serTexBackgrounds.AsText(b, pad, "serTexBackgrounds: ");
            for (int loop12 = 0; loop12 < _TexBackgrounds.Count; loop12++)
            {
                _TexBackgrounds[loop12].AsText(b, pad, "_TexBackgrounds[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            serTexPatterns.AsText(b, pad, "serTexPatterns: ");
            for (int loop12 = 0; loop12 < _TexPatterns.Count; loop12++)
            {
                _TexPatterns[loop12].AsText(b, pad, "_TexPatterns[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            serTexMainSigils.AsText(b, pad, "serTexMainSigils: ");
            for (int loop12 = 0; loop12 < _TexMainSigils.Count; loop12++)
            {
                _TexMainSigils[loop12].AsText(b, pad, "_TexMainSigils[loop12]: ");
            }
            serTexVariantSigils.AsText(b, pad, "serTexVariantSigils: ");
            for (int loop12 = 0; loop12 < _TexVariantSigils.Count; loop12++)
            {
                _TexVariantSigils[loop12].AsText(b, pad, "_TexVariantSigils[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            serTexSigilAccents.AsText(b, pad, "serTexSigilAccents: ");
            for (int loop12 = 0; loop12 < _TexSigilAccents.Count; loop12++)
            {
                _TexSigilAccents[loop12].AsText(b, pad, "_TexSigilAccents[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            serColorSets.AsText(b, pad, "serColorSets: ");
            for (int loop12 = 0; loop12 < _ColorSets.Count; loop12++)
            {
                _ColorSets[loop12].AsText(b, pad, "_ColorSets[loop12]: ");
            }
            serSigilPlacements.AsText(b, pad, "serSigilPlacements: ");
            for (int loop12 = 0; loop12 < _SigilPlacements.Count; loop12++)
            {
                _SigilPlacements[loop12].AsText(b, pad, "_SigilPlacements[loop12]: ");
            }
            serActorBases.AsText(b, pad, "serActorBases: ");
            for (int loop12 = 0; loop12 < _ActorBases.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ActorBases[loop12]:" + _ActorBases[loop12].ToString());
            }
            serActorCaps.AsText(b, pad, "serActorCaps: ");
            for (int loop12 = 0; loop12 < _ActorCaps.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ActorCaps[loop12]:" + _ActorCaps[loop12].ToString());
            }
            serActorPoles.AsText(b, pad, "serActorPoles: ");
            for (int loop12 = 0; loop12 < _ActorPoles.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ActorPoles[loop12]:" + _ActorPoles[loop12].ToString());
            }
            serActorRibbons.AsText(b, pad, "serActorRibbons: ");
            for (int loop12 = 0; loop12 < _ActorRibbons.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ActorRibbons[loop12]:" + _ActorRibbons[loop12].ToString());
            }
            serEpicBannerDescriptions.AsText(b, pad, "serEpicBannerDescriptions: ");
            for (int loop12 = 0; loop12 < _EpicBannerDescriptions.Count; loop12++)
            {
                _EpicBannerDescriptions[loop12].AsText(b, pad, "_EpicBannerDescriptions[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 8;
            serTexBackgrounds = new SerializeData();
            serTexBackgrounds.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            //still checking variablearrays
            TexBackgrounds = new List<BannerTexturePair>();
            for (int i = 0; i < (int)(serTexBackgrounds.Field1 / 12); i++)
            {
                stream.Position = serTexBackgrounds.Field0 + 16 + (12 * i);
                BannerTexturePair temp12_TexBackgrounds;
                temp12_TexBackgrounds = new BannerTexturePair();
                temp12_TexBackgrounds.FileRead(stream, stream.Position);
                _TexBackgrounds.Add(temp12_TexBackgrounds);
            }
            stream.Position = offset + 16;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 32;
            serTexPatterns = new SerializeData();
            serTexPatterns.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            TexPatterns = new List<BannerTexturePair>();
            for (int i = 0; i < (int)(serTexPatterns.Field1 / 12); i++)
            {
                stream.Position = serTexPatterns.Field0 + 16 + (12 * i);
                BannerTexturePair temp12_TexPatterns;
                temp12_TexPatterns = new BannerTexturePair();
                temp12_TexPatterns.FileRead(stream, stream.Position);
                _TexPatterns.Add(temp12_TexPatterns);
            }
            stream.Position = offset + 40;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 56;
            serTexMainSigils = new SerializeData();
            serTexMainSigils.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            //still checking variablearrays
            TexMainSigils = new List<BannerTexturePair>();
            for (int i = 0; i < (int)(serTexMainSigils.Field1 / 12); i++)
            {
                stream.Position = serTexMainSigils.Field0 + 16 + (12 * i);
                BannerTexturePair temp12_TexMainSigils;
                temp12_TexMainSigils = new BannerTexturePair();
                temp12_TexMainSigils.FileRead(stream, stream.Position);
                _TexMainSigils.Add(temp12_TexMainSigils);
            }
            stream.Position = offset + 72;
            serTexVariantSigils = new SerializeData();
            serTexVariantSigils.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            //still checking variablearrays
            TexVariantSigils = new List<BannerTexturePair>();
            for (int i = 0; i < (int)(serTexVariantSigils.Field1 / 12); i++)
            {
                stream.Position = serTexVariantSigils.Field0 + 16 + (12 * i);
                BannerTexturePair temp12_TexVariantSigils;
                temp12_TexVariantSigils = new BannerTexturePair();
                temp12_TexVariantSigils.FileRead(stream, stream.Position);
                _TexVariantSigils.Add(temp12_TexVariantSigils);
            }
            stream.Position = offset + 80;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 96;
            serTexSigilAccents = new SerializeData();
            serTexSigilAccents.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            //still checking variablearrays
            TexSigilAccents = new List<BannerTexturePair>();
            for (int i = 0; i < (int)(serTexSigilAccents.Field1 / 12); i++)
            {
                stream.Position = serTexSigilAccents.Field0 + 16 + (12 * i);
                BannerTexturePair temp12_TexSigilAccents;
                temp12_TexSigilAccents = new BannerTexturePair();
                temp12_TexSigilAccents.FileRead(stream, stream.Position);
                _TexSigilAccents.Add(temp12_TexSigilAccents);
            }
            stream.Position = offset + 104;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 120;
            serColorSets = new SerializeData();
            serColorSets.FileRead(stream, stream.Position);
            stream.Position = offset + 112;
            //still checking variablearrays
            ColorSets = new List<BannerColorSet>();
            for (int i = 0; i < (int)(serColorSets.Field1 / 84); i++)
            {
                stream.Position = serColorSets.Field0 + 16 + (84 * i);
                BannerColorSet temp12_ColorSets;
                temp12_ColorSets = new BannerColorSet();
                temp12_ColorSets.FileRead(stream, stream.Position);
                _ColorSets.Add(temp12_ColorSets);
            }
            stream.Position = offset + 136;
            serSigilPlacements = new SerializeData();
            serSigilPlacements.FileRead(stream, stream.Position);
            stream.Position = offset + 128;
            //still checking variablearrays
            SigilPlacements = new List<BannerSigilPlacement>();
            for (int i = 0; i < (int)(serSigilPlacements.Field1 / 68); i++)
            {
                stream.Position = serSigilPlacements.Field0 + 16 + (68 * i);
                BannerSigilPlacement temp12_SigilPlacements;
                temp12_SigilPlacements = new BannerSigilPlacement();
                temp12_SigilPlacements.FileRead(stream, stream.Position);
                _SigilPlacements.Add(temp12_SigilPlacements);
            }
            stream.Position = offset + 152;
            serActorBases = new SerializeData();
            serActorBases.FileRead(stream, stream.Position);
            stream.Position = offset + 144;
            //still checking variablearrays
            ActorBases = new List<int>();
            for (int i = 0; i < (int)(serActorBases.Field1 / 4); i++)
            {
                stream.Position = serActorBases.Field0 + 16 + (4 * i);
                int temp12_ActorBases;
                temp12_ActorBases = stream.ReadValueS32();
                _ActorBases.Add(temp12_ActorBases);
            }
            stream.Position = offset + 168;
            serActorCaps = new SerializeData();
            serActorCaps.FileRead(stream, stream.Position);
            stream.Position = offset + 160;
            //still checking variablearrays
            ActorCaps = new List<int>();
            for (int i = 0; i < (int)(serActorCaps.Field1 / 4); i++)
            {
                stream.Position = serActorCaps.Field0 + 16 + (4 * i);
                int temp12_ActorCaps;
                temp12_ActorCaps = stream.ReadValueS32();
                _ActorCaps.Add(temp12_ActorCaps);
            }
            stream.Position = offset + 184;
            serActorPoles = new SerializeData();
            serActorPoles.FileRead(stream, stream.Position);
            stream.Position = offset + 176;
            //still checking variablearrays
            ActorPoles = new List<int>();
            for (int i = 0; i < (int)(serActorPoles.Field1 / 4); i++)
            {
                stream.Position = serActorPoles.Field0 + 16 + (4 * i);
                int temp12_ActorPoles;
                temp12_ActorPoles = stream.ReadValueS32();
                _ActorPoles.Add(temp12_ActorPoles);
            }
            stream.Position = offset + 200;
            serActorRibbons = new SerializeData();
            serActorRibbons.FileRead(stream, stream.Position);
            stream.Position = offset + 192;
            //still checking variablearrays
            ActorRibbons = new List<int>();
            for (int i = 0; i < (int)(serActorRibbons.Field1 / 4); i++)
            {
                stream.Position = serActorRibbons.Field0 + 16 + (4 * i);
                int temp12_ActorRibbons;
                temp12_ActorRibbons = stream.ReadValueS32();
                _ActorRibbons.Add(temp12_ActorRibbons);
            }
            stream.Position = offset + 216;
            serEpicBannerDescriptions = new SerializeData();
            serEpicBannerDescriptions.FileRead(stream, stream.Position);
            stream.Position = offset + 208;
            //still checking variablearrays
            EpicBannerDescriptions = new List<EpicBannerDescription>();
            for (int i = 0; i < (int)(serEpicBannerDescriptions.Field1 / 148); i++)
            {
                stream.Position = serEpicBannerDescriptions.Field0 + 16 + (148 * i);
                EpicBannerDescription temp12_EpicBannerDescriptions;
                temp12_EpicBannerDescriptions = new EpicBannerDescription();
                temp12_EpicBannerDescriptions.FileRead(stream, stream.Position);
                _EpicBannerDescriptions.Add(temp12_EpicBannerDescriptions);
            }
        }

    }

    public class Scene : GameMessage
    {
        public int Field0;
        public int SNOAppearance;
        public int SNOPhysMesh;
        public AABB AABBBounds;
        public AABB AABBMarkerSetBounds;
        public NavMeshDef Field5;
        public SerializeData serExclusions;
        List<int> _Exclusions;
        public List<int> Exclusions { get { return _Exclusions; } set { _Exclusions = value; } }
        public SerializeData serInclusions;
        List<int> _Inclusions;
        public List<int> Inclusions { get { return _Inclusions; } set { _Inclusions = value; } }
        public SerializeData serMarkerSets;
        List<int> _MarkerSets;
        public List<int> MarkerSets { get { return _MarkerSets; } set { _MarkerSets = value; } }
        public LookLink Field12;
        public int Field13;
        public SerializeData serMsgTriggeredEvents;
        List<MsgTriggeredEvent> _MsgTriggeredEvents;
        public List<MsgTriggeredEvent> MsgTriggeredEvents { get { return _MsgTriggeredEvents; } set { _MsgTriggeredEvents = value; } }
        public NavZoneDefinition tNavZoneDef;
        public override int StructSize() { return 784; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            SNOAppearance = buffer.ReadInt(32);
            SNOPhysMesh = buffer.ReadInt(32);
            AABBBounds = new AABB();
            AABBBounds.Parse(buffer);
            AABBMarkerSetBounds = new AABB();
            AABBMarkerSetBounds.Parse(buffer);
            Field5 = new NavMeshDef();
            Field5.Parse(buffer);
            serExclusions = new SerializeData();
            serExclusions.Parse(buffer);
            //still checking variablearrays
            this.Exclusions = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Exclusions.Count; loop12++)
            {
                _Exclusions[loop12] = buffer.ReadInt(0);
            }
            serInclusions = new SerializeData();
            serInclusions.Parse(buffer);
            //still checking variablearrays
            this.Inclusions = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Inclusions.Count; loop12++)
            {
                _Inclusions[loop12] = buffer.ReadInt(0);
            }
            serMarkerSets = new SerializeData();
            serMarkerSets.Parse(buffer);
            //still checking variablearrays
            this.MarkerSets = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MarkerSets.Count; loop12++)
            {
                _MarkerSets[loop12] = buffer.ReadInt(0);
            }
            Field12 = new LookLink();
            Field12.Parse(buffer);
            Field13 = buffer.ReadInt(32);
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.Parse(buffer);
            //still checking variablearrays
            this.MsgTriggeredEvents = new List<MsgTriggeredEvent>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12] = new MsgTriggeredEvent();
                _MsgTriggeredEvents[loop12].Parse(buffer);
            }
            tNavZoneDef = new NavZoneDefinition();
            tNavZoneDef.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, SNOAppearance);
            buffer.WriteInt(32, SNOPhysMesh);
            AABBBounds.Encode(buffer);
            AABBMarkerSetBounds.Encode(buffer);
            Field5.Encode(buffer);
            serExclusions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Exclusions.Count);
            for (int loop12 = 0; loop12 < _Exclusions.Count; loop12++)
            {
                buffer.WriteInt(0, _Exclusions[loop12]);
            }
            serInclusions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Inclusions.Count);
            for (int loop12 = 0; loop12 < _Inclusions.Count; loop12++)
            {
                buffer.WriteInt(0, _Inclusions[loop12]);
            }
            serMarkerSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MarkerSets.Count);
            for (int loop12 = 0; loop12 < _MarkerSets.Count; loop12++)
            {
                buffer.WriteInt(0, _MarkerSets[loop12]);
            }
            Field12.Encode(buffer);
            buffer.WriteInt(32, Field13);
            serMsgTriggeredEvents.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MsgTriggeredEvents.Count);
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].Encode(buffer);
            }
            tNavZoneDef.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Scene {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAppearance:" + SNOAppearance.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPhysMesh:" + SNOPhysMesh.ToString());
            AABBBounds.AsText(b, pad, "AABBBounds: ");
            AABBMarkerSetBounds.AsText(b, pad, "AABBMarkerSetBounds: ");
            Field5.AsText(b, pad, "Field5: ");
            serExclusions.AsText(b, pad, "serExclusions: ");
            for (int loop12 = 0; loop12 < _Exclusions.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Exclusions[loop12]:" + _Exclusions[loop12].ToString());
            }
            serInclusions.AsText(b, pad, "serInclusions: ");
            for (int loop12 = 0; loop12 < _Inclusions.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Inclusions[loop12]:" + _Inclusions[loop12].ToString());
            }
            serMarkerSets.AsText(b, pad, "serMarkerSets: ");
            for (int loop12 = 0; loop12 < _MarkerSets.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_MarkerSets[loop12]:" + _MarkerSets[loop12].ToString());
            }
            Field12.AsText(b, pad, "Field12: ");
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            serMsgTriggeredEvents.AsText(b, pad, "serMsgTriggeredEvents: ");
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].AsText(b, pad, "_MsgTriggeredEvents[loop12]: ");
            }
            tNavZoneDef.AsText(b, pad, "tNavZoneDef: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 776;
            SNOAppearance = stream.ReadValueS32();
            stream.Position = offset + 780;
            SNOPhysMesh = stream.ReadValueS32();
            stream.Position = offset + 16;
            AABBBounds = new AABB();
            AABBBounds.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            AABBMarkerSetBounds = new AABB();
            AABBMarkerSetBounds.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            Field5 = new NavMeshDef();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 360;
            serExclusions = new SerializeData();
            serExclusions.FileRead(stream, stream.Position);
            stream.Position = offset + 368;
            //still checking variablearrays
            Exclusions = new List<int>();
            for (int i = 0; i < (int)(serExclusions.Field1 / 4); i++)
            {
                stream.Position = serExclusions.Field0 + 16 + (4 * i);
                int temp12_Exclusions;
                temp12_Exclusions = stream.ReadValueS32();
                _Exclusions.Add(temp12_Exclusions);
            }
            stream.Position = offset + 424;
            serInclusions = new SerializeData();
            serInclusions.FileRead(stream, stream.Position);
            stream.Position = offset + 432;
            //still checking variablearrays
            Inclusions = new List<int>();
            for (int i = 0; i < (int)(serInclusions.Field1 / 4); i++)
            {
                stream.Position = serInclusions.Field0 + 16 + (4 * i);
                int temp12_Inclusions;
                temp12_Inclusions = stream.ReadValueS32();
                _Inclusions.Add(temp12_Inclusions);
            }
            stream.Position = offset + 488;
            serMarkerSets = new SerializeData();
            serMarkerSets.FileRead(stream, stream.Position);
            stream.Position = offset + 496;
            //still checking variablearrays
            MarkerSets = new List<int>();
            for (int i = 0; i < (int)(serMarkerSets.Field1 / 4); i++)
            {
                stream.Position = serMarkerSets.Field0 + 16 + (4 * i);
                int temp12_MarkerSets;
                temp12_MarkerSets = stream.ReadValueS32();
                _MarkerSets.Add(temp12_MarkerSets);
            }
            stream.Position = offset + 552;
            Field12 = new LookLink();
            Field12.FileRead(stream, stream.Position);
            stream.Position = offset + 624;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 616;
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.FileRead(stream, stream.Position);
            stream.Position = offset + 632;
            //still checking variablearrays
            MsgTriggeredEvents = new List<MsgTriggeredEvent>();
            for (int i = 0; i < (int)(serMsgTriggeredEvents.Field1 / 412); i++)
            {
                stream.Position = serMsgTriggeredEvents.Field0 + 16 + (412 * i);
                MsgTriggeredEvent temp12_MsgTriggeredEvents;
                temp12_MsgTriggeredEvents = new MsgTriggeredEvent();
                temp12_MsgTriggeredEvents.FileRead(stream, stream.Position);
                _MsgTriggeredEvents.Add(temp12_MsgTriggeredEvents);
            }
            stream.Position = offset + 640;
            tNavZoneDef = new NavZoneDefinition();
            tNavZoneDef.FileRead(stream, stream.Position);
        }

    }

    public class NavZoneDefinition : GameMessage
    {
        public int Field0;
        public SerializeData serNavCells;
        List<NavCell> _NavCells;
        public List<NavCell> NavCells { get { return _NavCells; } set { _NavCells = value; } }
        public int NeightbourCount;
        public SerializeData serNavCellNeighbors;
        List<NavCellLookup> _NavCellNeighbors;
        public List<NavCellLookup> NavCellNeighbors { get { return _NavCellNeighbors; } set { _NavCellNeighbors = value; } }
        public float Field6;
        public float Field7;
        public int Field8;
        public IVector2D Field9;
        public SerializeData serGridSquares;
        List<NavGridSquare> _GridSquares;
        public List<NavGridSquare> GridSquares { get { return _GridSquares; } set { _GridSquares = value; } }
        public int Field12;
        public SerializeData serCellLookups;
        List<NavCellLookup> _CellLookups;
        public List<NavCellLookup> CellLookups { get { return _CellLookups; } set { _CellLookups = value; } }
        public int BorderDataCount;
        public SerializeData serBorderData;
        List<NavCellBorderData> _BorderData;
        public List<NavCellBorderData> BorderData { get { return _BorderData; } set { _BorderData = value; } }
        public override int StructSize() { return 136; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serNavCells = new SerializeData();
            serNavCells.Parse(buffer);
            //still checking variablearrays
            this.NavCells = new List<NavCell>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _NavCells.Count; loop12++)
            {
                _NavCells[loop12] = new NavCell();
                _NavCells[loop12].Parse(buffer);
            }
            NeightbourCount = buffer.ReadInt(32);
            serNavCellNeighbors = new SerializeData();
            serNavCellNeighbors.Parse(buffer);
            //still checking variablearrays
            this.NavCellNeighbors = new List<NavCellLookup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _NavCellNeighbors.Count; loop12++)
            {
                _NavCellNeighbors[loop12] = new NavCellLookup();
                _NavCellNeighbors[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadInt(32);
            Field9 = new IVector2D();
            Field9.Parse(buffer);
            serGridSquares = new SerializeData();
            serGridSquares.Parse(buffer);
            //still checking variablearrays
            this.GridSquares = new List<NavGridSquare>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _GridSquares.Count; loop12++)
            {
                _GridSquares[loop12] = new NavGridSquare();
                _GridSquares[loop12].Parse(buffer);
            }
            Field12 = buffer.ReadInt(32);
            serCellLookups = new SerializeData();
            serCellLookups.Parse(buffer);
            //still checking variablearrays
            this.CellLookups = new List<NavCellLookup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _CellLookups.Count; loop12++)
            {
                _CellLookups[loop12] = new NavCellLookup();
                _CellLookups[loop12].Parse(buffer);
            }
            BorderDataCount = buffer.ReadInt(32);
            serBorderData = new SerializeData();
            serBorderData.Parse(buffer);
            //still checking variablearrays
            this.BorderData = new List<NavCellBorderData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _BorderData.Count; loop12++)
            {
                _BorderData[loop12] = new NavCellBorderData();
                _BorderData[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serNavCells.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _NavCells.Count);
            for (int loop12 = 0; loop12 < _NavCells.Count; loop12++)
            {
                _NavCells[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, NeightbourCount);
            serNavCellNeighbors.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _NavCellNeighbors.Count);
            for (int loop12 = 0; loop12 < _NavCellNeighbors.Count; loop12++)
            {
                _NavCellNeighbors[loop12].Encode(buffer);
            }
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteInt(32, Field8);
            Field9.Encode(buffer);
            serGridSquares.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _GridSquares.Count);
            for (int loop12 = 0; loop12 < _GridSquares.Count; loop12++)
            {
                _GridSquares[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field12);
            serCellLookups.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _CellLookups.Count);
            for (int loop12 = 0; loop12 < _CellLookups.Count; loop12++)
            {
                _CellLookups[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, BorderDataCount);
            serBorderData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _BorderData.Count);
            for (int loop12 = 0; loop12 < _BorderData.Count; loop12++)
            {
                _BorderData[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavZoneDefinition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serNavCells.AsText(b, pad, "serNavCells: ");
            for (int loop12 = 0; loop12 < _NavCells.Count; loop12++)
            {
                _NavCells[loop12].AsText(b, pad, "_NavCells[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("NeightbourCount:" + NeightbourCount.ToString());
            serNavCellNeighbors.AsText(b, pad, "serNavCellNeighbors: ");
            for (int loop12 = 0; loop12 < _NavCellNeighbors.Count; loop12++)
            {
                _NavCellNeighbors[loop12].AsText(b, pad, "_NavCellNeighbors[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            Field9.AsText(b, pad, "Field9: ");
            serGridSquares.AsText(b, pad, "serGridSquares: ");
            for (int loop12 = 0; loop12 < _GridSquares.Count; loop12++)
            {
                _GridSquares[loop12].AsText(b, pad, "_GridSquares[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            serCellLookups.AsText(b, pad, "serCellLookups: ");
            for (int loop12 = 0; loop12 < _CellLookups.Count; loop12++)
            {
                _CellLookups[loop12].AsText(b, pad, "_CellLookups[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("BorderDataCount:" + BorderDataCount.ToString());
            serBorderData.AsText(b, pad, "serBorderData: ");
            for (int loop12 = 0; loop12 < _BorderData.Count; loop12++)
            {
                _BorderData[loop12].AsText(b, pad, "_BorderData[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serNavCells = new SerializeData();
            serNavCells.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            NavCells = new List<NavCell>();
            for (int i = 0; i < (int)(serNavCells.Field1 / 32); i++)
            {
                stream.Position = serNavCells.Field0 + 16 + (32 * i);
                NavCell temp12_NavCells;
                temp12_NavCells = new NavCell();
                temp12_NavCells.FileRead(stream, stream.Position);
                _NavCells.Add(temp12_NavCells);
            }
            stream.Position = offset + 24;
            NeightbourCount = stream.ReadValueS32();
            stream.Position = offset + 40;
            serNavCellNeighbors = new SerializeData();
            serNavCellNeighbors.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking variablearrays
            NavCellNeighbors = new List<NavCellLookup>();
            for (int i = 0; i < (int)(serNavCellNeighbors.Field1 / 4); i++)
            {
                stream.Position = serNavCellNeighbors.Field0 + 16 + (4 * i);
                NavCellLookup temp12_NavCellNeighbors;
                temp12_NavCellNeighbors = new NavCellLookup();
                temp12_NavCellNeighbors.FileRead(stream, stream.Position);
                _NavCellNeighbors.Add(temp12_NavCellNeighbors);
            }
            stream.Position = offset + 48;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field9 = new IVector2D();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 80;
            serGridSquares = new SerializeData();
            serGridSquares.FileRead(stream, stream.Position);
            stream.Position = offset + 72;
            //still checking variablearrays
            GridSquares = new List<NavGridSquare>();
            for (int i = 0; i < (int)(serGridSquares.Field1 / 6); i++)
            {
                stream.Position = serGridSquares.Field0 + 16 + (6 * i);
                NavGridSquare temp12_GridSquares;
                temp12_GridSquares = new NavGridSquare();
                temp12_GridSquares.FileRead(stream, stream.Position);
                _GridSquares.Add(temp12_GridSquares);
            }
            stream.Position = offset + 88;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 104;
            serCellLookups = new SerializeData();
            serCellLookups.FileRead(stream, stream.Position);
            stream.Position = offset + 96;
            //still checking variablearrays
            CellLookups = new List<NavCellLookup>();
            for (int i = 0; i < (int)(serCellLookups.Field1 / 4); i++)
            {
                stream.Position = serCellLookups.Field0 + 16 + (4 * i);
                NavCellLookup temp12_CellLookups;
                temp12_CellLookups = new NavCellLookup();
                temp12_CellLookups.FileRead(stream, stream.Position);
                _CellLookups.Add(temp12_CellLookups);
            }
            stream.Position = offset + 112;
            BorderDataCount = stream.ReadValueS32();
            stream.Position = offset + 128;
            serBorderData = new SerializeData();
            serBorderData.FileRead(stream, stream.Position);
            stream.Position = offset + 120;
            //still checking variablearrays
            BorderData = new List<NavCellBorderData>();
            for (int i = 0; i < (int)(serBorderData.Field1 / 4); i++)
            {
                stream.Position = serBorderData.Field0 + 16 + (4 * i);
                NavCellBorderData temp12_BorderData;
                temp12_BorderData = new NavCellBorderData();
                temp12_BorderData.FileRead(stream, stream.Position);
                _BorderData.Add(temp12_BorderData);
            }
        }

    }

    public class TileInfo : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int snoScene;
        public SerializeData serTileTagMap;
        public DT_TAGMAP hTileTagMap;
        public CustomTileInfo Field6;
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            snoScene = buffer.ReadInt(32);
            serTileTagMap = new SerializeData();
            serTileTagMap.Parse(buffer);
            hTileTagMap = new DT_TAGMAP();
            hTileTagMap.Parse(buffer);
            Field6 = new CustomTileInfo();
            Field6.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, snoScene);
            serTileTagMap.Encode(buffer);
            hTileTagMap.Encode(buffer);
            Field6.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TileInfo {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("snoScene:" + snoScene.ToString());
            serTileTagMap.AsText(b, pad, "serTileTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTileTagMap:" + hTileTagMap.ToString());
            Field6.AsText(b, pad, "Field6: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 8;
            snoScene = stream.ReadValueS32();
            stream.Position = offset + 16;
            serTileTagMap = new SerializeData();
            serTileTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            // hTileTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 32;
            Field6 = new CustomTileInfo();
            Field6.FileRead(stream, stream.Position);
        }

    }

    public class SceneParams : GameMessage
    {
        public SerializeData serSceneChunks;
        List<SceneChunk> _SceneChunks;
        public List<SceneChunk> SceneChunks { get { return _SceneChunks; } set { _SceneChunks = value; } }
        public int Field2;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            serSceneChunks = new SerializeData();
            serSceneChunks.Parse(buffer);
            //still checking variablearrays
            this.SceneChunks = new List<SceneChunk>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SceneChunks.Count; loop12++)
            {
                _SceneChunks[loop12] = new SceneChunk();
                _SceneChunks[loop12].Parse(buffer);
            }
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serSceneChunks.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SceneChunks.Count);
            for (int loop12 = 0; loop12 < _SceneChunks.Count; loop12++)
            {
                _SceneChunks[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneParams {");
            pad += 4;
            serSceneChunks.AsText(b, pad, "serSceneChunks: ");
            for (int loop12 = 0; loop12 < _SceneChunks.Count; loop12++)
            {
                _SceneChunks[loop12].AsText(b, pad, "_SceneChunks[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serSceneChunks = new SerializeData();
            serSceneChunks.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            SceneChunks = new List<SceneChunk>();
            for (int i = 0; i < (int)(serSceneChunks.Field1 / 244); i++)
            {
                stream.Position = serSceneChunks.Field0 + 16 + (244 * i);
                SceneChunk temp12_SceneChunks;
                temp12_SceneChunks = new SceneChunk();
                temp12_SceneChunks.FileRead(stream, stream.Position);
                _SceneChunks.Add(temp12_SceneChunks);
            }
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
        }

    }

    public class Actor : GameMessage
    {
        public int Field0;
        int _Type;
        public int Type { get { return _Type; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public int ApperanceSNO;
        public int PhysMeshSNO;
        public AxialCylinder Cylinder;
        public Sphere Sphere;
        public AABB AABBBounds;
        public SerializeData serTagMap;
        public DT_TAGMAP TagMap;
        public int AnimSetSNO;
        public int MonsterSNO;
        public int Field11;
        public SerializeData serMsgTriggeredEvents;
        List<MsgTriggeredEvent> _MsgTriggeredEvents;
        public List<MsgTriggeredEvent> MsgTriggeredEvents { get { return _MsgTriggeredEvents; } set { _MsgTriggeredEvents = value; } }
        public Vector3D V0;
        WeightedLook[] _Looks;
        public WeightedLook[] Looks { get { return _Looks; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Looks = value; } }
        public int PhysicsSNO;
        public int Field17;
        public int Field18;
        public float Field19;
        public float Field20;
        public float Field21;
        public ActorCollisionData ActorCollisionData;
        InventoryImages[] _InventoryImages;
        public InventoryImages[] InventoryImages { get { return _InventoryImages; } set { if (value != null && value.Length != 5) throw new ArgumentOutOfRangeException(); _InventoryImages = value; } }
        public int Field24;
        public SerializeData serVOCastingNotes;
        public string VOCastingNotes;
        public SerializeData serVORole;
        public string VORole;
        public override int StructSize() { return 864; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Type = buffer.ReadInt(4);
            ApperanceSNO = buffer.ReadInt(32);
            PhysMeshSNO = buffer.ReadInt(32);
            Cylinder = new AxialCylinder();
            Cylinder.Parse(buffer);
            Sphere = new Sphere();
            Sphere.Parse(buffer);
            AABBBounds = new AABB();
            AABBBounds.Parse(buffer);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            TagMap = new DT_TAGMAP();
            TagMap.Parse(buffer);
            AnimSetSNO = buffer.ReadInt(32);
            MonsterSNO = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.Parse(buffer);
            //still checking variablearrays
            this.MsgTriggeredEvents = new List<MsgTriggeredEvent>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12] = new MsgTriggeredEvent();
                _MsgTriggeredEvents[loop12].Parse(buffer);
            }
            V0 = new Vector3D();
            V0.Parse(buffer);
            Looks = new WeightedLook[8];
            for (int i = 0; i < _Looks.Length; i++)
            {
                _Looks[i] = new WeightedLook();
                _Looks[i].Parse(buffer);
            }
            PhysicsSNO = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadFloat32();
            ActorCollisionData = new ActorCollisionData();
            ActorCollisionData.Parse(buffer);
            InventoryImages = new InventoryImages[5];
            for (int i = 0; i < _InventoryImages.Length; i++)
            {
                _InventoryImages[i] = new InventoryImages();
                _InventoryImages[i].Parse(buffer);
            }
            Field24 = buffer.ReadInt(32);
            serVOCastingNotes = new SerializeData();
            serVOCastingNotes.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serVORole = new SerializeData();
            serVORole.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(4, Type);
            buffer.WriteInt(32, ApperanceSNO);
            buffer.WriteInt(32, PhysMeshSNO);
            Cylinder.Encode(buffer);
            Sphere.Encode(buffer);
            AABBBounds.Encode(buffer);
            serTagMap.Encode(buffer);
            TagMap.Encode(buffer);
            buffer.WriteInt(32, AnimSetSNO);
            buffer.WriteInt(32, MonsterSNO);
            buffer.WriteInt(32, Field11);
            serMsgTriggeredEvents.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MsgTriggeredEvents.Count);
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].Encode(buffer);
            }
            V0.Encode(buffer);
            for (int i = 0; i < _Looks.Length; i++) _Looks[i].Encode(buffer);
            buffer.WriteInt(32, PhysicsSNO);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteFloat32(Field21);
            ActorCollisionData.Encode(buffer);
            for (int i = 0; i < _InventoryImages.Length; i++) _InventoryImages[i].Encode(buffer);
            buffer.WriteInt(32, Field24);
            serVOCastingNotes.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serVORole.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Actor {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            b.Append(' ', pad); b.AppendLine("ApperanceSNO:" + ApperanceSNO.ToString());
            b.Append(' ', pad); b.AppendLine("PhysMeshSNO:" + PhysMeshSNO.ToString());
            Cylinder.AsText(b, pad, "Cylinder: ");
            Sphere.AsText(b, pad, "Sphere: ");
            AABBBounds.AsText(b, pad, "AABBBounds: ");
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("TagMap:" + TagMap.ToString());
            b.Append(' ', pad); b.AppendLine("AnimSetSNO:" + AnimSetSNO.ToString());
            b.Append(' ', pad); b.AppendLine("MonsterSNO:" + MonsterSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            serMsgTriggeredEvents.AsText(b, pad, "serMsgTriggeredEvents: ");
            for (int loop12 = 0; loop12 < _MsgTriggeredEvents.Count; loop12++)
            {
                _MsgTriggeredEvents[loop12].AsText(b, pad, "_MsgTriggeredEvents[loop12]: ");
            }
            V0.AsText(b, pad, "V0: ");
            for (int loop12 = 0; loop12 < _Looks.Length; loop12++)
            {
                _Looks[loop12].AsText(b, pad, "_Looks[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("PhysicsSNO:" + PhysicsSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            ActorCollisionData.AsText(b, pad, "ActorCollisionData: ");
            for (int loop12 = 0; loop12 < _InventoryImages.Length; loop12++)
            {
                _InventoryImages[loop12].AsText(b, pad, "_InventoryImages[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            serVOCastingNotes.AsText(b, pad, "serVOCastingNotes: ");
            b.Append(' ', pad); b.AppendLine("VOCastingNotes:" + VOCastingNotes.ToString());
            serVORole.AsText(b, pad, "serVORole: ");
            b.Append(' ', pad); b.AppendLine("VORole:" + VORole.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Type = stream.ReadValueS32();
            stream.Position = offset + 20;
            ApperanceSNO = stream.ReadValueS32();
            stream.Position = offset + 24;
            PhysMeshSNO = stream.ReadValueS32();
            stream.Position = offset + 28;
            Cylinder = new AxialCylinder();
            Cylinder.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            Sphere = new Sphere();
            Sphere.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            AABBBounds = new AABB();
            AABBBounds.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 96;
            // TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 104;
            AnimSetSNO = stream.ReadValueS32();
            stream.Position = offset + 108;
            MonsterSNO = stream.ReadValueS32();
            stream.Position = offset + 120;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 112;
            serMsgTriggeredEvents = new SerializeData();
            serMsgTriggeredEvents.FileRead(stream, stream.Position);
            stream.Position = offset + 128;
            //still checking variablearrays
            MsgTriggeredEvents = new List<MsgTriggeredEvent>();
            for (int i = 0; i < (int)(serMsgTriggeredEvents.Field1 / 412); i++)
            {
                stream.Position = serMsgTriggeredEvents.Field0 + 16 + (412 * i);
                MsgTriggeredEvent temp12_MsgTriggeredEvents;
                temp12_MsgTriggeredEvents = new MsgTriggeredEvent();
                temp12_MsgTriggeredEvents.FileRead(stream, stream.Position);
                _MsgTriggeredEvents.Add(temp12_MsgTriggeredEvents);
            }
            stream.Position = offset + 136;
            V0 = new Vector3D();
            V0.FileRead(stream, stream.Position);
            stream.Position = offset + 148;
            Looks = new WeightedLook[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                WeightedLook temp12_Looks;
                temp12_Looks = new WeightedLook();
                temp12_Looks.FileRead(stream, stream.Position);
                _Looks[loop12] = temp12_Looks;
            }
            stream.Position = offset + 692;
            PhysicsSNO = stream.ReadValueS32();
            stream.Position = offset + 696;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 700;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 704;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 708;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 712;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 716;
            ActorCollisionData = new ActorCollisionData();
            ActorCollisionData.FileRead(stream, stream.Position);
            stream.Position = offset + 784;
            InventoryImages = new InventoryImages[5];
            for (int loop12 = 0; loop12 < 5; loop12++)
            {
                InventoryImages temp12_InventoryImages;
                temp12_InventoryImages = new InventoryImages();
                temp12_InventoryImages.FileRead(stream, stream.Position);
                _InventoryImages[loop12] = temp12_InventoryImages;
            }
            stream.Position = offset + 824;
            Field24 = stream.ReadValueS32();
            stream.Position = offset + 840;
            serVOCastingNotes = new SerializeData();
            serVOCastingNotes.FileRead(stream, stream.Position);
            stream.Position = offset + 832;
            //still checking cstrings
            stream.Position = serVOCastingNotes.Field0 + 16;
            VOCastingNotes = stream.ReadString((uint)serVOCastingNotes.Field1);
            stream.Position = offset + 856;
            serVORole = new SerializeData();
            serVORole.FileRead(stream, stream.Position);
            stream.Position = offset + 848;
            //still checking cstrings
            stream.Position = serVORole.Field0 + 16;
            VORole = stream.ReadString((uint)serVORole.Field1);
        }

    }

    public class Anim : GameMessage
    {
        public int Field0;
        public int Field1;
        public int SNOAppearance;
        public int Field3;
        public SerializeData serPermutations;
        List<AnimPermutation> _Permutations;
        public List<AnimPermutation> Permutations { get { return _Permutations; } set { _Permutations = value; } }
        public int Field6;
        public override int StructSize() { return 56; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            SNOAppearance = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            serPermutations = new SerializeData();
            serPermutations.Parse(buffer);
            //still checking variablearrays
            this.Permutations = new List<AnimPermutation>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Permutations.Count; loop12++)
            {
                _Permutations[loop12] = new AnimPermutation();
                _Permutations[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, SNOAppearance);
            buffer.WriteInt(32, Field3);
            serPermutations.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Permutations.Count);
            for (int loop12 = 0; loop12 < _Permutations.Count; loop12++)
            {
                _Permutations[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Anim {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAppearance:" + SNOAppearance.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serPermutations.AsText(b, pad, "serPermutations: ");
            for (int loop12 = 0; loop12 < _Permutations.Count; loop12++)
            {
                _Permutations[loop12].AsText(b, pad, "_Permutations[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            SNOAppearance = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 24;
            serPermutations = new SerializeData();
            serPermutations.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            //still checking variablearrays
            Permutations = new List<AnimPermutation>();
            for (int i = 0; i < (int)(serPermutations.Field1 / 920); i++)
            {
                stream.Position = serPermutations.Field0 + 16 + (920 * i);
                AnimPermutation temp12_Permutations;
                temp12_Permutations = new AnimPermutation();
                temp12_Permutations.FileRead(stream, stream.Position);
                _Permutations.Add(temp12_Permutations);
            }
            stream.Position = offset + 48;
            Field6 = stream.ReadValueS32();
        }

    }

    public class AnimPermutation : GameMessage
    {
        public int Field0;
        public string _AnimName;
        public string AnimName { get { return _AnimName; } set { if (value != null && value.Length > 65) throw new ArgumentOutOfRangeException(); _AnimName = value; } }
        public float Velocity;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public int Time1;
        public int Time2;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public int Field13;
        public int BoneNameCount;
        public SerializeData serBoneNames;
        List<BoneName> _BoneNames;
        public List<BoneName> BoneNames { get { return _BoneNames; } set { _BoneNames = value; } }
        public int KeyframePosCount;
        public SerializeData serTranslationCurves;
        List<TranslationCurve> _TranslationCurves;
        public List<TranslationCurve> TranslationCurves { get { return _TranslationCurves; } set { _TranslationCurves = value; } }
        public SerializeData serRotationCurves;
        List<RotationCurve> _RotationCurves;
        public List<RotationCurve> RotationCurves { get { return _RotationCurves; } set { _RotationCurves = value; } }
        public SerializeData serScaleCurves;
        List<ScaleCurve> _ScaleCurves;
        public List<ScaleCurve> ScaleCurves { get { return _ScaleCurves; } set { _ScaleCurves = value; } }
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public Vector3D Field28;
        public Vector3D Field29;
        public Vector3D Field30;
        public Vector3D Field31;
        public float Field32;
        public int KeyedAttachmentsCount;
        public SerializeData serKeyedAttachments;
        List<KeyframedAttachment> _KeyedAttachments;
        public List<KeyframedAttachment> KeyedAttachments { get { return _KeyedAttachments; } set { _KeyedAttachments = value; } }
        public SerializeData serKeyframePosList;
        List<Vector3D> _KeyframePosList;
        public List<Vector3D> KeyframePosList { get { return _KeyframePosList; } set { _KeyframePosList = value; } }
        public SerializeData serNonlinearOffset;
        List<Vector3D> _NonlinearOffset;
        public List<Vector3D> NonlinearOffset { get { return _NonlinearOffset; } set { _NonlinearOffset = value; } }
        public VelocityVector3D Velocity3D;
        public HardpointLink Link;
        public string _Field42;
        public string Field42 { get { return _Field42; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field42 = value; } }
        public string _Field43;
        public string Field43 { get { return _Field43; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field43 = value; } }
        public override int StructSize() { return 920; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            AnimName = buffer.ReadCharArray(65);
            Velocity = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Time1 = buffer.ReadInt(32);
            Time2 = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadInt(32);
            BoneNameCount = buffer.ReadInt(32);
            serBoneNames = new SerializeData();
            serBoneNames.Parse(buffer);
            //still checking variablearrays
            this.BoneNames = new List<BoneName>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _BoneNames.Count; loop12++)
            {
                _BoneNames[loop12] = new BoneName();
                _BoneNames[loop12].Parse(buffer);
            }
            KeyframePosCount = buffer.ReadInt(32);
            serTranslationCurves = new SerializeData();
            serTranslationCurves.Parse(buffer);
            //still checking variablearrays
            this.TranslationCurves = new List<TranslationCurve>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TranslationCurves.Count; loop12++)
            {
                _TranslationCurves[loop12] = new TranslationCurve();
                _TranslationCurves[loop12].Parse(buffer);
            }
            serRotationCurves = new SerializeData();
            serRotationCurves.Parse(buffer);
            //still checking variablearrays
            this.RotationCurves = new List<RotationCurve>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _RotationCurves.Count; loop12++)
            {
                _RotationCurves[loop12] = new RotationCurve();
                _RotationCurves[loop12].Parse(buffer);
            }
            serScaleCurves = new SerializeData();
            serScaleCurves.Parse(buffer);
            //still checking variablearrays
            this.ScaleCurves = new List<ScaleCurve>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ScaleCurves.Count; loop12++)
            {
                _ScaleCurves[loop12] = new ScaleCurve();
                _ScaleCurves[loop12].Parse(buffer);
            }
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = new Vector3D();
            Field28.Parse(buffer);
            Field29 = new Vector3D();
            Field29.Parse(buffer);
            Field30 = new Vector3D();
            Field30.Parse(buffer);
            Field31 = new Vector3D();
            Field31.Parse(buffer);
            Field32 = buffer.ReadFloat32();
            KeyedAttachmentsCount = buffer.ReadInt(32);
            serKeyedAttachments = new SerializeData();
            serKeyedAttachments.Parse(buffer);
            //still checking variablearrays
            this.KeyedAttachments = new List<KeyframedAttachment>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _KeyedAttachments.Count; loop12++)
            {
                _KeyedAttachments[loop12] = new KeyframedAttachment();
                _KeyedAttachments[loop12].Parse(buffer);
            }
            serKeyframePosList = new SerializeData();
            serKeyframePosList.Parse(buffer);
            //still checking variablearrays
            this.KeyframePosList = new List<Vector3D>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _KeyframePosList.Count; loop12++)
            {
                _KeyframePosList[loop12] = new Vector3D();
                _KeyframePosList[loop12].Parse(buffer);
            }
            serNonlinearOffset = new SerializeData();
            serNonlinearOffset.Parse(buffer);
            //still checking variablearrays
            this.NonlinearOffset = new List<Vector3D>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _NonlinearOffset.Count; loop12++)
            {
                _NonlinearOffset[loop12] = new Vector3D();
                _NonlinearOffset[loop12].Parse(buffer);
            }
            Velocity3D = new VelocityVector3D();
            Velocity3D.Parse(buffer);
            Link = new HardpointLink();
            Link.Parse(buffer);
            Field42 = buffer.ReadCharArray(256);
            Field43 = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteCharArray(65, AnimName);
            buffer.WriteFloat32(Velocity);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(32, Time1);
            buffer.WriteInt(32, Time2);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, BoneNameCount);
            serBoneNames.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _BoneNames.Count);
            for (int loop12 = 0; loop12 < _BoneNames.Count; loop12++)
            {
                _BoneNames[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, KeyframePosCount);
            serTranslationCurves.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TranslationCurves.Count);
            for (int loop12 = 0; loop12 < _TranslationCurves.Count; loop12++)
            {
                _TranslationCurves[loop12].Encode(buffer);
            }
            serRotationCurves.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _RotationCurves.Count);
            for (int loop12 = 0; loop12 < _RotationCurves.Count; loop12++)
            {
                _RotationCurves[loop12].Encode(buffer);
            }
            serScaleCurves.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ScaleCurves.Count);
            for (int loop12 = 0; loop12 < _ScaleCurves.Count; loop12++)
            {
                _ScaleCurves[loop12].Encode(buffer);
            }
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            Field28.Encode(buffer);
            Field29.Encode(buffer);
            Field30.Encode(buffer);
            Field31.Encode(buffer);
            buffer.WriteFloat32(Field32);
            buffer.WriteInt(32, KeyedAttachmentsCount);
            serKeyedAttachments.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _KeyedAttachments.Count);
            for (int loop12 = 0; loop12 < _KeyedAttachments.Count; loop12++)
            {
                _KeyedAttachments[loop12].Encode(buffer);
            }
            serKeyframePosList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _KeyframePosList.Count);
            for (int loop12 = 0; loop12 < _KeyframePosList.Count; loop12++)
            {
                _KeyframePosList[loop12].Encode(buffer);
            }
            serNonlinearOffset.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _NonlinearOffset.Count);
            for (int loop12 = 0; loop12 < _NonlinearOffset.Count; loop12++)
            {
                _NonlinearOffset[loop12].Encode(buffer);
            }
            Velocity3D.Encode(buffer);
            Link.Encode(buffer);
            buffer.WriteCharArray(256, Field42);
            buffer.WriteCharArray(256, Field43);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AnimPermutation {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("AnimName:" + AnimName.ToString());
            b.Append(' ', pad); b.AppendLine("Velocity:" + Velocity.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Time1:" + Time1.ToString());
            b.Append(' ', pad); b.AppendLine("Time2:" + Time2.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("BoneNameCount:" + BoneNameCount.ToString());
            serBoneNames.AsText(b, pad, "serBoneNames: ");
            for (int loop12 = 0; loop12 < _BoneNames.Count; loop12++)
            {
                _BoneNames[loop12].AsText(b, pad, "_BoneNames[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("KeyframePosCount:" + KeyframePosCount.ToString());
            serTranslationCurves.AsText(b, pad, "serTranslationCurves: ");
            for (int loop12 = 0; loop12 < _TranslationCurves.Count; loop12++)
            {
                _TranslationCurves[loop12].AsText(b, pad, "_TranslationCurves[loop12]: ");
            }
            serRotationCurves.AsText(b, pad, "serRotationCurves: ");
            for (int loop12 = 0; loop12 < _RotationCurves.Count; loop12++)
            {
                _RotationCurves[loop12].AsText(b, pad, "_RotationCurves[loop12]: ");
            }
            serScaleCurves.AsText(b, pad, "serScaleCurves: ");
            for (int loop12 = 0; loop12 < _ScaleCurves.Count; loop12++)
            {
                _ScaleCurves[loop12].AsText(b, pad, "_ScaleCurves[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            Field28.AsText(b, pad, "Field28: ");
            Field29.AsText(b, pad, "Field29: ");
            Field30.AsText(b, pad, "Field30: ");
            Field31.AsText(b, pad, "Field31: ");
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("KeyedAttachmentsCount:" + KeyedAttachmentsCount.ToString());
            serKeyedAttachments.AsText(b, pad, "serKeyedAttachments: ");
            for (int loop12 = 0; loop12 < _KeyedAttachments.Count; loop12++)
            {
                _KeyedAttachments[loop12].AsText(b, pad, "_KeyedAttachments[loop12]: ");
            }
            serKeyframePosList.AsText(b, pad, "serKeyframePosList: ");
            for (int loop12 = 0; loop12 < _KeyframePosList.Count; loop12++)
            {
                _KeyframePosList[loop12].AsText(b, pad, "_KeyframePosList[loop12]: ");
            }
            serNonlinearOffset.AsText(b, pad, "serNonlinearOffset: ");
            for (int loop12 = 0; loop12 < _NonlinearOffset.Count; loop12++)
            {
                _NonlinearOffset[loop12].AsText(b, pad, "_NonlinearOffset[loop12]: ");
            }
            Velocity3D.AsText(b, pad, "Velocity3D: ");
            Link.AsText(b, pad, "Link: ");
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            AnimName = stream.ReadString(65);
            stream.Position = offset + 72;
            Velocity = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 84;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 88;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 92;
            Time1 = stream.ReadValueS32();
            stream.Position = offset + 96;
            Time2 = stream.ReadValueS32();
            stream.Position = offset + 104;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 108;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 112;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 116;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 100;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 120;
            BoneNameCount = stream.ReadValueS32();
            stream.Position = offset + 124;
            serBoneNames = new SerializeData();
            serBoneNames.FileRead(stream, stream.Position);
            stream.Position = offset + 136;
            //still checking variablearrays
            BoneNames = new List<BoneName>();
            for (int i = 0; i < (int)(serBoneNames.Field1 / 64); i++)
            {
                stream.Position = serBoneNames.Field0 + 16 + (64 * i);
                BoneName temp12_BoneNames;
                temp12_BoneNames = new BoneName();
                temp12_BoneNames.FileRead(stream, stream.Position);
                _BoneNames.Add(temp12_BoneNames);
            }
            stream.Position = offset + 144;
            KeyframePosCount = stream.ReadValueS32();
            stream.Position = offset + 148;
            serTranslationCurves = new SerializeData();
            serTranslationCurves.FileRead(stream, stream.Position);
            stream.Position = offset + 160;
            //still checking variablearrays
            TranslationCurves = new List<TranslationCurve>();
            for (int i = 0; i < (int)(serTranslationCurves.Field1 / 24); i++)
            {
                stream.Position = serTranslationCurves.Field0 + 16 + (24 * i);
                TranslationCurve temp12_TranslationCurves;
                temp12_TranslationCurves = new TranslationCurve();
                temp12_TranslationCurves.FileRead(stream, stream.Position);
                _TranslationCurves.Add(temp12_TranslationCurves);
            }
            stream.Position = offset + 168;
            serRotationCurves = new SerializeData();
            serRotationCurves.FileRead(stream, stream.Position);
            stream.Position = offset + 176;
            //still checking variablearrays
            RotationCurves = new List<RotationCurve>();
            for (int i = 0; i < (int)(serRotationCurves.Field1 / 24); i++)
            {
                stream.Position = serRotationCurves.Field0 + 16 + (24 * i);
                RotationCurve temp12_RotationCurves;
                temp12_RotationCurves = new RotationCurve();
                temp12_RotationCurves.FileRead(stream, stream.Position);
                _RotationCurves.Add(temp12_RotationCurves);
            }
            stream.Position = offset + 184;
            serScaleCurves = new SerializeData();
            serScaleCurves.FileRead(stream, stream.Position);
            stream.Position = offset + 192;
            //still checking variablearrays
            ScaleCurves = new List<ScaleCurve>();
            for (int i = 0; i < (int)(serScaleCurves.Field1 / 24); i++)
            {
                stream.Position = serScaleCurves.Field0 + 16 + (24 * i);
                ScaleCurve temp12_ScaleCurves;
                temp12_ScaleCurves = new ScaleCurve();
                temp12_ScaleCurves.FileRead(stream, stream.Position);
                _ScaleCurves.Add(temp12_ScaleCurves);
            }
            stream.Position = offset + 200;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 204;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 208;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 212;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 216;
            Field28 = new Vector3D();
            Field28.FileRead(stream, stream.Position);
            stream.Position = offset + 228;
            Field29 = new Vector3D();
            Field29.FileRead(stream, stream.Position);
            stream.Position = offset + 240;
            Field30 = new Vector3D();
            Field30.FileRead(stream, stream.Position);
            stream.Position = offset + 252;
            Field31 = new Vector3D();
            Field31.FileRead(stream, stream.Position);
            stream.Position = offset + 264;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 276;
            KeyedAttachmentsCount = stream.ReadValueS32();
            stream.Position = offset + 268;
            serKeyedAttachments = new SerializeData();
            serKeyedAttachments.FileRead(stream, stream.Position);
            stream.Position = offset + 280;
            //still checking variablearrays
            KeyedAttachments = new List<KeyframedAttachment>();
            for (int i = 0; i < (int)(serKeyedAttachments.Field1 / 412); i++)
            {
                stream.Position = serKeyedAttachments.Field0 + 16 + (412 * i);
                KeyframedAttachment temp12_KeyedAttachments;
                temp12_KeyedAttachments = new KeyframedAttachment();
                temp12_KeyedAttachments.FileRead(stream, stream.Position);
                _KeyedAttachments.Add(temp12_KeyedAttachments);
            }
            stream.Position = offset + 288;
            serKeyframePosList = new SerializeData();
            serKeyframePosList.FileRead(stream, stream.Position);
            stream.Position = offset + 296;
            //still checking variablearrays
            KeyframePosList = new List<Vector3D>();
            for (int i = 0; i < (int)(serKeyframePosList.Field1 / 12); i++)
            {
                stream.Position = serKeyframePosList.Field0 + 16 + (12 * i);
                Vector3D temp12_KeyframePosList;
                temp12_KeyframePosList = new Vector3D();
                temp12_KeyframePosList.FileRead(stream, stream.Position);
                _KeyframePosList.Add(temp12_KeyframePosList);
            }
            stream.Position = offset + 304;
            serNonlinearOffset = new SerializeData();
            serNonlinearOffset.FileRead(stream, stream.Position);
            stream.Position = offset + 312;
            //still checking variablearrays
            NonlinearOffset = new List<Vector3D>();
            for (int i = 0; i < (int)(serNonlinearOffset.Field1 / 12); i++)
            {
                stream.Position = serNonlinearOffset.Field0 + 16 + (12 * i);
                Vector3D temp12_NonlinearOffset;
                temp12_NonlinearOffset = new Vector3D();
                temp12_NonlinearOffset.FileRead(stream, stream.Position);
                _NonlinearOffset.Add(temp12_NonlinearOffset);
            }
            stream.Position = offset + 320;
            Velocity3D = new VelocityVector3D();
            Velocity3D.FileRead(stream, stream.Position);
            stream.Position = offset + 332;
            Link = new HardpointLink();
            Link.FileRead(stream, stream.Position);
            stream.Position = offset + 400;
            Field42 = stream.ReadString(256);
            stream.Position = offset + 656;
            Field43 = stream.ReadString(256);
        }

    }

    public class StringList : GameMessage
    {
        public SerializeData serStrings;
        List<StringTableEntry> _Strings;
        public List<StringTableEntry> Strings { get { return _Strings; } set { _Strings = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            serStrings = new SerializeData();
            serStrings.Parse(buffer);
            //still checking variablearrays
            this.Strings = new List<StringTableEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Strings.Count; loop12++)
            {
                _Strings[loop12] = new StringTableEntry();
                _Strings[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serStrings.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Strings.Count);
            for (int loop12 = 0; loop12 < _Strings.Count; loop12++)
            {
                _Strings[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "StringList {");
            pad += 4;
            serStrings.AsText(b, pad, "serStrings: ");
            for (int loop12 = 0; loop12 < _Strings.Count; loop12++)
            {
                _Strings[loop12].AsText(b, pad, "_Strings[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 24;
            serStrings = new SerializeData();
            serStrings.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            Strings = new List<StringTableEntry>();
            for (int i = 0; i < (int)(serStrings.Field1 / 80); i++)
            {
                stream.Position = serStrings.Field0 + 16 + (80 * i);
                StringTableEntry temp12_Strings;
                temp12_Strings = new StringTableEntry();
                temp12_Strings.FileRead(stream, stream.Position);
                _Strings.Add(temp12_Strings);
            }
        }

    }

    public class StringTableEntry : GameMessage
    {
        public SerializeData serLabel;
        public string Label;
        public SerializeData serText;
        public string Text;
        public SerializeData serComment;
        public string Comment;
        public SerializeData serSpeaker;
        public string Speaker;
        public int Field8;
        public int Field9;
        public int Field10;
        public override int StructSize() { return 80; }

        public override void Parse(GameBitBuffer buffer)
        {
            serLabel = new SerializeData();
            serLabel.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serText = new SerializeData();
            serText.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serComment = new SerializeData();
            serComment.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serSpeaker = new SerializeData();
            serSpeaker.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serLabel.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serText.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serComment.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            serSpeaker.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "StringTableEntry {");
            pad += 4;
            serLabel.AsText(b, pad, "serLabel: ");
            b.Append(' ', pad); b.AppendLine("Label:" + Label.ToString());
            serText.AsText(b, pad, "serText: ");
            b.Append(' ', pad); b.AppendLine("Text:" + Text.ToString());
            serComment.AsText(b, pad, "serComment: ");
            b.Append(' ', pad); b.AppendLine("Comment:" + Comment.ToString());
            serSpeaker.AsText(b, pad, "serSpeaker: ");
            b.Append(' ', pad); b.AppendLine("Speaker:" + Speaker.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 8;
            serLabel = new SerializeData();
            serLabel.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            //still checking cstrings
            stream.Position = serLabel.Field0 + 16;
            Label = stream.ReadString((uint)serLabel.Field1);
            stream.Position = offset + 24;
            serText = new SerializeData();
            serText.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking cstrings
            stream.Position = serText.Field0 + 16;
            Text = stream.ReadString((uint)serText.Field1);
            stream.Position = offset + 40;
            serComment = new SerializeData();
            serComment.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking cstrings
            stream.Position = serComment.Field0 + 16;
            Comment = stream.ReadString((uint)serComment.Field1);
            stream.Position = offset + 56;
            serSpeaker = new SerializeData();
            serSpeaker.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            //still checking cstrings
            stream.Position = serSpeaker.Field0 + 16;
            Speaker = stream.ReadString((uint)serSpeaker.Field1);
            stream.Position = offset + 64;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field10 = stream.ReadValueS32();
        }

    }

    public class Power : GameMessage
    {
        public string _LuaName;
        public string LuaName { get { return _LuaName; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _LuaName = value; } }
        public PowerDef Powerdef;
        public bool Field2;
        public bool Field3;
        public string _Chararray2;
        public string Chararray2 { get { return _Chararray2; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Chararray2 = value; } }
        public int ScriptFormulaCount;
        public SerializeData serScriptFormulaDetails;
        List<ScriptFormulaDetails> _ScriptFormulaDetails;
        public List<ScriptFormulaDetails> ScriptFormulaDetails { get { return _ScriptFormulaDetails; } set { _ScriptFormulaDetails = value; } }
        public int Field8;
        public SerializeData serCompiledScript;
        List<byte> _CompiledScript;
        public List<byte> CompiledScript { get { return _CompiledScript; } set { _CompiledScript = value; } }
        public int SNOQuestMetaData;
        public override int StructSize() { return 744; }

        public override void Parse(GameBitBuffer buffer)
        {
            LuaName = buffer.ReadCharArray(64);
            Powerdef = new PowerDef();
            Powerdef.Parse(buffer);
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadBool();
            Chararray2 = buffer.ReadCharArray(256);
            ScriptFormulaCount = buffer.ReadInt(32);
            serScriptFormulaDetails = new SerializeData();
            serScriptFormulaDetails.Parse(buffer);
            //still checking variablearrays
            this.ScriptFormulaDetails = new List<ScriptFormulaDetails>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ScriptFormulaDetails.Count; loop12++)
            {
                _ScriptFormulaDetails[loop12] = new ScriptFormulaDetails();
                _ScriptFormulaDetails[loop12].Parse(buffer);
            }
            Field8 = buffer.ReadInt(32);
            serCompiledScript = new SerializeData();
            serCompiledScript.Parse(buffer);
            //still checking variablearrays
            this.CompiledScript = new List<byte>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _CompiledScript.Count; loop12++)
            {
                _CompiledScript[loop12] = (byte)buffer.ReadInt(0);
            }
            SNOQuestMetaData = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, LuaName);
            Powerdef.Encode(buffer);
            buffer.WriteBool(Field2);
            buffer.WriteBool(Field3);
            buffer.WriteCharArray(256, Chararray2);
            buffer.WriteInt(32, ScriptFormulaCount);
            serScriptFormulaDetails.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ScriptFormulaDetails.Count);
            for (int loop12 = 0; loop12 < _ScriptFormulaDetails.Count; loop12++)
            {
                _ScriptFormulaDetails[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field8);
            serCompiledScript.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _CompiledScript.Count);
            for (int loop12 = 0; loop12 < _CompiledScript.Count; loop12++)
            {
                buffer.WriteInt(0, _CompiledScript[loop12]);
            }
            buffer.WriteInt(32, SNOQuestMetaData);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Power {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("LuaName:" + LuaName.ToString());
            Powerdef.AsText(b, pad, "Powerdef: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Chararray2:" + Chararray2.ToString());
            b.Append(' ', pad); b.AppendLine("ScriptFormulaCount:" + ScriptFormulaCount.ToString());
            serScriptFormulaDetails.AsText(b, pad, "serScriptFormulaDetails: ");
            for (int loop12 = 0; loop12 < _ScriptFormulaDetails.Count; loop12++)
            {
                _ScriptFormulaDetails[loop12].AsText(b, pad, "_ScriptFormulaDetails[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            serCompiledScript.AsText(b, pad, "serCompiledScript: ");
            for (int loop12 = 0; loop12 < _CompiledScript.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_CompiledScript[loop12]:" + _CompiledScript[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("SNOQuestMetaData:" + SNOQuestMetaData.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            LuaName = stream.ReadString(64);
            stream.Position = offset + 80;
            Powerdef = new PowerDef();
            Powerdef.FileRead(stream, stream.Position);
            stream.Position = offset + 424;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 428;
            Field3 = stream.ReadValueS32() == 1;
            stream.Position = offset + 432;
            Chararray2 = stream.ReadString(256);
            stream.Position = offset + 688;
            ScriptFormulaCount = stream.ReadValueS32();
            stream.Position = offset + 692;
            serScriptFormulaDetails = new SerializeData();
            serScriptFormulaDetails.FileRead(stream, stream.Position);
            stream.Position = offset + 704;
            //still checking variablearrays
            ScriptFormulaDetails = new List<ScriptFormulaDetails>();
            for (int i = 0; i < (int)(serScriptFormulaDetails.Field1 / 776); i++)
            {
                stream.Position = serScriptFormulaDetails.Field0 + 16 + (776 * i);
                ScriptFormulaDetails temp12_ScriptFormulaDetails;
                temp12_ScriptFormulaDetails = new ScriptFormulaDetails();
                temp12_ScriptFormulaDetails.FileRead(stream, stream.Position);
                _ScriptFormulaDetails.Add(temp12_ScriptFormulaDetails);
            }
            stream.Position = offset + 712;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 728;
            serCompiledScript = new SerializeData();
            serCompiledScript.FileRead(stream, stream.Position);
            stream.Position = offset + 720;
            //still checking variablearrays
            CompiledScript = new List<byte>();
            for (int i = 0; i < (int)(serCompiledScript.Field1 / 1); i++)
            {
                stream.Position = serCompiledScript.Field0 + 16 + (1 * i);
                byte temp12_CompiledScript;
                temp12_CompiledScript = (byte)stream.ReadByte();
                _CompiledScript.Add(temp12_CompiledScript);
            }
            stream.Position = offset + 736;
            SNOQuestMetaData = stream.ReadValueS32();
        }

    }

    public class MarkerSet : GameMessage
    {
        public SerializeData serMarkers;
        List<Marker> _Markers;
        public List<Marker> Markers { get { return _Markers; } set { _Markers = value; } }
        public SerializeData serNoSpawns;
        List<Circle> _NoSpawns;
        public List<Circle> NoSpawns { get { return _NoSpawns; } set { _NoSpawns = value; } }
        public int Field4;
        public AABB AABB;
        public string _FileName;
        public string FileName { get { return _FileName; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _FileName = value; } }
        public int NLabel;
        public int SpecialIndexCount;
        public SerializeData serSpecialIndexList;
        List<ushort> _SpecialIndexList;
        public List<ushort> SpecialIndexList { get { return _SpecialIndexList; } set { _SpecialIndexList = value; } }
        public override int StructSize() { return 456; }

        public override void Parse(GameBitBuffer buffer)
        {
            serMarkers = new SerializeData();
            serMarkers.Parse(buffer);
            //still checking variablearrays
            this.Markers = new List<Marker>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Markers.Count; loop12++)
            {
                _Markers[loop12] = new Marker();
                _Markers[loop12].Parse(buffer);
            }
            serNoSpawns = new SerializeData();
            serNoSpawns.Parse(buffer);
            //still checking variablearrays
            this.NoSpawns = new List<Circle>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _NoSpawns.Count; loop12++)
            {
                _NoSpawns[loop12] = new Circle();
                _NoSpawns[loop12].Parse(buffer);
            }
            Field4 = buffer.ReadInt(32);
            AABB = new AABB();
            AABB.Parse(buffer);
            FileName = buffer.ReadCharArray(256);
            NLabel = buffer.ReadInt(32);
            SpecialIndexCount = buffer.ReadInt(32);
            serSpecialIndexList = new SerializeData();
            serSpecialIndexList.Parse(buffer);
            //still checking variablearrays
            this.SpecialIndexList = new List<ushort>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpecialIndexList.Count; loop12++)
            {
                _SpecialIndexList[loop12] = (ushort)buffer.ReadInt(0);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serMarkers.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Markers.Count);
            for (int loop12 = 0; loop12 < _Markers.Count; loop12++)
            {
                _Markers[loop12].Encode(buffer);
            }
            serNoSpawns.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _NoSpawns.Count);
            for (int loop12 = 0; loop12 < _NoSpawns.Count; loop12++)
            {
                _NoSpawns[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field4);
            AABB.Encode(buffer);
            buffer.WriteCharArray(256, FileName);
            buffer.WriteInt(32, NLabel);
            buffer.WriteInt(32, SpecialIndexCount);
            serSpecialIndexList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpecialIndexList.Count);
            for (int loop12 = 0; loop12 < _SpecialIndexList.Count; loop12++)
            {
                buffer.WriteInt(0, _SpecialIndexList[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MarkerSet {");
            pad += 4;
            serMarkers.AsText(b, pad, "serMarkers: ");
            for (int loop12 = 0; loop12 < _Markers.Count; loop12++)
            {
                _Markers[loop12].AsText(b, pad, "_Markers[loop12]: ");
            }
            serNoSpawns.AsText(b, pad, "serNoSpawns: ");
            for (int loop12 = 0; loop12 < _NoSpawns.Count; loop12++)
            {
                _NoSpawns[loop12].AsText(b, pad, "_NoSpawns[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            AABB.AsText(b, pad, "AABB: ");
            b.Append(' ', pad); b.AppendLine("FileName:" + FileName.ToString());
            b.Append(' ', pad); b.AppendLine("NLabel:" + NLabel.ToString());
            b.Append(' ', pad); b.AppendLine("SpecialIndexCount:" + SpecialIndexCount.ToString());
            serSpecialIndexList.AsText(b, pad, "serSpecialIndexList: ");
            for (int loop12 = 0; loop12 < _SpecialIndexList.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SpecialIndexList[loop12]:" + _SpecialIndexList[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            serMarkers = new SerializeData();
            serMarkers.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            Markers = new List<Marker>();
            for (int i = 0; i < (int)(serMarkers.Field1 / 208); i++)
            {
                stream.Position = serMarkers.Field0 + 16 + (208 * i);
                Marker temp12_Markers;
                temp12_Markers = new Marker();
                temp12_Markers.FileRead(stream, stream.Position);
                _Markers.Add(temp12_Markers);
            }
            stream.Position = offset + 80;
            serNoSpawns = new SerializeData();
            serNoSpawns.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            //still checking variablearrays
            NoSpawns = new List<Circle>();
            for (int i = 0; i < (int)(serNoSpawns.Field1 / 12); i++)
            {
                stream.Position = serNoSpawns.Field0 + 16 + (12 * i);
                Circle temp12_NoSpawns;
                temp12_NoSpawns = new Circle();
                temp12_NoSpawns.FileRead(stream, stream.Position);
                _NoSpawns.Add(temp12_NoSpawns);
            }
            stream.Position = offset + 168;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 144;
            AABB = new AABB();
            AABB.FileRead(stream, stream.Position);
            stream.Position = offset + 172;
            FileName = stream.ReadString(256);
            stream.Position = offset + 428;
            NLabel = stream.ReadValueS32();
            stream.Position = offset + 432;
            SpecialIndexCount = stream.ReadValueS32();
            stream.Position = offset + 436;
            serSpecialIndexList = new SerializeData();
            serSpecialIndexList.FileRead(stream, stream.Position);
            stream.Position = offset + 448;
            //still checking variablearrays
            SpecialIndexList = new List<ushort>();
            for (int i = 0; i < (int)(serSpecialIndexList.Field1 / 2); i++)
            {
                stream.Position = serSpecialIndexList.Field0 + 16 + (2 * i);
                ushort temp12_SpecialIndexList;
                temp12_SpecialIndexList = stream.ReadValueU16();
                _SpecialIndexList.Add(temp12_SpecialIndexList);
            }
        }

    }

    public class Encounter : GameMessage
    {
        public int SNOSpawn;
        public SerializeData serSpawnOptions;
        List<EncounterSpawnOption> _Spawnoptions;
        public List<EncounterSpawnOption> Spawnoptions { get { return _Spawnoptions; } set { _Spawnoptions = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOSpawn = buffer.ReadInt(32);
            serSpawnOptions = new SerializeData();
            serSpawnOptions.Parse(buffer);
            //still checking variablearrays
            this.Spawnoptions = new List<EncounterSpawnOption>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Spawnoptions.Count; loop12++)
            {
                _Spawnoptions[loop12] = new EncounterSpawnOption();
                _Spawnoptions[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOSpawn);
            serSpawnOptions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Spawnoptions.Count);
            for (int loop12 = 0; loop12 < _Spawnoptions.Count; loop12++)
            {
                _Spawnoptions[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Encounter {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOSpawn:" + SNOSpawn.ToString());
            serSpawnOptions.AsText(b, pad, "serSpawnOptions: ");
            for (int loop12 = 0; loop12 < _Spawnoptions.Count; loop12++)
            {
                _Spawnoptions[loop12].AsText(b, pad, "_Spawnoptions[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            SNOSpawn = stream.ReadValueS32();
            stream.Position = offset + 24;
            serSpawnOptions = new SerializeData();
            serSpawnOptions.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            Spawnoptions = new List<EncounterSpawnOption>();
            for (int i = 0; i < (int)(serSpawnOptions.Field1 / 16); i++)
            {
                stream.Position = serSpawnOptions.Field0 + 16 + (16 * i);
                EncounterSpawnOption temp12_Spawnoptions;
                temp12_Spawnoptions = new EncounterSpawnOption();
                temp12_Spawnoptions.FileRead(stream, stream.Position);
                _Spawnoptions.Add(temp12_Spawnoptions);
            }
        }

    }

    public class Conversation : GameMessage
    {
        int _ConversationType;
        public int ConversationType { get { return _ConversationType; } set { if (value < 0 || value > 13) throw new ArgumentOutOfRangeException(); _ConversationType = value; } }
        public int Field1;
        public int Field2;
        public int SNOQuest;
        public int Field4;
        public int Field5;
        public int SNOConvPiggyback;
        public int SNOConvUnlock;
        public int Field8;
        public string _Unknown;
        public string Unknown { get { return _Unknown; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Unknown = value; } }
        public int SNOPrimaryNpc;
        public int SNOAltNpc1;
        public int SNOAltNpc2;
        public int SNOAltNpc3;
        public int SNOAltNpc4;
        public int Field15;
        public SerializeData serRootTreeNodes;
        List<ConversationTreeNode> _RootTreeNodes;
        public List<ConversationTreeNode> RootTreeNodes { get { return _RootTreeNodes; } set { _RootTreeNodes = value; } }
        public string _Unknown2;
        public string Unknown2 { get { return _Unknown2; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Unknown2 = value; } }
        public int Field19;
        public SerializeData serCompiledScript;
        List<byte> _CompiledScript;
        public List<byte> CompiledScript { get { return _CompiledScript; } set { _CompiledScript = value; } }
        public int SNOBossEncounter;
        public override int StructSize() { return 544; }

        public override void Parse(GameBitBuffer buffer)
        {
            ConversationType = buffer.ReadInt(4);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            SNOQuest = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            SNOConvPiggyback = buffer.ReadInt(32);
            SNOConvUnlock = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Unknown = buffer.ReadCharArray(128);
            SNOPrimaryNpc = buffer.ReadInt(32);
            SNOAltNpc1 = buffer.ReadInt(32);
            SNOAltNpc2 = buffer.ReadInt(32);
            SNOAltNpc3 = buffer.ReadInt(32);
            SNOAltNpc4 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            serRootTreeNodes = new SerializeData();
            serRootTreeNodes.Parse(buffer);
            //still checking variablearrays
            this.RootTreeNodes = new List<ConversationTreeNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _RootTreeNodes.Count; loop12++)
            {
                _RootTreeNodes[loop12] = new ConversationTreeNode();
                _RootTreeNodes[loop12].Parse(buffer);
            }
            Unknown2 = buffer.ReadCharArray(256);
            Field19 = buffer.ReadInt(32);
            serCompiledScript = new SerializeData();
            serCompiledScript.Parse(buffer);
            //still checking variablearrays
            this.CompiledScript = new List<byte>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _CompiledScript.Count; loop12++)
            {
                _CompiledScript[loop12] = (byte)buffer.ReadInt(0);
            }
            SNOBossEncounter = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(4, ConversationType);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, SNOQuest);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, SNOConvPiggyback);
            buffer.WriteInt(32, SNOConvUnlock);
            buffer.WriteInt(32, Field8);
            buffer.WriteCharArray(128, Unknown);
            buffer.WriteInt(32, SNOPrimaryNpc);
            buffer.WriteInt(32, SNOAltNpc1);
            buffer.WriteInt(32, SNOAltNpc2);
            buffer.WriteInt(32, SNOAltNpc3);
            buffer.WriteInt(32, SNOAltNpc4);
            buffer.WriteInt(32, Field15);
            serRootTreeNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _RootTreeNodes.Count);
            for (int loop12 = 0; loop12 < _RootTreeNodes.Count; loop12++)
            {
                _RootTreeNodes[loop12].Encode(buffer);
            }
            buffer.WriteCharArray(256, Unknown2);
            buffer.WriteInt(32, Field19);
            serCompiledScript.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _CompiledScript.Count);
            for (int loop12 = 0; loop12 < _CompiledScript.Count; loop12++)
            {
                buffer.WriteInt(0, _CompiledScript[loop12]);
            }
            buffer.WriteInt(32, SNOBossEncounter);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Conversation {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("ConversationType:" + ConversationType.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuest:" + SNOQuest.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("SNOConvPiggyback:" + SNOConvPiggyback.ToString());
            b.Append(' ', pad); b.AppendLine("SNOConvUnlock:" + SNOConvUnlock.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Unknown:" + Unknown.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPrimaryNpc:" + SNOPrimaryNpc.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAltNpc1:" + SNOAltNpc1.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAltNpc2:" + SNOAltNpc2.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAltNpc3:" + SNOAltNpc3.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAltNpc4:" + SNOAltNpc4.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            serRootTreeNodes.AsText(b, pad, "serRootTreeNodes: ");
            for (int loop12 = 0; loop12 < _RootTreeNodes.Count; loop12++)
            {
                _RootTreeNodes[loop12].AsText(b, pad, "_RootTreeNodes[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Unknown2:" + Unknown2.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            serCompiledScript.AsText(b, pad, "serCompiledScript: ");
            for (int loop12 = 0; loop12 < _CompiledScript.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_CompiledScript[loop12]:" + _CompiledScript[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("SNOBossEncounter:" + SNOBossEncounter.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            _ConversationType = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            SNOQuest = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            SNOConvPiggyback = stream.ReadValueS32();
            stream.Position = offset + 40;
            SNOConvUnlock = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Unknown = stream.ReadString(128);
            stream.Position = offset + 176;
            SNOPrimaryNpc = stream.ReadValueS32();
            stream.Position = offset + 180;
            SNOAltNpc1 = stream.ReadValueS32();
            stream.Position = offset + 184;
            SNOAltNpc2 = stream.ReadValueS32();
            stream.Position = offset + 188;
            SNOAltNpc3 = stream.ReadValueS32();
            stream.Position = offset + 192;
            SNOAltNpc4 = stream.ReadValueS32();
            stream.Position = offset + 196;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 208;
            serRootTreeNodes = new SerializeData();
            serRootTreeNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 200;
            //still checking variablearrays
            RootTreeNodes = new List<ConversationTreeNode>();
            for (int i = 0; i < (int)(serRootTreeNodes.Field1 / 824); i++)
            {
                stream.Position = serRootTreeNodes.Field0 + 16 + (824 * i);
                ConversationTreeNode temp12_RootTreeNodes;
                temp12_RootTreeNodes = new ConversationTreeNode();
                temp12_RootTreeNodes.FileRead(stream, stream.Position);
                _RootTreeNodes.Add(temp12_RootTreeNodes);
            }
            stream.Position = offset + 216;
            Unknown2 = stream.ReadString(256);
            stream.Position = offset + 472;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 488;
            serCompiledScript = new SerializeData();
            serCompiledScript.FileRead(stream, stream.Position);
            stream.Position = offset + 480;
            //still checking variablearrays
            CompiledScript = new List<byte>();
            for (int i = 0; i < (int)(serCompiledScript.Field1 / 1); i++)
            {
                stream.Position = serCompiledScript.Field0 + 16 + (1 * i);
                byte temp12_CompiledScript;
                temp12_CompiledScript = (byte)stream.ReadByte();
                _CompiledScript.Add(temp12_CompiledScript);
            }
            stream.Position = offset + 536;
            SNOBossEncounter = stream.ReadValueS32();
        }

    }

    public class ConversationTreeNode : GameMessage
    {
        public int Field0;
        public int Field1;
        public int LineID;
        public int Speaker1;
        public int Speaker2;
        public int AnimationTag;
        ConvLocaleDisplayTimes[] _ConvLocalDisplayTimes;
        public ConvLocaleDisplayTimes[] ConvLocalDisplayTimes { get { return _ConvLocalDisplayTimes; } set { if (value != null && value.Length != 18) throw new ArgumentOutOfRangeException(); _ConvLocalDisplayTimes = value; } }
        public SerializeData serComment;
        public string Comment;
        int _Field9;
        public int Field9 { get { return _Field9; } set { if (value < -1 || value > 8) throw new ArgumentOutOfRangeException(); _Field9 = value; } }
        int _Field10;
        public int Field10 { get { return _Field10; } set { if (value < -1 || value > 8) throw new ArgumentOutOfRangeException(); _Field10 = value; } }
        public int Field11;
        public SerializeData serTrueNodes;
        List<ConversationTreeNode> _TrueNodes;
        public List<ConversationTreeNode> TrueNodes { get { return _TrueNodes; } set { _TrueNodes = value; } }
        public SerializeData serFalseNodes;
        List<ConversationTreeNode> _FalseNodes;
        public List<ConversationTreeNode> FalseNodes { get { return _FalseNodes; } set { _FalseNodes = value; } }
        public SerializeData serChildNodes;
        List<ConversationTreeNode> _ChildNodes;
        public List<ConversationTreeNode> ChildNodes { get { return _ChildNodes; } set { _ChildNodes = value; } }
        public override int StructSize() { return 824; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            LineID = buffer.ReadInt(32);
            Speaker1 = buffer.ReadInt(32);
            Speaker2 = buffer.ReadInt(32);
            AnimationTag = buffer.ReadInt(32);
            ConvLocalDisplayTimes = new ConvLocaleDisplayTimes[18];
            for (int i = 0; i < _ConvLocalDisplayTimes.Length; i++)
            {
                _ConvLocalDisplayTimes[i] = new ConvLocaleDisplayTimes();
                _ConvLocalDisplayTimes[i].Parse(buffer);
            }
            serComment = new SerializeData();
            serComment.Parse(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            Field9 = buffer.ReadInt(4) + (-1);
            Field10 = buffer.ReadInt(4) + (-1);
            Field11 = buffer.ReadInt(32);
            serTrueNodes = new SerializeData();
            serTrueNodes.Parse(buffer);
            //still checking variablearrays
            this.TrueNodes = new List<ConversationTreeNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TrueNodes.Count; loop12++)
            {
                _TrueNodes[loop12] = new ConversationTreeNode();
                _TrueNodes[loop12].Parse(buffer);
            }
            serFalseNodes = new SerializeData();
            serFalseNodes.Parse(buffer);
            //still checking variablearrays
            this.FalseNodes = new List<ConversationTreeNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _FalseNodes.Count; loop12++)
            {
                _FalseNodes[loop12] = new ConversationTreeNode();
                _FalseNodes[loop12].Parse(buffer);
            }
            serChildNodes = new SerializeData();
            serChildNodes.Parse(buffer);
            //still checking variablearrays
            this.ChildNodes = new List<ConversationTreeNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ChildNodes.Count; loop12++)
            {
                _ChildNodes[loop12] = new ConversationTreeNode();
                _ChildNodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, LineID);
            buffer.WriteInt(32, Speaker1);
            buffer.WriteInt(32, Speaker2);
            buffer.WriteInt(32, AnimationTag);
            for (int i = 0; i < _ConvLocalDisplayTimes.Length; i++) _ConvLocalDisplayTimes[i].Encode(buffer);
            serComment.Encode(buffer);
            throw new Exception("DT_CSTRING in network packets not implemented.");
            buffer.WriteInt(4, Field9 - (-1));
            buffer.WriteInt(4, Field10 - (-1));
            buffer.WriteInt(32, Field11);
            serTrueNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TrueNodes.Count);
            for (int loop12 = 0; loop12 < _TrueNodes.Count; loop12++)
            {
                _TrueNodes[loop12].Encode(buffer);
            }
            serFalseNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _FalseNodes.Count);
            for (int loop12 = 0; loop12 < _FalseNodes.Count; loop12++)
            {
                _FalseNodes[loop12].Encode(buffer);
            }
            serChildNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ChildNodes.Count);
            for (int loop12 = 0; loop12 < _ChildNodes.Count; loop12++)
            {
                _ChildNodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConversationTreeNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("LineID:" + LineID.ToString());
            b.Append(' ', pad); b.AppendLine("Speaker1:" + Speaker1.ToString());
            b.Append(' ', pad); b.AppendLine("Speaker2:" + Speaker2.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationTag:" + AnimationTag.ToString());
            for (int loop12 = 0; loop12 < _ConvLocalDisplayTimes.Length; loop12++)
            {
                _ConvLocalDisplayTimes[loop12].AsText(b, pad, "_ConvLocalDisplayTimes[loop12]: ");
            }
            serComment.AsText(b, pad, "serComment: ");
            b.Append(' ', pad); b.AppendLine("Comment:" + Comment.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            serTrueNodes.AsText(b, pad, "serTrueNodes: ");
            for (int loop12 = 0; loop12 < _TrueNodes.Count; loop12++)
            {
                _TrueNodes[loop12].AsText(b, pad, "_TrueNodes[loop12]: ");
            }
            serFalseNodes.AsText(b, pad, "serFalseNodes: ");
            for (int loop12 = 0; loop12 < _FalseNodes.Count; loop12++)
            {
                _FalseNodes[loop12].AsText(b, pad, "_FalseNodes[loop12]: ");
            }
            serChildNodes.AsText(b, pad, "serChildNodes: ");
            for (int loop12 = 0; loop12 < _ChildNodes.Count; loop12++)
            {
                _ChildNodes[loop12].AsText(b, pad, "_ChildNodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            LineID = stream.ReadValueS32();
            stream.Position = offset + 20;
            Speaker1 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Speaker2 = stream.ReadValueS32();
            stream.Position = offset + 28;
            AnimationTag = stream.ReadValueS32();
            stream.Position = offset + 32;
            ConvLocalDisplayTimes = new ConvLocaleDisplayTimes[18];
            for (int loop12 = 0; loop12 < 18; loop12++)
            {
                ConvLocaleDisplayTimes temp12_ConvLocalDisplayTimes;
                temp12_ConvLocalDisplayTimes = new ConvLocaleDisplayTimes();
                temp12_ConvLocalDisplayTimes.FileRead(stream, stream.Position);
                _ConvLocalDisplayTimes[loop12] = temp12_ConvLocalDisplayTimes;
            }
            stream.Position = offset + 760;
            serComment = new SerializeData();
            serComment.FileRead(stream, stream.Position);
            stream.Position = offset + 752;
            //still checking cstrings
            stream.Position = serComment.Field0 + 16;
            Comment = stream.ReadString((uint)serComment.Field1);
            stream.Position = offset + 12;
            _Field9 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field10 = stream.ReadValueS32();
            stream.Position = offset + 768;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 784;
            serTrueNodes = new SerializeData();
            serTrueNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 776;
            //still checking variablearrays
            TrueNodes = new List<ConversationTreeNode>();
            for (int i = 0; i < (int)(serTrueNodes.Field1 / 824); i++)
            {
                stream.Position = serTrueNodes.Field0 + 16 + (824 * i);
                ConversationTreeNode temp12_TrueNodes;
                temp12_TrueNodes = new ConversationTreeNode();
                temp12_TrueNodes.FileRead(stream, stream.Position);
                _TrueNodes.Add(temp12_TrueNodes);
            }
            stream.Position = offset + 800;
            serFalseNodes = new SerializeData();
            serFalseNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 792;
            //still checking variablearrays
            FalseNodes = new List<ConversationTreeNode>();
            for (int i = 0; i < (int)(serFalseNodes.Field1 / 824); i++)
            {
                stream.Position = serFalseNodes.Field0 + 16 + (824 * i);
                ConversationTreeNode temp12_FalseNodes;
                temp12_FalseNodes = new ConversationTreeNode();
                temp12_FalseNodes.FileRead(stream, stream.Position);
                _FalseNodes.Add(temp12_FalseNodes);
            }
            stream.Position = offset + 816;
            serChildNodes = new SerializeData();
            serChildNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 808;
            //still checking variablearrays
            ChildNodes = new List<ConversationTreeNode>();
            for (int i = 0; i < (int)(serChildNodes.Field1 / 824); i++)
            {
                stream.Position = serChildNodes.Field0 + 16 + (824 * i);
                ConversationTreeNode temp12_ChildNodes;
                temp12_ChildNodes = new ConversationTreeNode();
                temp12_ChildNodes.FileRead(stream, stream.Position);
                _ChildNodes.Add(temp12_ChildNodes);
            }
        }

    }

    public class ConversationList : GameMessage
    {
        public SerializeData serConvList;
        List<ConversationListEntry> _ConversationListEntries;
        public List<ConversationListEntry> ConversationListEntries { get { return _ConversationListEntries; } set { _ConversationListEntries = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            serConvList = new SerializeData();
            serConvList.Parse(buffer);
            //still checking variablearrays
            this.ConversationListEntries = new List<ConversationListEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ConversationListEntries.Count; loop12++)
            {
                _ConversationListEntries[loop12] = new ConversationListEntry();
                _ConversationListEntries[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serConvList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ConversationListEntries.Count);
            for (int loop12 = 0; loop12 < _ConversationListEntries.Count; loop12++)
            {
                _ConversationListEntries[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConversationList {");
            pad += 4;
            serConvList.AsText(b, pad, "serConvList: ");
            for (int loop12 = 0; loop12 < _ConversationListEntries.Count; loop12++)
            {
                _ConversationListEntries[loop12].AsText(b, pad, "_ConversationListEntries[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 24;
            serConvList = new SerializeData();
            serConvList.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            ConversationListEntries = new List<ConversationListEntry>();
            for (int i = 0; i < (int)(serConvList.Field1 / 304); i++)
            {
                stream.Position = serConvList.Field0 + 16 + (304 * i);
                ConversationListEntry temp12_ConversationListEntries;
                temp12_ConversationListEntries = new ConversationListEntry();
                temp12_ConversationListEntries.FileRead(stream, stream.Position);
                _ConversationListEntries.Add(temp12_ConversationListEntries);
            }
        }

    }

    public class FlagSet : GameMessage
    {
        public SerializeData serFlagLookups;
        List<FlagLookup> _FlagLookups;
        public List<FlagLookup> FlagLookups { get { return _FlagLookups; } set { _FlagLookups = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            serFlagLookups = new SerializeData();
            serFlagLookups.Parse(buffer);
            //still checking variablearrays
            this.FlagLookups = new List<FlagLookup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _FlagLookups.Count; loop12++)
            {
                _FlagLookups[loop12] = new FlagLookup();
                _FlagLookups[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serFlagLookups.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _FlagLookups.Count);
            for (int loop12 = 0; loop12 < _FlagLookups.Count; loop12++)
            {
                _FlagLookups[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FlagSet {");
            pad += 4;
            serFlagLookups.AsText(b, pad, "serFlagLookups: ");
            for (int loop12 = 0; loop12 < _FlagLookups.Count; loop12++)
            {
                _FlagLookups[loop12].AsText(b, pad, "_FlagLookups[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 24;
            serFlagLookups = new SerializeData();
            serFlagLookups.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            FlagLookups = new List<FlagLookup>();
            for (int i = 0; i < (int)(serFlagLookups.Field1 / 388); i++)
            {
                stream.Position = serFlagLookups.Field0 + 16 + (388 * i);
                FlagLookup temp12_FlagLookups;
                temp12_FlagLookups = new FlagLookup();
                temp12_FlagLookups.FileRead(stream, stream.Position);
                _FlagLookups.Add(temp12_FlagLookups);
            }
        }

    }

    public class LevelArea : GameMessage
    {
        public int Field0;
        public SerializeData serServerData;
        List<LevelAreaServerData> _ServerData;
        public List<LevelAreaServerData> ServerData { get { return _ServerData; } set { _ServerData = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serServerData = new SerializeData();
            serServerData.Parse(buffer);
            //still checking variablearrays
            this.ServerData = new List<LevelAreaServerData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12] = new LevelAreaServerData();
                _ServerData[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serServerData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ServerData.Count);
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LevelArea {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serServerData.AsText(b, pad, "serServerData: ");
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12].AsText(b, pad, "_ServerData[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 24;
            serServerData = new SerializeData();
            serServerData.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            ServerData = new List<LevelAreaServerData>();
            for (int i = 0; i < (int)(serServerData.Field1 / 9200); i++)
            {
                stream.Position = serServerData.Field0 + 16 + (9200 * i);
                LevelAreaServerData temp12_ServerData;
                temp12_ServerData = new LevelAreaServerData();
                temp12_ServerData.FileRead(stream, stream.Position);
                _ServerData.Add(temp12_ServerData);
            }
        }

    }

    public class LevelAreaServerData : GameMessage
    {
        int[] _Field0;
        public int[] Field0 { get { return _Field0; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int snoLevelAreaOverrideForGizmoLocs;
        public GizmoLocSet Field2;
        public int Field3;
        public SerializeData serSpawnPopulations;
        List<LevelAreaSpawnPopulation> _SpawnPopulations;
        public List<LevelAreaSpawnPopulation> SpawnPopulations { get { return _SpawnPopulations; } set { _SpawnPopulations = value; } }
        public override int StructSize() { return 9200; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new int[4];
            for (int i = 0; i < _Field0.Length; i++) _Field0[i] = buffer.ReadInt(32);
            snoLevelAreaOverrideForGizmoLocs = buffer.ReadInt(32);
            Field2 = new GizmoLocSet();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt(32);
            serSpawnPopulations = new SerializeData();
            serSpawnPopulations.Parse(buffer);
            //still checking variablearrays
            this.SpawnPopulations = new List<LevelAreaSpawnPopulation>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpawnPopulations.Count; loop12++)
            {
                _SpawnPopulations[loop12] = new LevelAreaSpawnPopulation();
                _SpawnPopulations[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _Field0.Length; i++) buffer.WriteInt(32, _Field0[i]);
            buffer.WriteInt(32, snoLevelAreaOverrideForGizmoLocs);
            Field2.Encode(buffer);
            buffer.WriteInt(32, Field3);
            serSpawnPopulations.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpawnPopulations.Count);
            for (int loop12 = 0; loop12 < _SpawnPopulations.Count; loop12++)
            {
                _SpawnPopulations[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LevelAreaServerData {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field0[loop12]:" + _Field0[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("snoLevelAreaOverrideForGizmoLocs:" + snoLevelAreaOverrideForGizmoLocs.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serSpawnPopulations.AsText(b, pad, "serSpawnPopulations: ");
            for (int loop12 = 0; loop12 < _SpawnPopulations.Count; loop12++)
            {
                _SpawnPopulations[loop12].AsText(b, pad, "_SpawnPopulations[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field0;
                temp12_Field0 = stream.ReadValueS32();
                _Field0[loop12] = temp12_Field0;
            }
            stream.Position = offset + 16;
            snoLevelAreaOverrideForGizmoLocs = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field2 = new GizmoLocSet();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 9176;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 9192;
            serSpawnPopulations = new SerializeData();
            serSpawnPopulations.FileRead(stream, stream.Position);
            stream.Position = offset + 9184;
            //still checking variablearrays
            SpawnPopulations = new List<LevelAreaSpawnPopulation>();
            for (int i = 0; i < (int)(serSpawnPopulations.Field1 / 120); i++)
            {
                stream.Position = serSpawnPopulations.Field0 + 16 + (120 * i);
                LevelAreaSpawnPopulation temp12_SpawnPopulations;
                temp12_SpawnPopulations = new LevelAreaSpawnPopulation();
                temp12_SpawnPopulations.FileRead(stream, stream.Position);
                _SpawnPopulations.Add(temp12_SpawnPopulations);
            }
        }

    }

    public class LevelAreaSpawnPopulation : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        int[] _Field2;
        public int[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int[] _Field3;
        public int[] Field3 { get { return _Field3; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public int Field4;
        public SerializeData serSpawnGroups;
        List<LevelAreaSpawnGroup> _SpawnGroups;
        public List<LevelAreaSpawnGroup> SpawnGroups { get { return _SpawnGroups; } set { _SpawnGroups = value; } }
        public override int StructSize() { return 120; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadInt(32);
            Field2 = new int[4];
            for (int i = 0; i < _Field2.Length; i++) _Field2[i] = buffer.ReadInt(32);
            Field3 = new int[4];
            for (int i = 0; i < _Field3.Length; i++) _Field3[i] = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            serSpawnGroups = new SerializeData();
            serSpawnGroups.Parse(buffer);
            //still checking variablearrays
            this.SpawnGroups = new List<LevelAreaSpawnGroup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpawnGroups.Count; loop12++)
            {
                _SpawnGroups[loop12] = new LevelAreaSpawnGroup();
                _SpawnGroups[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteInt(32, Field1);
            for (int i = 0; i < _Field2.Length; i++) buffer.WriteInt(32, _Field2[i]);
            for (int i = 0; i < _Field3.Length; i++) buffer.WriteInt(32, _Field3[i]);
            buffer.WriteInt(32, Field4);
            serSpawnGroups.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpawnGroups.Count);
            for (int loop12 = 0; loop12 < _SpawnGroups.Count; loop12++)
            {
                _SpawnGroups[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LevelAreaSpawnPopulation {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field2[loop12]:" + _Field2[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field3.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field3[loop12]:" + _Field3[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            serSpawnGroups.AsText(b, pad, "serSpawnGroups: ");
            for (int loop12 = 0; loop12 < _SpawnGroups.Count; loop12++)
            {
                _SpawnGroups[loop12].AsText(b, pad, "_SpawnGroups[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field2 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field2;
                temp12_Field2 = stream.ReadValueS32();
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 84;
            Field3 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field3;
                temp12_Field3 = stream.ReadValueS32();
                _Field3[loop12] = temp12_Field3;
            }
            stream.Position = offset + 100;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 112;
            serSpawnGroups = new SerializeData();
            serSpawnGroups.FileRead(stream, stream.Position);
            stream.Position = offset + 104;
            //still checking variablearrays
            SpawnGroups = new List<LevelAreaSpawnGroup>();
            for (int i = 0; i < (int)(serSpawnGroups.Field1 / 48); i++)
            {
                stream.Position = serSpawnGroups.Field0 + 16 + (48 * i);
                LevelAreaSpawnGroup temp12_SpawnGroups;
                temp12_SpawnGroups = new LevelAreaSpawnGroup();
                temp12_SpawnGroups.FileRead(stream, stream.Position);
                _SpawnGroups.Add(temp12_SpawnGroups);
            }
        }

    }

    public class LevelAreaSpawnGroup : GameMessage
    {
        public bool Field0;
        public float Field1;
        public float Field2;
        public int Field3;
        public int Field4;
        public SerializeData serSpawnItems;
        List<LevelAreaSpawnItem> _SpawnItems;
        public List<LevelAreaSpawnItem> SpawnItems { get { return _SpawnItems; } set { _SpawnItems = value; } }
        public int Field7;
        public int Field8;
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadBool();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            serSpawnItems = new SerializeData();
            serSpawnItems.Parse(buffer);
            //still checking variablearrays
            this.SpawnItems = new List<LevelAreaSpawnItem>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpawnItems.Count; loop12++)
            {
                _SpawnItems[loop12] = new LevelAreaSpawnItem();
                _SpawnItems[loop12].Parse(buffer);
            }
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteBool(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            serSpawnItems.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpawnItems.Count);
            for (int loop12 = 0; loop12 < _SpawnItems.Count; loop12++)
            {
                _SpawnItems[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LevelAreaSpawnGroup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            serSpawnItems.AsText(b, pad, "serSpawnItems: ");
            for (int loop12 = 0; loop12 < _SpawnItems.Count; loop12++)
            {
                _SpawnItems[loop12].AsText(b, pad, "_SpawnItems[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32() == 1;
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            serSpawnItems = new SerializeData();
            serSpawnItems.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            SpawnItems = new List<LevelAreaSpawnItem>();
            for (int i = 0; i < (int)(serSpawnItems.Field1 / 28); i++)
            {
                stream.Position = serSpawnItems.Field0 + 16 + (28 * i);
                LevelAreaSpawnItem temp12_SpawnItems;
                temp12_SpawnItems = new LevelAreaSpawnItem();
                temp12_SpawnItems.FileRead(stream, stream.Position);
                _SpawnItems.Add(temp12_SpawnItems);
            }
            stream.Position = offset + 40;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field8 = stream.ReadValueS32();
        }

    }

    public class Quest : GameMessage
    {
        int _QuestType;
        public int QuestType { get { return _QuestType; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _QuestType = value; } }
        public int NumberOfSteps;
        public int NumberOfCompletionSteps;
        public int Field3;
        public QuestUnassignedStep Field4;
        public SerializeData serQuestSteps;
        List<QuestStep> _QuestSteps;
        public List<QuestStep> QuestSteps { get { return _QuestSteps; } set { _QuestSteps = value; } }
        public SerializeData serQuestCompletionSteps;
        List<QuestCompletionStep> _QuestCompletionSteps;
        public List<QuestCompletionStep> QuestCompletionSteps { get { return _QuestCompletionSteps; } set { _QuestCompletionSteps = value; } }
        public int Field9;
        public int Field10;
        public int Field11;
        public QuestLevelRange LevelRange1;
        public QuestLevelRange LevelRange2;
        public QuestLevelRange LevelRange3;
        public QuestLevelRange LevelRange4;
        public override int StructSize() { return 144; }

        public override void Parse(GameBitBuffer buffer)
        {
            QuestType = buffer.ReadInt(2);
            NumberOfSteps = buffer.ReadInt(32);
            NumberOfCompletionSteps = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = new QuestUnassignedStep();
            Field4.Parse(buffer);
            serQuestSteps = new SerializeData();
            serQuestSteps.Parse(buffer);
            //still checking variablearrays
            this.QuestSteps = new List<QuestStep>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _QuestSteps.Count; loop12++)
            {
                _QuestSteps[loop12] = new QuestStep();
                _QuestSteps[loop12].Parse(buffer);
            }
            serQuestCompletionSteps = new SerializeData();
            serQuestCompletionSteps.Parse(buffer);
            //still checking variablearrays
            this.QuestCompletionSteps = new List<QuestCompletionStep>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _QuestCompletionSteps.Count; loop12++)
            {
                _QuestCompletionSteps[loop12] = new QuestCompletionStep();
                _QuestCompletionSteps[loop12].Parse(buffer);
            }
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            LevelRange1 = new QuestLevelRange();
            LevelRange1.Parse(buffer);
            LevelRange2 = new QuestLevelRange();
            LevelRange2.Parse(buffer);
            LevelRange3 = new QuestLevelRange();
            LevelRange3.Parse(buffer);
            LevelRange4 = new QuestLevelRange();
            LevelRange4.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(2, QuestType);
            buffer.WriteInt(32, NumberOfSteps);
            buffer.WriteInt(32, NumberOfCompletionSteps);
            buffer.WriteInt(32, Field3);
            Field4.Encode(buffer);
            serQuestSteps.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _QuestSteps.Count);
            for (int loop12 = 0; loop12 < _QuestSteps.Count; loop12++)
            {
                _QuestSteps[loop12].Encode(buffer);
            }
            serQuestCompletionSteps.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _QuestCompletionSteps.Count);
            for (int loop12 = 0; loop12 < _QuestCompletionSteps.Count; loop12++)
            {
                _QuestCompletionSteps[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            LevelRange1.Encode(buffer);
            LevelRange2.Encode(buffer);
            LevelRange3.Encode(buffer);
            LevelRange4.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Quest {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("QuestType:" + QuestType.ToString());
            b.Append(' ', pad); b.AppendLine("NumberOfSteps:" + NumberOfSteps.ToString());
            b.Append(' ', pad); b.AppendLine("NumberOfCompletionSteps:" + NumberOfCompletionSteps.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            serQuestSteps.AsText(b, pad, "serQuestSteps: ");
            for (int loop12 = 0; loop12 < _QuestSteps.Count; loop12++)
            {
                _QuestSteps[loop12].AsText(b, pad, "_QuestSteps[loop12]: ");
            }
            serQuestCompletionSteps.AsText(b, pad, "serQuestCompletionSteps: ");
            for (int loop12 = 0; loop12 < _QuestCompletionSteps.Count; loop12++)
            {
                _QuestCompletionSteps[loop12].AsText(b, pad, "_QuestCompletionSteps[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            LevelRange1.AsText(b, pad, "LevelRange1: ");
            LevelRange2.AsText(b, pad, "LevelRange2: ");
            LevelRange3.AsText(b, pad, "LevelRange3: ");
            LevelRange4.AsText(b, pad, "LevelRange4: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            _QuestType = stream.ReadValueS32();
            stream.Position = offset + 16;
            NumberOfSteps = stream.ReadValueS32();
            stream.Position = offset + 20;
            NumberOfCompletionSteps = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field4 = new QuestUnassignedStep();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            serQuestSteps = new SerializeData();
            serQuestSteps.FileRead(stream, stream.Position);
            stream.Position = offset + 80;
            //still checking variablearrays
            QuestSteps = new List<QuestStep>();
            for (int i = 0; i < (int)(serQuestSteps.Field1 / 224); i++)
            {
                stream.Position = serQuestSteps.Field0 + 16 + (224 * i);
                QuestStep temp12_QuestSteps;
                temp12_QuestSteps = new QuestStep();
                temp12_QuestSteps.FileRead(stream, stream.Position);
                _QuestSteps.Add(temp12_QuestSteps);
            }
            stream.Position = offset + 104;
            serQuestCompletionSteps = new SerializeData();
            serQuestCompletionSteps.FileRead(stream, stream.Position);
            stream.Position = offset + 96;
            //still checking variablearrays
            QuestCompletionSteps = new List<QuestCompletionStep>();
            for (int i = 0; i < (int)(serQuestCompletionSteps.Field1 / 72); i++)
            {
                stream.Position = serQuestCompletionSteps.Field0 + 16 + (72 * i);
                QuestCompletionStep temp12_QuestCompletionSteps;
                temp12_QuestCompletionSteps = new QuestCompletionStep();
                temp12_QuestCompletionSteps.FileRead(stream, stream.Position);
                _QuestCompletionSteps.Add(temp12_QuestCompletionSteps);
            }
            stream.Position = offset + 28;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 112;
            LevelRange1 = new QuestLevelRange();
            LevelRange1.FileRead(stream, stream.Position);
            stream.Position = offset + 120;
            LevelRange2 = new QuestLevelRange();
            LevelRange2.FileRead(stream, stream.Position);
            stream.Position = offset + 128;
            LevelRange3 = new QuestLevelRange();
            LevelRange3.FileRead(stream, stream.Position);
            stream.Position = offset + 136;
            LevelRange4 = new QuestLevelRange();
            LevelRange4.FileRead(stream, stream.Position);
        }

    }

    public class QuestUnassignedStep : GameMessage
    {
        public int Field0;
        public int Field1;
        public SerializeData serStepObjectiveSets;
        List<QuestStepObjectiveSet> _StepObjectiveSets;
        public List<QuestStepObjectiveSet> StepObjectiveSets { get { return _StepObjectiveSets; } set { _StepObjectiveSets = value; } }
        public SerializeData serStepFailureConditionSets;
        List<QuestStepFailureConditionSet> _StepFailureConditionSets;
        public List<QuestStepFailureConditionSet> StepFailureConditionSets { get { return _StepFailureConditionSets; } set { _StepFailureConditionSets = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            serStepObjectiveSets = new SerializeData();
            serStepObjectiveSets.Parse(buffer);
            //still checking variablearrays
            this.StepObjectiveSets = new List<QuestStepObjectiveSet>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepObjectiveSets.Count; loop12++)
            {
                _StepObjectiveSets[loop12] = new QuestStepObjectiveSet();
                _StepObjectiveSets[loop12].Parse(buffer);
            }
            serStepFailureConditionSets = new SerializeData();
            serStepFailureConditionSets.Parse(buffer);
            //still checking variablearrays
            this.StepFailureConditionSets = new List<QuestStepFailureConditionSet>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepFailureConditionSets.Count; loop12++)
            {
                _StepFailureConditionSets[loop12] = new QuestStepFailureConditionSet();
                _StepFailureConditionSets[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            serStepObjectiveSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepObjectiveSets.Count);
            for (int loop12 = 0; loop12 < _StepObjectiveSets.Count; loop12++)
            {
                _StepObjectiveSets[loop12].Encode(buffer);
            }
            serStepFailureConditionSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepFailureConditionSets.Count);
            for (int loop12 = 0; loop12 < _StepFailureConditionSets.Count; loop12++)
            {
                _StepFailureConditionSets[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestUnassignedStep {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            serStepObjectiveSets.AsText(b, pad, "serStepObjectiveSets: ");
            for (int loop12 = 0; loop12 < _StepObjectiveSets.Count; loop12++)
            {
                _StepObjectiveSets[loop12].AsText(b, pad, "_StepObjectiveSets[loop12]: ");
            }
            serStepFailureConditionSets.AsText(b, pad, "serStepFailureConditionSets: ");
            for (int loop12 = 0; loop12 < _StepFailureConditionSets.Count; loop12++)
            {
                _StepFailureConditionSets[loop12].AsText(b, pad, "_StepFailureConditionSets[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serStepObjectiveSets = new SerializeData();
            serStepObjectiveSets.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            StepObjectiveSets = new List<QuestStepObjectiveSet>();
            for (int i = 0; i < (int)(serStepObjectiveSets.Field1 / 24); i++)
            {
                stream.Position = serStepObjectiveSets.Field0 + 16 + (24 * i);
                QuestStepObjectiveSet temp12_StepObjectiveSets;
                temp12_StepObjectiveSets = new QuestStepObjectiveSet();
                temp12_StepObjectiveSets.FileRead(stream, stream.Position);
                _StepObjectiveSets.Add(temp12_StepObjectiveSets);
            }
            stream.Position = offset + 32;
            serStepFailureConditionSets = new SerializeData();
            serStepFailureConditionSets.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            StepFailureConditionSets = new List<QuestStepFailureConditionSet>();
            for (int i = 0; i < (int)(serStepFailureConditionSets.Field1 / 16); i++)
            {
                stream.Position = serStepFailureConditionSets.Field0 + 16 + (16 * i);
                QuestStepFailureConditionSet temp12_StepFailureConditionSets;
                temp12_StepFailureConditionSets = new QuestStepFailureConditionSet();
                temp12_StepFailureConditionSets.FileRead(stream, stream.Position);
                _StepFailureConditionSets.Add(temp12_StepFailureConditionSets);
            }
        }

    }

    public class QuestStepObjectiveSet : GameMessage
    {
        public int FollowUpStepID;
        public SerializeData serStepObjectives;
        List<QuestStepObjective> _StepObjectives;
        public List<QuestStepObjective> StepObjectives { get { return _StepObjectives; } set { _StepObjectives = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            FollowUpStepID = buffer.ReadInt(32);
            serStepObjectives = new SerializeData();
            serStepObjectives.Parse(buffer);
            //still checking variablearrays
            this.StepObjectives = new List<QuestStepObjective>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepObjectives.Count; loop12++)
            {
                _StepObjectives[loop12] = new QuestStepObjective();
                _StepObjectives[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, FollowUpStepID);
            serStepObjectives.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepObjectives.Count);
            for (int loop12 = 0; loop12 < _StepObjectives.Count; loop12++)
            {
                _StepObjectives[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestStepObjectiveSet {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("FollowUpStepID:" + FollowUpStepID.ToString());
            serStepObjectives.AsText(b, pad, "serStepObjectives: ");
            for (int loop12 = 0; loop12 < _StepObjectives.Count; loop12++)
            {
                _StepObjectives[loop12].AsText(b, pad, "_StepObjectives[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            FollowUpStepID = stream.ReadValueS32();
            stream.Position = offset + 16;
            serStepObjectives = new SerializeData();
            serStepObjectives.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            StepObjectives = new List<QuestStepObjective>();
            for (int i = 0; i < (int)(serStepObjectives.Field1 / 564); i++)
            {
                stream.Position = serStepObjectives.Field0 + 16 + (564 * i);
                QuestStepObjective temp12_StepObjectives;
                temp12_StepObjectives = new QuestStepObjective();
                temp12_StepObjectives.FileRead(stream, stream.Position);
                _StepObjectives.Add(temp12_StepObjectives);
            }
        }

    }

    public class QuestStepFailureConditionSet : GameMessage
    {
        public SerializeData serStepFailureConditions;
        List<QuestStepFailureCondition> _QuestStepFailureConditions;
        public List<QuestStepFailureCondition> QuestStepFailureConditions { get { return _QuestStepFailureConditions; } set { _QuestStepFailureConditions = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serStepFailureConditions = new SerializeData();
            serStepFailureConditions.Parse(buffer);
            //still checking variablearrays
            this.QuestStepFailureConditions = new List<QuestStepFailureCondition>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _QuestStepFailureConditions.Count; loop12++)
            {
                _QuestStepFailureConditions[loop12] = new QuestStepFailureCondition();
                _QuestStepFailureConditions[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serStepFailureConditions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _QuestStepFailureConditions.Count);
            for (int loop12 = 0; loop12 < _QuestStepFailureConditions.Count; loop12++)
            {
                _QuestStepFailureConditions[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestStepFailureConditionSet {");
            pad += 4;
            serStepFailureConditions.AsText(b, pad, "serStepFailureConditions: ");
            for (int loop12 = 0; loop12 < _QuestStepFailureConditions.Count; loop12++)
            {
                _QuestStepFailureConditions[loop12].AsText(b, pad, "_QuestStepFailureConditions[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 8;
            serStepFailureConditions = new SerializeData();
            serStepFailureConditions.FileRead(stream, stream.Position);
            stream.Position = offset + 0;
            //still checking variablearrays
            QuestStepFailureConditions = new List<QuestStepFailureCondition>();
            for (int i = 0; i < (int)(serStepFailureConditions.Field1 / 548); i++)
            {
                stream.Position = serStepFailureConditions.Field0 + 16 + (548 * i);
                QuestStepFailureCondition temp12_QuestStepFailureConditions;
                temp12_QuestStepFailureConditions = new QuestStepFailureCondition();
                temp12_QuestStepFailureConditions.FileRead(stream, stream.Position);
                _QuestStepFailureConditions.Add(temp12_QuestStepFailureConditions);
            }
        }

    }

    public class QuestStep : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int ID;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int[] _SNORewardRecipe;
        public int[] SNORewardRecipe { get { return _SNORewardRecipe; } set { if (value != null && value.Length != 5) throw new ArgumentOutOfRangeException(); _SNORewardRecipe = value; } }
        public int SNORewardTreasureClass;
        int[] _Field5;
        public int[] Field5 { get { return _Field5; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int Field6;
        public int Field7;
        int _Field8;
        public int Field8 { get { return _Field8; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        int[] _SNOReplayRewardRecipe;
        public int[] SNOReplayRewardRecipe { get { return _SNOReplayRewardRecipe; } set { if (value != null && value.Length != 5) throw new ArgumentOutOfRangeException(); _SNOReplayRewardRecipe = value; } }
        public int SNOReplayRewardTreasureClass;
        public int Field11;
        public int Field12;
        public SerializeData serStepObjectiveSets;
        List<QuestStepObjectiveSet> _StepObjectiveSets;
        public List<QuestStepObjectiveSet> StepObjectiveSets { get { return _StepObjectiveSets; } set { _StepObjectiveSets = value; } }
        public SerializeData serStepBonusObjectiveSets;
        List<QuestStepBonusObjectiveSet> _StepBonusObjectiveSets;
        public List<QuestStepBonusObjectiveSet> StepBonusObjectiveSets { get { return _StepBonusObjectiveSets; } set { _StepBonusObjectiveSets = value; } }
        public SerializeData serStepFailureConditionSets;
        List<QuestStepFailureConditionSet> _StepFailureConditionSets;
        public List<QuestStepFailureConditionSet> StepFailureConditionSets { get { return _StepFailureConditionSets; } set { _StepFailureConditionSets = value; } }
        public int Field19;
        public int SNOPowerGranted;
        int[] _SNOWaypointLevelAreas;
        public int[] SNOWaypointLevelAreas { get { return _SNOWaypointLevelAreas; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _SNOWaypointLevelAreas = value; } }
        public override int StructSize() { return 224; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(64);
            ID = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(2);
            SNORewardRecipe = new int[5];
            for (int i = 0; i < _SNORewardRecipe.Length; i++) _SNORewardRecipe[i] = buffer.ReadInt(32);
            SNORewardTreasureClass = buffer.ReadInt(32);
            Field5 = new int[4];
            for (int i = 0; i < _Field5.Length; i++) _Field5[i] = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(2);
            SNOReplayRewardRecipe = new int[5];
            for (int i = 0; i < _SNOReplayRewardRecipe.Length; i++) _SNOReplayRewardRecipe[i] = buffer.ReadInt(32);
            SNOReplayRewardTreasureClass = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            serStepObjectiveSets = new SerializeData();
            serStepObjectiveSets.Parse(buffer);
            //still checking variablearrays
            this.StepObjectiveSets = new List<QuestStepObjectiveSet>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepObjectiveSets.Count; loop12++)
            {
                _StepObjectiveSets[loop12] = new QuestStepObjectiveSet();
                _StepObjectiveSets[loop12].Parse(buffer);
            }
            serStepBonusObjectiveSets = new SerializeData();
            serStepBonusObjectiveSets.Parse(buffer);
            //still checking variablearrays
            this.StepBonusObjectiveSets = new List<QuestStepBonusObjectiveSet>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepBonusObjectiveSets.Count; loop12++)
            {
                _StepBonusObjectiveSets[loop12] = new QuestStepBonusObjectiveSet();
                _StepBonusObjectiveSets[loop12].Parse(buffer);
            }
            serStepFailureConditionSets = new SerializeData();
            serStepFailureConditionSets.Parse(buffer);
            //still checking variablearrays
            this.StepFailureConditionSets = new List<QuestStepFailureConditionSet>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepFailureConditionSets.Count; loop12++)
            {
                _StepFailureConditionSets[loop12] = new QuestStepFailureConditionSet();
                _StepFailureConditionSets[loop12].Parse(buffer);
            }
            Field19 = buffer.ReadInt(32);
            SNOPowerGranted = buffer.ReadInt(32);
            SNOWaypointLevelAreas = new int[2];
            for (int i = 0; i < _SNOWaypointLevelAreas.Length; i++) _SNOWaypointLevelAreas[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Name);
            buffer.WriteInt(32, ID);
            buffer.WriteInt(2, Field2);
            for (int i = 0; i < _SNORewardRecipe.Length; i++) buffer.WriteInt(32, _SNORewardRecipe[i]);
            buffer.WriteInt(32, SNORewardTreasureClass);
            for (int i = 0; i < _Field5.Length; i++) buffer.WriteInt(32, _Field5[i]);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(2, Field8);
            for (int i = 0; i < _SNOReplayRewardRecipe.Length; i++) buffer.WriteInt(32, _SNOReplayRewardRecipe[i]);
            buffer.WriteInt(32, SNOReplayRewardTreasureClass);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            serStepObjectiveSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepObjectiveSets.Count);
            for (int loop12 = 0; loop12 < _StepObjectiveSets.Count; loop12++)
            {
                _StepObjectiveSets[loop12].Encode(buffer);
            }
            serStepBonusObjectiveSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepBonusObjectiveSets.Count);
            for (int loop12 = 0; loop12 < _StepBonusObjectiveSets.Count; loop12++)
            {
                _StepBonusObjectiveSets[loop12].Encode(buffer);
            }
            serStepFailureConditionSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepFailureConditionSets.Count);
            for (int loop12 = 0; loop12 < _StepFailureConditionSets.Count; loop12++)
            {
                _StepFailureConditionSets[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field19);
            buffer.WriteInt(32, SNOPowerGranted);
            for (int i = 0; i < _SNOWaypointLevelAreas.Length; i++) buffer.WriteInt(32, _SNOWaypointLevelAreas[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestStep {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("ID:" + ID.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            for (int loop12 = 0; loop12 < _SNORewardRecipe.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SNORewardRecipe[loop12]:" + _SNORewardRecipe[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("SNORewardTreasureClass:" + SNORewardTreasureClass.ToString());
            for (int loop12 = 0; loop12 < _Field5.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field5[loop12]:" + _Field5[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            for (int loop12 = 0; loop12 < _SNOReplayRewardRecipe.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SNOReplayRewardRecipe[loop12]:" + _SNOReplayRewardRecipe[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("SNOReplayRewardTreasureClass:" + SNOReplayRewardTreasureClass.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            serStepObjectiveSets.AsText(b, pad, "serStepObjectiveSets: ");
            for (int loop12 = 0; loop12 < _StepObjectiveSets.Count; loop12++)
            {
                _StepObjectiveSets[loop12].AsText(b, pad, "_StepObjectiveSets[loop12]: ");
            }
            serStepBonusObjectiveSets.AsText(b, pad, "serStepBonusObjectiveSets: ");
            for (int loop12 = 0; loop12 < _StepBonusObjectiveSets.Count; loop12++)
            {
                _StepBonusObjectiveSets[loop12].AsText(b, pad, "_StepBonusObjectiveSets[loop12]: ");
            }
            serStepFailureConditionSets.AsText(b, pad, "serStepFailureConditionSets: ");
            for (int loop12 = 0; loop12 < _StepFailureConditionSets.Count; loop12++)
            {
                _StepFailureConditionSets[loop12].AsText(b, pad, "_StepFailureConditionSets[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPowerGranted:" + SNOPowerGranted.ToString());
            for (int loop12 = 0; loop12 < _SNOWaypointLevelAreas.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SNOWaypointLevelAreas[loop12]:" + _SNOWaypointLevelAreas[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Name = stream.ReadString(64);
            stream.Position = offset + 64;
            ID = stream.ReadValueS32();
            stream.Position = offset + 88;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 92;
            SNORewardRecipe = new int[5];
            for (int loop12 = 0; loop12 < 5; loop12++)
            {
                int temp12_SNORewardRecipe;
                temp12_SNORewardRecipe = stream.ReadValueS32();
                _SNORewardRecipe[loop12] = temp12_SNORewardRecipe;
            }
            stream.Position = offset + 112;
            SNORewardTreasureClass = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field5 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field5;
                temp12_Field5 = stream.ReadValueS32();
                _Field5[loop12] = temp12_Field5;
            }
            stream.Position = offset + 116;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 120;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 124;
            _Field8 = stream.ReadValueS32();
            stream.Position = offset + 128;
            SNOReplayRewardRecipe = new int[5];
            for (int loop12 = 0; loop12 < 5; loop12++)
            {
                int temp12_SNOReplayRewardRecipe;
                temp12_SNOReplayRewardRecipe = stream.ReadValueS32();
                _SNOReplayRewardRecipe[loop12] = temp12_SNOReplayRewardRecipe;
            }
            stream.Position = offset + 148;
            SNOReplayRewardTreasureClass = stream.ReadValueS32();
            stream.Position = offset + 152;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 184;
            serStepObjectiveSets = new SerializeData();
            serStepObjectiveSets.FileRead(stream, stream.Position);
            stream.Position = offset + 176;
            //still checking variablearrays
            StepObjectiveSets = new List<QuestStepObjectiveSet>();
            for (int i = 0; i < (int)(serStepObjectiveSets.Field1 / 24); i++)
            {
                stream.Position = serStepObjectiveSets.Field0 + 16 + (24 * i);
                QuestStepObjectiveSet temp12_StepObjectiveSets;
                temp12_StepObjectiveSets = new QuestStepObjectiveSet();
                temp12_StepObjectiveSets.FileRead(stream, stream.Position);
                _StepObjectiveSets.Add(temp12_StepObjectiveSets);
            }
            stream.Position = offset + 200;
            serStepBonusObjectiveSets = new SerializeData();
            serStepBonusObjectiveSets.FileRead(stream, stream.Position);
            stream.Position = offset + 192;
            //still checking variablearrays
            StepBonusObjectiveSets = new List<QuestStepBonusObjectiveSet>();
            for (int i = 0; i < (int)(serStepBonusObjectiveSets.Field1 / 56); i++)
            {
                stream.Position = serStepBonusObjectiveSets.Field0 + 16 + (56 * i);
                QuestStepBonusObjectiveSet temp12_StepBonusObjectiveSets;
                temp12_StepBonusObjectiveSets = new QuestStepBonusObjectiveSet();
                temp12_StepBonusObjectiveSets.FileRead(stream, stream.Position);
                _StepBonusObjectiveSets.Add(temp12_StepBonusObjectiveSets);
            }
            stream.Position = offset + 216;
            serStepFailureConditionSets = new SerializeData();
            serStepFailureConditionSets.FileRead(stream, stream.Position);
            stream.Position = offset + 208;
            //still checking variablearrays
            StepFailureConditionSets = new List<QuestStepFailureConditionSet>();
            for (int i = 0; i < (int)(serStepFailureConditionSets.Field1 / 16); i++)
            {
                stream.Position = serStepFailureConditionSets.Field0 + 16 + (16 * i);
                QuestStepFailureConditionSet temp12_StepFailureConditionSets;
                temp12_StepFailureConditionSets = new QuestStepFailureConditionSet();
                temp12_StepFailureConditionSets.FileRead(stream, stream.Position);
                _StepFailureConditionSets.Add(temp12_StepFailureConditionSets);
            }
            stream.Position = offset + 68;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 160;
            SNOPowerGranted = stream.ReadValueS32();
            stream.Position = offset + 164;
            SNOWaypointLevelAreas = new int[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                int temp12_SNOWaypointLevelAreas;
                temp12_SNOWaypointLevelAreas = stream.ReadValueS32();
                _SNOWaypointLevelAreas[loop12] = temp12_SNOWaypointLevelAreas;
            }
        }

    }

    public class QuestStepBonusObjectiveSet : GameMessage
    {
        int[] _Field0;
        public int[] Field0 { get { return _Field0; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public bool Field4;
        public bool Field5;
        public SerializeData serStepBonusObjectives;
        List<QuestStepObjective> _StepBonusObjectives;
        public List<QuestStepObjective> StepBonusObjectives { get { return _StepBonusObjectives; } set { _StepBonusObjectives = value; } }
        public override int StructSize() { return 56; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new int[4];
            for (int i = 0; i < _Field0.Length; i++) _Field0[i] = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadBool();
            Field5 = buffer.ReadBool();
            serStepBonusObjectives = new SerializeData();
            serStepBonusObjectives.Parse(buffer);
            //still checking variablearrays
            this.StepBonusObjectives = new List<QuestStepObjective>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StepBonusObjectives.Count; loop12++)
            {
                _StepBonusObjectives[loop12] = new QuestStepObjective();
                _StepBonusObjectives[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _Field0.Length; i++) buffer.WriteInt(32, _Field0[i]);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteBool(Field4);
            buffer.WriteBool(Field5);
            serStepBonusObjectives.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StepBonusObjectives.Count);
            for (int loop12 = 0; loop12 < _StepBonusObjectives.Count; loop12++)
            {
                _StepBonusObjectives[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestStepBonusObjectiveSet {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field0[loop12]:" + _Field0[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            serStepBonusObjectives.AsText(b, pad, "serStepBonusObjectives: ");
            for (int loop12 = 0; loop12 < _StepBonusObjectives.Count; loop12++)
            {
                _StepBonusObjectives[loop12].AsText(b, pad, "_StepBonusObjectives[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field0;
                temp12_Field0 = stream.ReadValueS32();
                _Field0[loop12] = temp12_Field0;
            }
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32() == 1;
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32() == 1;
            stream.Position = offset + 48;
            serStepBonusObjectives = new SerializeData();
            serStepBonusObjectives.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            //still checking variablearrays
            StepBonusObjectives = new List<QuestStepObjective>();
            for (int i = 0; i < (int)(serStepBonusObjectives.Field1 / 564); i++)
            {
                stream.Position = serStepBonusObjectives.Field0 + 16 + (564 * i);
                QuestStepObjective temp12_StepBonusObjectives;
                temp12_StepBonusObjectives = new QuestStepObjective();
                temp12_StepBonusObjectives.FileRead(stream, stream.Position);
                _StepBonusObjectives.Add(temp12_StepBonusObjectives);
            }
        }

    }

    public class SkillKit : GameMessage
    {
        public SerializeData serTraitEntries;
        List<TraitEntry> _TraitEntries;
        public List<TraitEntry> TraitEntries { get { return _TraitEntries; } set { _TraitEntries = value; } }
        public SerializeData serActiveSkillEntries;
        List<ActiveSkillEntry> _ActiveSkillEntries;
        public List<ActiveSkillEntry> ActiveSkillEntries { get { return _ActiveSkillEntries; } set { _ActiveSkillEntries = value; } }
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            serTraitEntries = new SerializeData();
            serTraitEntries.Parse(buffer);
            //still checking variablearrays
            this.TraitEntries = new List<TraitEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TraitEntries.Count; loop12++)
            {
                _TraitEntries[loop12] = new TraitEntry();
                _TraitEntries[loop12].Parse(buffer);
            }
            serActiveSkillEntries = new SerializeData();
            serActiveSkillEntries.Parse(buffer);
            //still checking variablearrays
            this.ActiveSkillEntries = new List<ActiveSkillEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActiveSkillEntries.Count; loop12++)
            {
                _ActiveSkillEntries[loop12] = new ActiveSkillEntry();
                _ActiveSkillEntries[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serTraitEntries.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TraitEntries.Count);
            for (int loop12 = 0; loop12 < _TraitEntries.Count; loop12++)
            {
                _TraitEntries[loop12].Encode(buffer);
            }
            serActiveSkillEntries.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActiveSkillEntries.Count);
            for (int loop12 = 0; loop12 < _ActiveSkillEntries.Count; loop12++)
            {
                _ActiveSkillEntries[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SkillKit {");
            pad += 4;
            serTraitEntries.AsText(b, pad, "serTraitEntries: ");
            for (int loop12 = 0; loop12 < _TraitEntries.Count; loop12++)
            {
                _TraitEntries[loop12].AsText(b, pad, "_TraitEntries[loop12]: ");
            }
            serActiveSkillEntries.AsText(b, pad, "serActiveSkillEntries: ");
            for (int loop12 = 0; loop12 < _ActiveSkillEntries.Count; loop12++)
            {
                _ActiveSkillEntries[loop12].AsText(b, pad, "_ActiveSkillEntries[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 24;
            serTraitEntries = new SerializeData();
            serTraitEntries.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            TraitEntries = new List<TraitEntry>();
            for (int i = 0; i < (int)(serTraitEntries.Field1 / 12); i++)
            {
                stream.Position = serTraitEntries.Field0 + 16 + (12 * i);
                TraitEntry temp12_TraitEntries;
                temp12_TraitEntries = new TraitEntry();
                temp12_TraitEntries.FileRead(stream, stream.Position);
                _TraitEntries.Add(temp12_TraitEntries);
            }
            stream.Position = offset + 40;
            serActiveSkillEntries = new SerializeData();
            serActiveSkillEntries.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking variablearrays
            ActiveSkillEntries = new List<ActiveSkillEntry>();
            for (int i = 0; i < (int)(serActiveSkillEntries.Field1 / 40); i++)
            {
                stream.Position = serActiveSkillEntries.Field0 + 16 + (40 * i);
                ActiveSkillEntry temp12_ActiveSkillEntries;
                temp12_ActiveSkillEntries = new ActiveSkillEntry();
                temp12_ActiveSkillEntries.FileRead(stream, stream.Position);
                _ActiveSkillEntries.Add(temp12_ActiveSkillEntries);
            }
        }

    }

    public class ActiveSkillEntry : GameMessage
    {
        public int SNOPower;
        public int Category;
        public int SkillGroup;
        public int ReqLevel;
        public int RuneNone_ReqLevel;
        public int RuneA_ReqLevel;
        public int RuneB_ReqLevel;
        public int RuneC_ReqLevel;
        public int RuneD_ReqLevel;
        public int RuneE_ReqLevel;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOPower = buffer.ReadInt(32);
            Category = buffer.ReadInt(32);
            SkillGroup = buffer.ReadInt(32);
            ReqLevel = buffer.ReadInt(32);
            RuneNone_ReqLevel = buffer.ReadInt(32);
            RuneA_ReqLevel = buffer.ReadInt(32);
            RuneB_ReqLevel = buffer.ReadInt(32);
            RuneC_ReqLevel = buffer.ReadInt(32);
            RuneD_ReqLevel = buffer.ReadInt(32);
            RuneE_ReqLevel = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOPower);
            buffer.WriteInt(32, Category);
            buffer.WriteInt(32, SkillGroup);
            buffer.WriteInt(32, ReqLevel);
            buffer.WriteInt(32, RuneNone_ReqLevel);
            buffer.WriteInt(32, RuneA_ReqLevel);
            buffer.WriteInt(32, RuneB_ReqLevel);
            buffer.WriteInt(32, RuneC_ReqLevel);
            buffer.WriteInt(32, RuneD_ReqLevel);
            buffer.WriteInt(32, RuneE_ReqLevel);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActiveSkillEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOPower:" + SNOPower.ToString());
            b.Append(' ', pad); b.AppendLine("Category:" + Category.ToString());
            b.Append(' ', pad); b.AppendLine("SkillGroup:" + SkillGroup.ToString());
            b.Append(' ', pad); b.AppendLine("ReqLevel:" + ReqLevel.ToString());
            b.Append(' ', pad); b.AppendLine("RuneNone_ReqLevel:" + RuneNone_ReqLevel.ToString());
            b.Append(' ', pad); b.AppendLine("RuneA_ReqLevel:" + RuneA_ReqLevel.ToString());
            b.Append(' ', pad); b.AppendLine("RuneB_ReqLevel:" + RuneB_ReqLevel.ToString());
            b.Append(' ', pad); b.AppendLine("RuneC_ReqLevel:" + RuneC_ReqLevel.ToString());
            b.Append(' ', pad); b.AppendLine("RuneD_ReqLevel:" + RuneD_ReqLevel.ToString());
            b.Append(' ', pad); b.AppendLine("RuneE_ReqLevel:" + RuneE_ReqLevel.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOPower = stream.ReadValueS32();
            stream.Position = offset + 4;
            Category = stream.ReadValueS32();
            stream.Position = offset + 8;
            SkillGroup = stream.ReadValueS32();
            stream.Position = offset + 12;
            ReqLevel = stream.ReadValueS32();
            stream.Position = offset + 16;
            RuneNone_ReqLevel = stream.ReadValueS32();
            stream.Position = offset + 20;
            RuneA_ReqLevel = stream.ReadValueS32();
            stream.Position = offset + 24;
            RuneB_ReqLevel = stream.ReadValueS32();
            stream.Position = offset + 28;
            RuneC_ReqLevel = stream.ReadValueS32();
            stream.Position = offset + 32;
            RuneD_ReqLevel = stream.ReadValueS32();
            stream.Position = offset + 36;
            RuneE_ReqLevel = stream.ReadValueS32();
        }

    }

    public class Monster : GameMessage
    {
        public int Field0;
        public int snoActor;
        public int Field2;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < -1 || value > 8) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 10) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < 0 || value > 6) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public int Field7;
        public int Field8;
        int[] _Field9;
        public int[] Field9 { get { return _Field9; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field9 = value; } }
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public int snoInventory;
        public int snoSecondaryInventory;
        public int snoLore;
        public HealthDropInfo Field19;
        public HealthDropInfo Field20;
        public HealthDropInfo Field21;
        public HealthDropInfo Field22;
        public int Field23;
        int _Field24;
        public int Field24 { get { return _Field24; } set { if (value < 0 || value > 6) throw new ArgumentOutOfRangeException(); _Field24 = value; } }
        float[] _Field25;
        public float[] Field25 { get { return _Field25; } set { if (value != null && value.Length != 139) throw new ArgumentOutOfRangeException(); _Field25 = value; } }
        public int snoSkillKit;
        SkillDeclaration[] _Field27;
        public SkillDeclaration[] Field27 { get { return _Field27; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Field27 = value; } }
        MonsterSkillDeclaration[] _Field28;
        public MonsterSkillDeclaration[] Field28 { get { return _Field28; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Field28 = value; } }
        public int snoTreasureClassFirstKill;
        public int snoTreasureClass;
        public int snoTreasureClassRare;
        public int snoTreasureClassChampion;
        public int snoTreasureClassChampionLight;
        public Monster2 Field34;
        public float Field35;
        public float Field36;
        public float Field37;
        public float Field38;
        public int Field39;
        public float Field40;
        public int Field41;
        public int Field42;
        int[] _arAIBehaviors;
        public int[] arAIBehaviors { get { return _arAIBehaviors; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _arAIBehaviors = value; } }
        int[] _Field44;
        public int[] Field44 { get { return _Field44; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Field44 = value; } }
        int[] _snoSummonActor;
        public int[] snoSummonActor { get { return _snoSummonActor; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _snoSummonActor = value; } }
        int[] _Field46;
        public int[] Field46 { get { return _Field46; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field46 = value; } }
        int[] _Field47;
        public int[] Field47 { get { return _Field47; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _Field47 = value; } }
        public int Field48;
        public int Field49;
        public int Field50;
        public string _Field51;
        public string Field51 { get { return _Field51; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field51 = value; } }
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public int Field54;
        public SerializeData serSpawnGroups;
        List<MonsterMinionSpawnGroup> _SpawnGroups;
        public List<MonsterMinionSpawnGroup> SpawnGroups { get { return _SpawnGroups; } set { _SpawnGroups = value; } }
        public override int StructSize() { return 1304; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            snoActor = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(4) + (-1);
            Field4 = buffer.ReadInt(4) + (-1);
            Field5 = buffer.ReadInt(4) + (-1);
            Field6 = buffer.ReadInt(3);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = new int[4];
            for (int i = 0; i < _Field9.Length; i++) _Field9[i] = buffer.ReadInt(32);
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            snoInventory = buffer.ReadInt(32);
            snoSecondaryInventory = buffer.ReadInt(32);
            snoLore = buffer.ReadInt(32);
            Field19 = new HealthDropInfo();
            Field19.Parse(buffer);
            Field20 = new HealthDropInfo();
            Field20.Parse(buffer);
            Field21 = new HealthDropInfo();
            Field21.Parse(buffer);
            Field22 = new HealthDropInfo();
            Field22.Parse(buffer);
            Field23 = buffer.ReadInt(32);
            Field24 = buffer.ReadInt(3);
            //still checking fixedarrays on basictypes
            Field25 = new float[139];
            for (int loop12 = 0; loop12 < _Field25.Length; loop12++)
            {
                _Field25[loop12] = buffer.ReadFloat32();
            }
            snoSkillKit = buffer.ReadInt(32);
            Field27 = new SkillDeclaration[8];
            for (int i = 0; i < _Field27.Length; i++)
            {
                _Field27[i] = new SkillDeclaration();
                _Field27[i].Parse(buffer);
            }
            Field28 = new MonsterSkillDeclaration[8];
            for (int i = 0; i < _Field28.Length; i++)
            {
                _Field28[i] = new MonsterSkillDeclaration();
                _Field28[i].Parse(buffer);
            }
            snoTreasureClassFirstKill = buffer.ReadInt(32);
            snoTreasureClass = buffer.ReadInt(32);
            snoTreasureClassRare = buffer.ReadInt(32);
            snoTreasureClassChampion = buffer.ReadInt(32);
            snoTreasureClassChampionLight = buffer.ReadInt(32);
            Field34 = new Monster2();
            Field34.Parse(buffer);
            Field35 = buffer.ReadFloat32();
            Field36 = buffer.ReadFloat32();
            Field37 = buffer.ReadFloat32();
            Field38 = buffer.ReadFloat32();
            Field39 = buffer.ReadInt(32);
            Field40 = buffer.ReadFloat32();
            Field41 = buffer.ReadInt(32);
            Field42 = buffer.ReadInt(32);
            arAIBehaviors = new int[6];
            for (int i = 0; i < _arAIBehaviors.Length; i++) _arAIBehaviors[i] = buffer.ReadInt(32);
            Field44 = new int[8];
            for (int i = 0; i < _Field44.Length; i++) _Field44[i] = buffer.ReadInt(32);
            snoSummonActor = new int[6];
            for (int i = 0; i < _snoSummonActor.Length; i++) _snoSummonActor[i] = buffer.ReadInt(32);
            Field46 = new int[4];
            for (int i = 0; i < _Field46.Length; i++) _Field46[i] = buffer.ReadInt(32);
            Field47 = new int[6];
            for (int i = 0; i < _Field47.Length; i++) _Field47[i] = buffer.ReadInt(32);
            Field48 = buffer.ReadInt(32);
            Field49 = buffer.ReadInt(32);
            Field50 = buffer.ReadInt(32);
            Field51 = buffer.ReadCharArray(128);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
            Field54 = buffer.ReadInt(32);
            serSpawnGroups = new SerializeData();
            serSpawnGroups.Parse(buffer);
            //still checking variablearrays
            this.SpawnGroups = new List<MonsterMinionSpawnGroup>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpawnGroups.Count; loop12++)
            {
                _SpawnGroups[loop12] = new MonsterMinionSpawnGroup();
                _SpawnGroups[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, snoActor);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(4, Field3 - (-1));
            buffer.WriteInt(4, Field4 - (-1));
            buffer.WriteInt(4, Field5 - (-1));
            buffer.WriteInt(3, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            for (int i = 0; i < _Field9.Length; i++) buffer.WriteInt(32, _Field9[i]);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteInt(32, snoInventory);
            buffer.WriteInt(32, snoSecondaryInventory);
            buffer.WriteInt(32, snoLore);
            Field19.Encode(buffer);
            Field20.Encode(buffer);
            Field21.Encode(buffer);
            Field22.Encode(buffer);
            buffer.WriteInt(32, Field23);
            buffer.WriteInt(3, Field24);
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field25.Length; loop12++)
            {
                buffer.WriteFloat32(_Field25[loop12]);
            }
            buffer.WriteInt(32, snoSkillKit);
            for (int i = 0; i < _Field27.Length; i++) _Field27[i].Encode(buffer);
            for (int i = 0; i < _Field28.Length; i++) _Field28[i].Encode(buffer);
            buffer.WriteInt(32, snoTreasureClassFirstKill);
            buffer.WriteInt(32, snoTreasureClass);
            buffer.WriteInt(32, snoTreasureClassRare);
            buffer.WriteInt(32, snoTreasureClassChampion);
            buffer.WriteInt(32, snoTreasureClassChampionLight);
            Field34.Encode(buffer);
            buffer.WriteFloat32(Field35);
            buffer.WriteFloat32(Field36);
            buffer.WriteFloat32(Field37);
            buffer.WriteFloat32(Field38);
            buffer.WriteInt(32, Field39);
            buffer.WriteFloat32(Field40);
            buffer.WriteInt(32, Field41);
            buffer.WriteInt(32, Field42);
            for (int i = 0; i < _arAIBehaviors.Length; i++) buffer.WriteInt(32, _arAIBehaviors[i]);
            for (int i = 0; i < _Field44.Length; i++) buffer.WriteInt(32, _Field44[i]);
            for (int i = 0; i < _snoSummonActor.Length; i++) buffer.WriteInt(32, _snoSummonActor[i]);
            for (int i = 0; i < _Field46.Length; i++) buffer.WriteInt(32, _Field46[i]);
            for (int i = 0; i < _Field47.Length; i++) buffer.WriteInt(32, _Field47[i]);
            buffer.WriteInt(32, Field48);
            buffer.WriteInt(32, Field49);
            buffer.WriteInt(32, Field50);
            buffer.WriteCharArray(128, Field51);
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
            buffer.WriteInt(32, Field54);
            serSpawnGroups.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpawnGroups.Count);
            for (int loop12 = 0; loop12 < _SpawnGroups.Count; loop12++)
            {
                _SpawnGroups[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Monster {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("snoActor:" + snoActor.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            for (int loop12 = 0; loop12 < _Field9.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field9[loop12]:" + _Field9[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("snoInventory:" + snoInventory.ToString());
            b.Append(' ', pad); b.AppendLine("snoSecondaryInventory:" + snoSecondaryInventory.ToString());
            b.Append(' ', pad); b.AppendLine("snoLore:" + snoLore.ToString());
            Field19.AsText(b, pad, "Field19: ");
            Field20.AsText(b, pad, "Field20: ");
            Field21.AsText(b, pad, "Field21: ");
            Field22.AsText(b, pad, "Field22: ");
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            for (int loop12 = 0; loop12 < _Field25.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field25[loop12]:" + _Field25[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("snoSkillKit:" + snoSkillKit.ToString());
            for (int loop12 = 0; loop12 < _Field27.Length; loop12++)
            {
                _Field27[loop12].AsText(b, pad, "_Field27[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _Field28.Length; loop12++)
            {
                _Field28[loop12].AsText(b, pad, "_Field28[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("snoTreasureClassFirstKill:" + snoTreasureClassFirstKill.ToString());
            b.Append(' ', pad); b.AppendLine("snoTreasureClass:" + snoTreasureClass.ToString());
            b.Append(' ', pad); b.AppendLine("snoTreasureClassRare:" + snoTreasureClassRare.ToString());
            b.Append(' ', pad); b.AppendLine("snoTreasureClassChampion:" + snoTreasureClassChampion.ToString());
            b.Append(' ', pad); b.AppendLine("snoTreasureClassChampionLight:" + snoTreasureClassChampionLight.ToString());
            Field34.AsText(b, pad, "Field34: ");
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Field38:" + Field38.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Field40:" + Field40.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            for (int loop12 = 0; loop12 < _arAIBehaviors.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_arAIBehaviors[loop12]:" + _arAIBehaviors[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field44.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field44[loop12]:" + _Field44[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _snoSummonActor.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_snoSummonActor[loop12]:" + _snoSummonActor[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field46.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field46[loop12]:" + _Field46[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field47.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field47[loop12]:" + _Field47[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field48:" + Field48.ToString());
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Field50:" + Field50.ToString());
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            b.Append(' ', pad); b.AppendLine("Field54:" + Field54.ToString());
            serSpawnGroups.AsText(b, pad, "serSpawnGroups: ");
            for (int loop12 = 0; loop12 < _SpawnGroups.Count; loop12++)
            {
                _SpawnGroups[loop12].AsText(b, pad, "_SpawnGroups[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            snoActor = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 56;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field9 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field9;
                temp12_Field9 = stream.ReadValueS32();
                _Field9[loop12] = temp12_Field9;
            }
            stream.Position = offset + 640;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 644;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 648;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 652;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 656;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 660;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 964;
            snoInventory = stream.ReadValueS32();
            stream.Position = offset + 968;
            snoSecondaryInventory = stream.ReadValueS32();
            stream.Position = offset + 972;
            snoLore = stream.ReadValueS32();
            stream.Position = offset + 668;
            Field19 = new HealthDropInfo();
            Field19.FileRead(stream, stream.Position);
            stream.Position = offset + 680;
            Field20 = new HealthDropInfo();
            Field20.FileRead(stream, stream.Position);
            stream.Position = offset + 692;
            Field21 = new HealthDropInfo();
            Field21.FileRead(stream, stream.Position);
            stream.Position = offset + 704;
            Field22 = new HealthDropInfo();
            Field22.FileRead(stream, stream.Position);
            stream.Position = offset + 664;
            Field23 = stream.ReadValueS32();
            stream.Position = offset + 1108;
            _Field24 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field25 = new float[139];
            for (int loop12 = 0; loop12 < 139; loop12++)
            {
                float temp12_Field25;
                temp12_Field25 = stream.ReadValueF32();
                _Field25[loop12] = temp12_Field25;
            }
            stream.Position = offset + 716;
            snoSkillKit = stream.ReadValueS32();
            stream.Position = offset + 720;
            Field27 = new SkillDeclaration[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                SkillDeclaration temp12_Field27;
                temp12_Field27 = new SkillDeclaration();
                temp12_Field27.FileRead(stream, stream.Position);
                _Field27[loop12] = temp12_Field27;
            }
            stream.Position = offset + 784;
            Field28 = new MonsterSkillDeclaration[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                MonsterSkillDeclaration temp12_Field28;
                temp12_Field28 = new MonsterSkillDeclaration();
                temp12_Field28.FileRead(stream, stream.Position);
                _Field28[loop12] = temp12_Field28;
            }
            stream.Position = offset + 912;
            snoTreasureClassFirstKill = stream.ReadValueS32();
            stream.Position = offset + 916;
            snoTreasureClass = stream.ReadValueS32();
            stream.Position = offset + 920;
            snoTreasureClassRare = stream.ReadValueS32();
            stream.Position = offset + 924;
            snoTreasureClassChampion = stream.ReadValueS32();
            stream.Position = offset + 928;
            snoTreasureClassChampionLight = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field34 = new Monster2();
            Field34.FileRead(stream, stream.Position);
            stream.Position = offset + 932;
            Field35 = stream.ReadValueF32();
            stream.Position = offset + 936;
            Field36 = stream.ReadValueF32();
            stream.Position = offset + 940;
            Field37 = stream.ReadValueF32();
            stream.Position = offset + 944;
            Field38 = stream.ReadValueF32();
            stream.Position = offset + 948;
            Field39 = stream.ReadValueS32();
            stream.Position = offset + 952;
            Field40 = stream.ReadValueF32();
            stream.Position = offset + 956;
            Field41 = stream.ReadValueS32();
            stream.Position = offset + 960;
            Field42 = stream.ReadValueS32();
            stream.Position = offset + 976;
            arAIBehaviors = new int[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                int temp12_arAIBehaviors;
                temp12_arAIBehaviors = stream.ReadValueS32();
                _arAIBehaviors[loop12] = temp12_arAIBehaviors;
            }
            stream.Position = offset + 1000;
            Field44 = new int[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                int temp12_Field44;
                temp12_Field44 = stream.ReadValueS32();
                _Field44[loop12] = temp12_Field44;
            }
            stream.Position = offset + 1032;
            snoSummonActor = new int[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                int temp12_snoSummonActor;
                temp12_snoSummonActor = stream.ReadValueS32();
                _snoSummonActor[loop12] = temp12_snoSummonActor;
            }
            stream.Position = offset + 1056;
            Field46 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field46;
                temp12_Field46 = stream.ReadValueS32();
                _Field46[loop12] = temp12_Field46;
            }
            stream.Position = offset + 1072;
            Field47 = new int[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                int temp12_Field47;
                temp12_Field47 = stream.ReadValueS32();
                _Field47[loop12] = temp12_Field47;
            }
            stream.Position = offset + 1096;
            Field48 = stream.ReadValueS32();
            stream.Position = offset + 1100;
            Field49 = stream.ReadValueS32();
            stream.Position = offset + 1104;
            Field50 = stream.ReadValueS32();
            stream.Position = offset + 1176;
            Field51 = stream.ReadString(128);
            stream.Position = offset + 1136;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 1144;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 1152;
            Field54 = stream.ReadValueS32();
            stream.Position = offset + 1168;
            serSpawnGroups = new SerializeData();
            serSpawnGroups.FileRead(stream, stream.Position);
            stream.Position = offset + 1160;
            //still checking variablearrays
            SpawnGroups = new List<MonsterMinionSpawnGroup>();
            for (int i = 0; i < (int)(serSpawnGroups.Field1 / 24); i++)
            {
                stream.Position = serSpawnGroups.Field0 + 16 + (24 * i);
                MonsterMinionSpawnGroup temp12_SpawnGroups;
                temp12_SpawnGroups = new MonsterMinionSpawnGroup();
                temp12_SpawnGroups.FileRead(stream, stream.Position);
                _SpawnGroups.Add(temp12_SpawnGroups);
            }
        }

    }

    public class MonsterMinionSpawnGroup : GameMessage
    {
        public float Field0;
        public int Field1;
        public SerializeData serSpawnItems;
        List<MonsterMinionSpawnItem> _SpawnItems;
        public List<MonsterMinionSpawnItem> SpawnItems { get { return _SpawnItems; } set { _SpawnItems = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadInt(32);
            serSpawnItems = new SerializeData();
            serSpawnItems.Parse(buffer);
            //still checking variablearrays
            this.SpawnItems = new List<MonsterMinionSpawnItem>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SpawnItems.Count; loop12++)
            {
                _SpawnItems[loop12] = new MonsterMinionSpawnItem();
                _SpawnItems[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteInt(32, Field1);
            serSpawnItems.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SpawnItems.Count);
            for (int loop12 = 0; loop12 < _SpawnItems.Count; loop12++)
            {
                _SpawnItems[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterMinionSpawnGroup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            serSpawnItems.AsText(b, pad, "serSpawnItems: ");
            for (int loop12 = 0; loop12 < _SpawnItems.Count; loop12++)
            {
                _SpawnItems[loop12].AsText(b, pad, "_SpawnItems[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serSpawnItems = new SerializeData();
            serSpawnItems.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            SpawnItems = new List<MonsterMinionSpawnItem>();
            for (int i = 0; i < (int)(serSpawnItems.Field1 / 20); i++)
            {
                stream.Position = serSpawnItems.Field0 + 16 + (20 * i);
                MonsterMinionSpawnItem temp12_SpawnItems;
                temp12_SpawnItems = new MonsterMinionSpawnItem();
                temp12_SpawnItems.FileRead(stream, stream.Position);
                _SpawnItems.Add(temp12_SpawnItems);
            }
        }

    }

    public class TreasureClass : GameMessage
    {
        public float Percentage;
        public int Field1;
        public int LootDropModifiersCount;
        public SerializeData serModifierList;
        List<LootDropModifier> _LootDropModifiers;
        public List<LootDropModifier> LootDropModifiers { get { return _LootDropModifiers; } set { _LootDropModifiers = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Percentage = buffer.ReadFloat32();
            Field1 = buffer.ReadInt(32);
            LootDropModifiersCount = buffer.ReadInt(32);
            serModifierList = new SerializeData();
            serModifierList.Parse(buffer);
            //still checking variablearrays
            this.LootDropModifiers = new List<LootDropModifier>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _LootDropModifiers.Count; loop12++)
            {
                _LootDropModifiers[loop12] = new LootDropModifier();
                _LootDropModifiers[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Percentage);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, LootDropModifiersCount);
            serModifierList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _LootDropModifiers.Count);
            for (int loop12 = 0; loop12 < _LootDropModifiers.Count; loop12++)
            {
                _LootDropModifiers[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TreasureClass {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Percentage:" + Percentage.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("LootDropModifiersCount:" + LootDropModifiersCount.ToString());
            serModifierList.AsText(b, pad, "serModifierList: ");
            for (int loop12 = 0; loop12 < _LootDropModifiers.Count; loop12++)
            {
                _LootDropModifiers[loop12].AsText(b, pad, "_LootDropModifiers[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Percentage = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            LootDropModifiersCount = stream.ReadValueS32();
            stream.Position = offset + 32;
            serModifierList = new SerializeData();
            serModifierList.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            LootDropModifiers = new List<LootDropModifier>();
            for (int i = 0; i < (int)(serModifierList.Field1 / 84); i++)
            {
                stream.Position = serModifierList.Field0 + 16 + (84 * i);
                LootDropModifier temp12_LootDropModifiers;
                temp12_LootDropModifiers = new LootDropModifier();
                temp12_LootDropModifiers.FileRead(stream, stream.Position);
                _LootDropModifiers.Add(temp12_LootDropModifiers);
            }
        }

    }

    public class LootDropModifier : GameMessage
    {
        public int Field0;
        public int SNOSubTreasureClass;
        public ItemSpecifierData Field2;
        public int GBIdQualityClass;
        public float Percentage;
        public int Field5;
        public int SNOCondition;
        public int Field7;
        public int Field8;
        int[] _Field9;
        public int[] Field9 { get { return _Field9; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field9 = value; } }
        public int Field10;
        public int Field11;
        public override int StructSize() { return 84; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            SNOSubTreasureClass = buffer.ReadInt(32);
            Field2 = new ItemSpecifierData();
            Field2.Parse(buffer);
            GBIdQualityClass = buffer.ReadInt(32);
            Percentage = buffer.ReadFloat32();
            Field5 = buffer.ReadInt(32);
            SNOCondition = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = new int[4];
            for (int i = 0; i < _Field9.Length; i++) _Field9[i] = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, SNOSubTreasureClass);
            Field2.Encode(buffer);
            buffer.WriteInt(32, GBIdQualityClass);
            buffer.WriteFloat32(Percentage);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, SNOCondition);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            for (int i = 0; i < _Field9.Length; i++) buffer.WriteInt(32, _Field9[i]);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LootDropModifier {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("SNOSubTreasureClass:" + SNOSubTreasureClass.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("GBIdQualityClass:" + GBIdQualityClass.ToString());
            b.Append(' ', pad); b.AppendLine("Percentage:" + Percentage.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("SNOCondition:" + SNOCondition.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            for (int loop12 = 0; loop12 < _Field9.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field9[loop12]:" + _Field9[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            SNOSubTreasureClass = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field2 = new ItemSpecifierData();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            GBIdQualityClass = stream.ReadValueS32();
            stream.Position = offset + 8;
            Percentage = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 28;
            SNOCondition = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field9 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field9;
                temp12_Field9 = stream.ReadValueS32();
                _Field9[loop12] = temp12_Field9;
            }
            stream.Position = offset + 60;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 80;
            Field11 = stream.ReadValueS32();
        }

    }

    public class BossEncounter : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int SNOQuestRange;
        public float Field11;
        int[] _Worlds;
        public int[] Worlds { get { return _Worlds; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Worlds = value; } }
        int[] _Scripts;
        public int[] Scripts { get { return _Scripts; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Scripts = value; } }
        public override int StructSize() { return 88; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            SNOQuestRange = buffer.ReadInt(32);
            Field11 = buffer.ReadFloat32();
            Worlds = new int[4];
            for (int i = 0; i < _Worlds.Length; i++) _Worlds[i] = buffer.ReadInt(32);
            Scripts = new int[3];
            for (int i = 0; i < _Scripts.Length; i++) _Scripts[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, SNOQuestRange);
            buffer.WriteFloat32(Field11);
            for (int i = 0; i < _Worlds.Length; i++) buffer.WriteInt(32, _Worlds[i]);
            for (int i = 0; i < _Scripts.Length; i++) buffer.WriteInt(32, _Scripts[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BossEncounter {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestRange:" + SNOQuestRange.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            for (int loop12 = 0; loop12 < _Worlds.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Worlds[loop12]:" + _Worlds[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Scripts.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Scripts[loop12]:" + _Scripts[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 56;
            SNOQuestRange = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Worlds = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Worlds;
                temp12_Worlds = stream.ReadValueS32();
                _Worlds[loop12] = temp12_Worlds;
            }
            stream.Position = offset + 76;
            Scripts = new int[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                int temp12_Scripts;
                temp12_Scripts = stream.ReadValueS32();
                _Scripts[loop12] = temp12_Scripts;
            }
        }

    }

    public class AssignSkillMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int SNOSkill;
        int _RuneIndex;
        public int RuneIndex { get { return _RuneIndex; } set { if (value < -1 || value > 4) throw new ArgumentOutOfRangeException(); _RuneIndex = value; } }
        int _SkillIndex;
        public int SkillIndex { get { return _SkillIndex; } set { if (value < 0 || value > 5) throw new ArgumentOutOfRangeException(); _SkillIndex = value; } }
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOSkill = buffer.ReadInt(32);
            RuneIndex = buffer.ReadInt(3) + (-1);
            SkillIndex = buffer.ReadInt(3);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, SNOSkill);
            buffer.WriteInt(3, RuneIndex - (-1));
            buffer.WriteInt(3, SkillIndex);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AssignSkillMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SNOSkill:" + SNOSkill.ToString());
            b.Append(' ', pad); b.AppendLine("RuneIndex:" + RuneIndex.ToString());
            b.Append(' ', pad); b.AppendLine("SkillIndex:" + SkillIndex.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOSkill = stream.ReadValueS32();
            stream.Position = offset + 12;
            _RuneIndex = stream.ReadValueS32();
            stream.Position = offset + 16;
            _SkillIndex = stream.ReadValueS32();
        }

    }

    public class PlayerSavedQuest : GameMessage
    {
        public int snoQuest;
        public int Field1;
        int[] _Field2;
        public int[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 20) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int[] _Field3;
        public int[] Field3 { get { return _Field3; } set { if (value != null && value.Length != 20) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 172; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoQuest = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = new int[20];
            for (int i = 0; i < _Field2.Length; i++) _Field2[i] = buffer.ReadInt(32);
            Field3 = new int[20];
            for (int i = 0; i < _Field3.Length; i++) _Field3[i] = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoQuest);
            buffer.WriteInt(32, Field1);
            for (int i = 0; i < _Field2.Length; i++) buffer.WriteInt(32, _Field2[i]);
            for (int i = 0; i < _Field3.Length; i++) buffer.WriteInt(32, _Field3[i]);
            buffer.WriteInt(2, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerSavedQuest {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoQuest:" + snoQuest.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field2[loop12]:" + _Field2[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field3.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field3[loop12]:" + _Field3[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoQuest = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new int[20];
            for (int loop12 = 0; loop12 < 20; loop12++)
            {
                int temp12_Field2;
                temp12_Field2 = stream.ReadValueS32();
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 92;
            Field3 = new int[20];
            for (int loop12 = 0; loop12 < 20; loop12++)
            {
                int temp12_Field3;
                temp12_Field3 = stream.ReadValueS32();
                _Field3[loop12] = temp12_Field3;
            }
            stream.Position = offset + 4;
            _Field4 = stream.ReadValueS32();
        }

    }

    public class GameBalance : GameMessage
    {
        public int Type;
        public string _Gbi;
        public string Gbi { get { return _Gbi; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Gbi = value; } }
        public string _Xls;
        public string Xls { get { return _Xls; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Xls = value; } }
        public int Field3;
        public int Field4;
        public Items2 ItemType;
        public Items Item;
        public ExperienceTable Experience;
        public HelpCodes2 HelpCodes;
        public MonsterLevelTable MonsterLevel;
        public Heros Heros;
        public MovementStyles MovementStyles;
        public Labels Labels;
        public AffixTable Affixes;
        public LootDistributionTable LootDistribution;
        public RareItemNamesTable RareItemNames;
        public MonsterAffixesTable MonsterAffixes;
        public RareMonsterNamesTable RareMonsterNames;
        public SocketedEffectsTable SocketedEffects;
        public ItemEnhancementTable ItemEnhancement;
        public ItemDropTable ItemDropTable;
        public ItemLevelModTable ItemLevelModifiers;
        public QualityClassTable QualityClasses;
        public Hirelings Hirelings;
        public SetItemBonusTable SetItemBonus;
        public EliteModifiers EliteModifiers;
        public ItemTiers ItemTiers;
        public PowerFormulaTable PowerFormula;
        public RecipesTable Recipes;
        public ScriptedAchievementEventsTable ScriptedAchievementEvents;
        public override int StructSize() { return 936; }

        public override void Parse(GameBitBuffer buffer)
        {
            Type = buffer.ReadInt(32);
            Gbi = buffer.ReadCharArray(256);
            Xls = buffer.ReadCharArray(256);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            ItemType = new Items2();
            ItemType.Parse(buffer);
            Item = new Items();
            Item.Parse(buffer);
            Experience = new ExperienceTable();
            Experience.Parse(buffer);
            HelpCodes = new HelpCodes2();
            HelpCodes.Parse(buffer);
            MonsterLevel = new MonsterLevelTable();
            MonsterLevel.Parse(buffer);
            Heros = new Heros();
            Heros.Parse(buffer);
            MovementStyles = new MovementStyles();
            MovementStyles.Parse(buffer);
            Labels = new Labels();
            Labels.Parse(buffer);
            Affixes = new AffixTable();
            Affixes.Parse(buffer);
            LootDistribution = new LootDistributionTable();
            LootDistribution.Parse(buffer);
            RareItemNames = new RareItemNamesTable();
            RareItemNames.Parse(buffer);
            MonsterAffixes = new MonsterAffixesTable();
            MonsterAffixes.Parse(buffer);
            RareMonsterNames = new RareMonsterNamesTable();
            RareMonsterNames.Parse(buffer);
            SocketedEffects = new SocketedEffectsTable();
            SocketedEffects.Parse(buffer);
            ItemEnhancement = new ItemEnhancementTable();
            ItemEnhancement.Parse(buffer);
            ItemDropTable = new ItemDropTable();
            ItemDropTable.Parse(buffer);
            ItemLevelModifiers = new ItemLevelModTable();
            ItemLevelModifiers.Parse(buffer);
            QualityClasses = new QualityClassTable();
            QualityClasses.Parse(buffer);
            Hirelings = new Hirelings();
            Hirelings.Parse(buffer);
            SetItemBonus = new SetItemBonusTable();
            SetItemBonus.Parse(buffer);
            EliteModifiers = new EliteModifiers();
            EliteModifiers.Parse(buffer);
            ItemTiers = new ItemTiers();
            ItemTiers.Parse(buffer);
            PowerFormula = new PowerFormulaTable();
            PowerFormula.Parse(buffer);
            Recipes = new RecipesTable();
            Recipes.Parse(buffer);
            ScriptedAchievementEvents = new ScriptedAchievementEventsTable();
            ScriptedAchievementEvents.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Type);
            buffer.WriteCharArray(256, Gbi);
            buffer.WriteCharArray(256, Xls);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            ItemType.Encode(buffer);
            Item.Encode(buffer);
            Experience.Encode(buffer);
            HelpCodes.Encode(buffer);
            MonsterLevel.Encode(buffer);
            Heros.Encode(buffer);
            MovementStyles.Encode(buffer);
            Labels.Encode(buffer);
            Affixes.Encode(buffer);
            LootDistribution.Encode(buffer);
            RareItemNames.Encode(buffer);
            MonsterAffixes.Encode(buffer);
            RareMonsterNames.Encode(buffer);
            SocketedEffects.Encode(buffer);
            ItemEnhancement.Encode(buffer);
            ItemDropTable.Encode(buffer);
            ItemLevelModifiers.Encode(buffer);
            QualityClasses.Encode(buffer);
            Hirelings.Encode(buffer);
            SetItemBonus.Encode(buffer);
            EliteModifiers.Encode(buffer);
            ItemTiers.Encode(buffer);
            PowerFormula.Encode(buffer);
            Recipes.Encode(buffer);
            ScriptedAchievementEvents.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameBalance {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            b.Append(' ', pad); b.AppendLine("Gbi:" + Gbi.ToString());
            b.Append(' ', pad); b.AppendLine("Xls:" + Xls.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            ItemType.AsText(b, pad, "ItemType: ");
            Item.AsText(b, pad, "Item: ");
            Experience.AsText(b, pad, "Experience: ");
            HelpCodes.AsText(b, pad, "HelpCodes: ");
            MonsterLevel.AsText(b, pad, "MonsterLevel: ");
            Heros.AsText(b, pad, "Heros: ");
            MovementStyles.AsText(b, pad, "MovementStyles: ");
            Labels.AsText(b, pad, "Labels: ");
            Affixes.AsText(b, pad, "Affixes: ");
            LootDistribution.AsText(b, pad, "LootDistribution: ");
            RareItemNames.AsText(b, pad, "RareItemNames: ");
            MonsterAffixes.AsText(b, pad, "MonsterAffixes: ");
            RareMonsterNames.AsText(b, pad, "RareMonsterNames: ");
            SocketedEffects.AsText(b, pad, "SocketedEffects: ");
            ItemEnhancement.AsText(b, pad, "ItemEnhancement: ");
            ItemDropTable.AsText(b, pad, "ItemDropTable: ");
            ItemLevelModifiers.AsText(b, pad, "ItemLevelModifiers: ");
            QualityClasses.AsText(b, pad, "QualityClasses: ");
            Hirelings.AsText(b, pad, "Hirelings: ");
            SetItemBonus.AsText(b, pad, "SetItemBonus: ");
            EliteModifiers.AsText(b, pad, "EliteModifiers: ");
            ItemTiers.AsText(b, pad, "ItemTiers: ");
            PowerFormula.AsText(b, pad, "PowerFormula: ");
            Recipes.AsText(b, pad, "Recipes: ");
            ScriptedAchievementEvents.AsText(b, pad, "ScriptedAchievementEvents: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Type = stream.ReadValueS32();
            stream.Position = offset + 16;
            Gbi = stream.ReadString(256);
            stream.Position = offset + 272;
            Xls = stream.ReadString(256);
            stream.Position = offset + 528;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 532;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 536;
            ItemType = new Items2();
            ItemType.FileRead(stream, stream.Position);
            stream.Position = offset + 552;
            Item = new Items();
            Item.FileRead(stream, stream.Position);
            stream.Position = offset + 568;
            Experience = new ExperienceTable();
            Experience.FileRead(stream, stream.Position);
            stream.Position = offset + 584;
            HelpCodes = new HelpCodes2();
            HelpCodes.FileRead(stream, stream.Position);
            stream.Position = offset + 600;
            MonsterLevel = new MonsterLevelTable();
            MonsterLevel.FileRead(stream, stream.Position);
            stream.Position = offset + 632;
            Heros = new Heros();
            Heros.FileRead(stream, stream.Position);
            stream.Position = offset + 648;
            MovementStyles = new MovementStyles();
            MovementStyles.FileRead(stream, stream.Position);
            stream.Position = offset + 664;
            Labels = new Labels();
            Labels.FileRead(stream, stream.Position);
            stream.Position = offset + 616;
            Affixes = new AffixTable();
            Affixes.FileRead(stream, stream.Position);
            stream.Position = offset + 680;
            LootDistribution = new LootDistributionTable();
            LootDistribution.FileRead(stream, stream.Position);
            stream.Position = offset + 696;
            RareItemNames = new RareItemNamesTable();
            RareItemNames.FileRead(stream, stream.Position);
            stream.Position = offset + 712;
            MonsterAffixes = new MonsterAffixesTable();
            MonsterAffixes.FileRead(stream, stream.Position);
            stream.Position = offset + 728;
            RareMonsterNames = new RareMonsterNamesTable();
            RareMonsterNames.FileRead(stream, stream.Position);
            stream.Position = offset + 744;
            SocketedEffects = new SocketedEffectsTable();
            SocketedEffects.FileRead(stream, stream.Position);
            stream.Position = offset + 760;
            ItemEnhancement = new ItemEnhancementTable();
            ItemEnhancement.FileRead(stream, stream.Position);
            stream.Position = offset + 776;
            ItemDropTable = new ItemDropTable();
            ItemDropTable.FileRead(stream, stream.Position);
            stream.Position = offset + 792;
            ItemLevelModifiers = new ItemLevelModTable();
            ItemLevelModifiers.FileRead(stream, stream.Position);
            stream.Position = offset + 808;
            QualityClasses = new QualityClassTable();
            QualityClasses.FileRead(stream, stream.Position);
            stream.Position = offset + 824;
            Hirelings = new Hirelings();
            Hirelings.FileRead(stream, stream.Position);
            stream.Position = offset + 840;
            SetItemBonus = new SetItemBonusTable();
            SetItemBonus.FileRead(stream, stream.Position);
            stream.Position = offset + 856;
            EliteModifiers = new EliteModifiers();
            EliteModifiers.FileRead(stream, stream.Position);
            stream.Position = offset + 872;
            ItemTiers = new ItemTiers();
            ItemTiers.FileRead(stream, stream.Position);
            stream.Position = offset + 888;
            PowerFormula = new PowerFormulaTable();
            PowerFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 904;
            Recipes = new RecipesTable();
            Recipes.FileRead(stream, stream.Position);
            stream.Position = offset + 920;
            ScriptedAchievementEvents = new ScriptedAchievementEventsTable();
            ScriptedAchievementEvents.FileRead(stream, stream.Position);
        }

    }

    public class ItemType : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int ParentType;
        public int Field2;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 26) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < 0 || value > 26) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < 0 || value > 26) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < 0 || value > 26) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public bool Field7;
        public bool Field8;
        public bool Field9;
        public bool Field10;
        public bool Field11;
        public bool Field12;
        public bool Field13;
        public bool Field14;
        public bool Field15;
        public bool Field16;
        public bool Field17;
        public bool Field18;
        public bool Field19;
        public bool Field20;
        public int InherentAffix1;
        public int InherentAffix2;
        public int InherentAffix3;
        public int InherentAffixFamily1;
        int[] _Field25;
        public int[] Field25 { get { return _Field25; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field25 = value; } }
        public override int StructSize() { return 320; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            ParentType = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(5);
            Field4 = buffer.ReadInt(5);
            Field5 = buffer.ReadInt(5);
            Field6 = buffer.ReadInt(5);
            Field7 = buffer.ReadBool();
            Field8 = buffer.ReadBool();
            Field9 = buffer.ReadBool();
            Field10 = buffer.ReadBool();
            Field11 = buffer.ReadBool();
            Field12 = buffer.ReadBool();
            Field13 = buffer.ReadBool();
            Field14 = buffer.ReadBool();
            Field15 = buffer.ReadBool();
            Field16 = buffer.ReadBool();
            Field17 = buffer.ReadBool();
            Field18 = buffer.ReadBool();
            Field19 = buffer.ReadBool();
            Field20 = buffer.ReadBool();
            InherentAffix1 = buffer.ReadInt(32);
            InherentAffix2 = buffer.ReadInt(32);
            InherentAffix3 = buffer.ReadInt(32);
            InherentAffixFamily1 = buffer.ReadInt(32);
            Field25 = new int[4];
            for (int i = 0; i < _Field25.Length; i++) _Field25[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, ParentType);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(5, Field3);
            buffer.WriteInt(5, Field4);
            buffer.WriteInt(5, Field5);
            buffer.WriteInt(5, Field6);
            buffer.WriteBool(Field7);
            buffer.WriteBool(Field8);
            buffer.WriteBool(Field9);
            buffer.WriteBool(Field10);
            buffer.WriteBool(Field11);
            buffer.WriteBool(Field12);
            buffer.WriteBool(Field13);
            buffer.WriteBool(Field14);
            buffer.WriteBool(Field15);
            buffer.WriteBool(Field16);
            buffer.WriteBool(Field17);
            buffer.WriteBool(Field18);
            buffer.WriteBool(Field19);
            buffer.WriteBool(Field20);
            buffer.WriteInt(32, InherentAffix1);
            buffer.WriteInt(32, InherentAffix2);
            buffer.WriteInt(32, InherentAffix3);
            buffer.WriteInt(32, InherentAffixFamily1);
            for (int i = 0; i < _Field25.Length; i++) buffer.WriteInt(32, _Field25[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemType {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("ParentType:" + ParentType.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("InherentAffix1:" + InherentAffix1.ToString());
            b.Append(' ', pad); b.AppendLine("InherentAffix2:" + InherentAffix2.ToString());
            b.Append(' ', pad); b.AppendLine("InherentAffix3:" + InherentAffix3.ToString());
            b.Append(' ', pad); b.AppendLine("InherentAffixFamily1:" + InherentAffixFamily1.ToString());
            for (int loop12 = 0; loop12 < _Field25.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field25[loop12]:" + _Field25[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            ParentType = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 272;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 276;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 280;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 284;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field7 = ((stream.ReadValueS32() >> 0) & 1) == 1;
            stream.Position = offset + 268;
            Field8 = ((stream.ReadValueS32() >> 12) & 1) == 1;
            stream.Position = offset + 268;
            Field9 = ((stream.ReadValueS32() >> 1) & 1) == 1;
            stream.Position = offset + 268;
            Field10 = ((stream.ReadValueS32() >> 3) & 1) == 1;
            stream.Position = offset + 268;
            Field11 = ((stream.ReadValueS32() >> 6) & 1) == 1;
            stream.Position = offset + 268;
            Field12 = ((stream.ReadValueS32() >> 7) & 1) == 1;
            stream.Position = offset + 268;
            Field13 = ((stream.ReadValueS32() >> 8) & 1) == 1;
            stream.Position = offset + 268;
            Field14 = ((stream.ReadValueS32() >> 9) & 1) == 1;
            stream.Position = offset + 268;
            Field15 = ((stream.ReadValueS32() >> 10) & 1) == 1;
            stream.Position = offset + 268;
            Field16 = ((stream.ReadValueS32() >> 13) & 1) == 1;
            stream.Position = offset + 268;
            Field17 = ((stream.ReadValueS32() >> 11) & 1) == 1;
            stream.Position = offset + 268;
            Field18 = ((stream.ReadValueS32() >> 14) & 1) == 1;
            stream.Position = offset + 268;
            Field19 = ((stream.ReadValueS32() >> 15) & 1) == 1;
            stream.Position = offset + 268;
            Field20 = ((stream.ReadValueS32() >> 16) & 1) == 1;
            stream.Position = offset + 288;
            InherentAffix1 = stream.ReadValueS32();
            stream.Position = offset + 292;
            InherentAffix2 = stream.ReadValueS32();
            stream.Position = offset + 296;
            InherentAffix3 = stream.ReadValueS32();
            stream.Position = offset + 300;
            InherentAffixFamily1 = stream.ReadValueS32();
            stream.Position = offset + 304;
            Field25 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field25;
                temp12_Field25 = stream.ReadValueS32();
                _Field25[loop12] = temp12_Field25;
            }
        }

    }

    public class Item : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Actor;
        public int ItemType1;
        public int Field3;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 1000) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public int Field13;
        public int Field14;
        public int BaseItem;
        public int Set;
        public int ComponentTreasureClass;
        public int ComponentTreasureClassMagic;
        public int ComponentTreasureClassRare;
        public int RareNamePrefixStringList;
        public int RareNameSuffixStringList;
        public bool Field22;
        public bool Field23;
        public bool Field24;
        public bool Field25;
        public bool Field26;
        public bool Field27;
        public bool Field28;
        public bool Field29;
        public int Field30;
        public float Field31;
        public float Field32;
        public float Field33;
        public float Field34;
        public float Field35;
        public float Field36;
        public float Field37;
        public int Skill0;
        public int Field39;
        public int Skill1;
        public int Field41;
        public int Skill2;
        public int Field43;
        public int Skill3;
        public int Field45;
        int[] _Field46;
        public int[] Field46 { get { return _Field46; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field46 = value; } }
        public int Field47;
        public int AttributeParam1;
        public SerializeData ptAttributes_0__serAttributeFormula;
        List<byte> _ptAttributes_0__AttributeFormula;
        public List<byte> ptAttributes_0__AttributeFormula { get { return _ptAttributes_0__AttributeFormula; } set { _ptAttributes_0__AttributeFormula = value; } }
        public int Field51;
        public int AttributeParam2;
        public SerializeData ptAttributes_1__serAttributeFormula;
        List<byte> _ptAttributes_1__AttributeFormula;
        public List<byte> ptAttributes_1__AttributeFormula { get { return _ptAttributes_1__AttributeFormula; } set { _ptAttributes_1__AttributeFormula = value; } }
        public int Field55;
        public int AttributeParam3;
        public SerializeData ptAttributes_2__serAttributeFormula;
        List<byte> _ptAttributes_2__AttributeFormula;
        public List<byte> ptAttributes_2__AttributeFormula { get { return _ptAttributes_2__AttributeFormula; } set { _ptAttributes_2__AttributeFormula = value; } }
        public int Field59;
        public int AttributeParam4;
        public SerializeData ptAttributes_3__serAttributeFormula;
        List<byte> _ptAttributes_3__AttributeFormula;
        public List<byte> ptAttributes_3__AttributeFormula { get { return _ptAttributes_3__AttributeFormula; } set { _ptAttributes_3__AttributeFormula = value; } }
        public int Field63;
        public int AttributeParam5;
        public SerializeData ptAttributes_4__serAttributeFormula;
        List<byte> _ptAttributes_4__AttributeFormula;
        public List<byte> ptAttributes_4__AttributeFormula { get { return _ptAttributes_4__AttributeFormula; } set { _ptAttributes_4__AttributeFormula = value; } }
        public int Field67;
        public int AttributeParam6;
        public SerializeData ptAttributes_5__serAttributeFormula;
        List<byte> _ptAttributes_5__AttributeFormula;
        public List<byte> ptAttributes_5__AttributeFormula { get { return _ptAttributes_5__AttributeFormula; } set { _ptAttributes_5__AttributeFormula = value; } }
        public int Field71;
        public int AttributeParam7;
        public SerializeData ptAttributes_6__serAttributeFormula;
        List<byte> _ptAttributes_6__AttributeFormula;
        public List<byte> ptAttributes_6__AttributeFormula { get { return _ptAttributes_6__AttributeFormula; } set { _ptAttributes_6__AttributeFormula = value; } }
        public int Field75;
        public int AttributeParam8;
        public SerializeData ptAttributes_7__serAttributeFormula;
        List<byte> _ptAttributes_7__AttributeFormula;
        public List<byte> ptAttributes_7__AttributeFormula { get { return _ptAttributes_7__AttributeFormula; } set { _ptAttributes_7__AttributeFormula = value; } }
        public int Field79;
        public int AttributeParam9;
        public SerializeData ptAttributes_8__serAttributeFormula;
        List<byte> _ptAttributes_8__AttributeFormula;
        public List<byte> ptAttributes_8__AttributeFormula { get { return _ptAttributes_8__AttributeFormula; } set { _ptAttributes_8__AttributeFormula = value; } }
        public int Field83;
        public int AttributeParam10;
        public SerializeData ptAttributes_9__serAttributeFormula;
        List<byte> _ptAttributes_9__AttributeFormula;
        public List<byte> ptAttributes_9__AttributeFormula { get { return _ptAttributes_9__AttributeFormula; } set { _ptAttributes_9__AttributeFormula = value; } }
        public int Field87;
        public int AttributeParam11;
        public SerializeData ptAttributes_10__serAttributeFormula;
        List<byte> _ptAttributes_10__AttributeFormula;
        public List<byte> ptAttributes_10__AttributeFormula { get { return _ptAttributes_10__AttributeFormula; } set { _ptAttributes_10__AttributeFormula = value; } }
        public int Field91;
        public int AttributeParam12;
        public SerializeData ptAttributes_11__serAttributeFormula;
        List<byte> _ptAttributes_11__AttributeFormula;
        public List<byte> ptAttributes_11__AttributeFormula { get { return _ptAttributes_11__AttributeFormula; } set { _ptAttributes_11__AttributeFormula = value; } }
        public int Field95;
        public int AttributeParam13;
        public SerializeData ptAttributes_12__serAttributeFormula;
        List<byte> _ptAttributes_12__AttributeFormula;
        public List<byte> ptAttributes_12__AttributeFormula { get { return _ptAttributes_12__AttributeFormula; } set { _ptAttributes_12__AttributeFormula = value; } }
        public int Field99;
        public int AttributeParam14;
        public SerializeData ptAttributes_13__serAttributeFormula;
        List<byte> _ptAttributes_13__AttributeFormula;
        public List<byte> ptAttributes_13__AttributeFormula { get { return _ptAttributes_13__AttributeFormula; } set { _ptAttributes_13__AttributeFormula = value; } }
        public int Field103;
        public int AttributeParam15;
        public SerializeData ptAttributes_14__serAttributeFormula;
        List<byte> _ptAttributes_14__AttributeFormula;
        public List<byte> ptAttributes_14__AttributeFormula { get { return _ptAttributes_14__AttributeFormula; } set { _ptAttributes_14__AttributeFormula = value; } }
        public int Field107;
        public int AttributeParam16;
        public SerializeData ptAttributes_15__serAttributeFormula;
        List<byte> _ptAttributes_15__AttributeFormula;
        public List<byte> ptAttributes_15__AttributeFormula { get { return _ptAttributes_15__AttributeFormula; } set { _ptAttributes_15__AttributeFormula = value; } }
        int _Field111;
        public int Field111 { get { return _Field111; } set { if (value < -1 || value > 10) throw new ArgumentOutOfRangeException(); _Field111 = value; } }
        int[] _RecipeToGrant;
        public int[] RecipeToGrant { get { return _RecipeToGrant; } set { if (value != null && value.Length != 10) throw new ArgumentOutOfRangeException(); _RecipeToGrant = value; } }
        public int EnhancementToGrant;
        public int LegendaryAffixFamily1;
        public int LegendaryAffixFamily2;
        public int LegendaryAffixFamily3;
        public int LegendaryAffixFamily4;
        public int LegendaryAffixFamily5;
        public int LegendaryAffixFamily6;
        public int Field120;
        public int Field121;
        public int Field122;
        public int Field123;
        public int Field124;
        public int Field125;
        public int Field126;
        public int Field127;
        public int Field128;
        public int Field129;
        public int Field130;
        public int Field131;
        int _Field132;
        public int Field132 { get { return _Field132; } set { if (value < 1 || value > 4) throw new ArgumentOutOfRangeException(); _Field132 = value; } }
        public int Field133;
        int _Field134;
        public int Field134 { get { return _Field134; } set { if (value < 1 || value > 4) throw new ArgumentOutOfRangeException(); _Field134 = value; } }
        public override int StructSize() { return 1520; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Actor = buffer.ReadInt(32);
            ItemType1 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(10) + (-1);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadInt(32);
            BaseItem = buffer.ReadInt(32);
            Set = buffer.ReadInt(32);
            ComponentTreasureClass = buffer.ReadInt(32);
            ComponentTreasureClassMagic = buffer.ReadInt(32);
            ComponentTreasureClassRare = buffer.ReadInt(32);
            RareNamePrefixStringList = buffer.ReadInt(32);
            RareNameSuffixStringList = buffer.ReadInt(32);
            Field22 = buffer.ReadBool();
            Field23 = buffer.ReadBool();
            Field24 = buffer.ReadBool();
            Field25 = buffer.ReadBool();
            Field26 = buffer.ReadBool();
            Field27 = buffer.ReadBool();
            Field28 = buffer.ReadBool();
            Field29 = buffer.ReadBool();
            Field30 = buffer.ReadInt(32);
            Field31 = buffer.ReadFloat32();
            Field32 = buffer.ReadFloat32();
            Field33 = buffer.ReadFloat32();
            Field34 = buffer.ReadFloat32();
            Field35 = buffer.ReadFloat32();
            Field36 = buffer.ReadFloat32();
            Field37 = buffer.ReadFloat32();
            Skill0 = buffer.ReadInt(32);
            Field39 = buffer.ReadInt(32);
            Skill1 = buffer.ReadInt(32);
            Field41 = buffer.ReadInt(32);
            Skill2 = buffer.ReadInt(32);
            Field43 = buffer.ReadInt(32);
            Skill3 = buffer.ReadInt(32);
            Field45 = buffer.ReadInt(32);
            Field46 = new int[4];
            for (int i = 0; i < _Field46.Length; i++) _Field46[i] = buffer.ReadInt(32);
            Field47 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_0__serAttributeFormula = new SerializeData();
            ptAttributes_0__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field51 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_1__serAttributeFormula = new SerializeData();
            ptAttributes_1__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field55 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_2__serAttributeFormula = new SerializeData();
            ptAttributes_2__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field59 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_3__serAttributeFormula = new SerializeData();
            ptAttributes_3__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field63 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_4__serAttributeFormula = new SerializeData();
            ptAttributes_4__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field67 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_5__serAttributeFormula = new SerializeData();
            ptAttributes_5__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field71 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_6__serAttributeFormula = new SerializeData();
            ptAttributes_6__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field75 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_7__serAttributeFormula = new SerializeData();
            ptAttributes_7__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field79 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_8__serAttributeFormula = new SerializeData();
            ptAttributes_8__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field83 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_9__serAttributeFormula = new SerializeData();
            ptAttributes_9__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field87 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_10__serAttributeFormula = new SerializeData();
            ptAttributes_10__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field91 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_11__serAttributeFormula = new SerializeData();
            ptAttributes_11__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field95 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_12__serAttributeFormula = new SerializeData();
            ptAttributes_12__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field99 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_13__serAttributeFormula = new SerializeData();
            ptAttributes_13__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field103 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_14__serAttributeFormula = new SerializeData();
            ptAttributes_14__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field107 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_15__serAttributeFormula = new SerializeData();
            ptAttributes_15__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field111 = buffer.ReadInt(4) + (-1);
            RecipeToGrant = new int[10];
            for (int i = 0; i < _RecipeToGrant.Length; i++) _RecipeToGrant[i] = buffer.ReadInt(32);
            EnhancementToGrant = buffer.ReadInt(32);
            LegendaryAffixFamily1 = buffer.ReadInt(32);
            LegendaryAffixFamily2 = buffer.ReadInt(32);
            LegendaryAffixFamily3 = buffer.ReadInt(32);
            LegendaryAffixFamily4 = buffer.ReadInt(32);
            LegendaryAffixFamily5 = buffer.ReadInt(32);
            LegendaryAffixFamily6 = buffer.ReadInt(32);
            Field120 = buffer.ReadInt(32);
            Field121 = buffer.ReadInt(32);
            Field122 = buffer.ReadInt(32);
            Field123 = buffer.ReadInt(32);
            Field124 = buffer.ReadInt(32);
            Field125 = buffer.ReadInt(32);
            Field126 = buffer.ReadInt(32);
            Field127 = buffer.ReadInt(32);
            Field128 = buffer.ReadInt(32);
            Field129 = buffer.ReadInt(32);
            Field130 = buffer.ReadInt(32);
            Field131 = buffer.ReadInt(32);
            Field132 = buffer.ReadInt(2) + (1);
            Field133 = buffer.ReadInt(32);
            Field134 = buffer.ReadInt(2) + (1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Actor);
            buffer.WriteInt(32, ItemType1);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(10, Field4 - (-1));
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, BaseItem);
            buffer.WriteInt(32, Set);
            buffer.WriteInt(32, ComponentTreasureClass);
            buffer.WriteInt(32, ComponentTreasureClassMagic);
            buffer.WriteInt(32, ComponentTreasureClassRare);
            buffer.WriteInt(32, RareNamePrefixStringList);
            buffer.WriteInt(32, RareNameSuffixStringList);
            buffer.WriteBool(Field22);
            buffer.WriteBool(Field23);
            buffer.WriteBool(Field24);
            buffer.WriteBool(Field25);
            buffer.WriteBool(Field26);
            buffer.WriteBool(Field27);
            buffer.WriteBool(Field28);
            buffer.WriteBool(Field29);
            buffer.WriteInt(32, Field30);
            buffer.WriteFloat32(Field31);
            buffer.WriteFloat32(Field32);
            buffer.WriteFloat32(Field33);
            buffer.WriteFloat32(Field34);
            buffer.WriteFloat32(Field35);
            buffer.WriteFloat32(Field36);
            buffer.WriteFloat32(Field37);
            buffer.WriteInt(32, Skill0);
            buffer.WriteInt(32, Field39);
            buffer.WriteInt(32, Skill1);
            buffer.WriteInt(32, Field41);
            buffer.WriteInt(32, Skill2);
            buffer.WriteInt(32, Field43);
            buffer.WriteInt(32, Skill3);
            buffer.WriteInt(32, Field45);
            for (int i = 0; i < _Field46.Length; i++) buffer.WriteInt(32, _Field46[i]);
            buffer.WriteInt(0, Field47);
            buffer.WriteInt(32, AttributeParam1);
            ptAttributes_0__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field51);
            buffer.WriteInt(32, AttributeParam2);
            ptAttributes_1__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field55);
            buffer.WriteInt(32, AttributeParam3);
            ptAttributes_2__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field59);
            buffer.WriteInt(32, AttributeParam4);
            ptAttributes_3__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field63);
            buffer.WriteInt(32, AttributeParam5);
            ptAttributes_4__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field67);
            buffer.WriteInt(32, AttributeParam6);
            ptAttributes_5__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field71);
            buffer.WriteInt(32, AttributeParam7);
            ptAttributes_6__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field75);
            buffer.WriteInt(32, AttributeParam8);
            ptAttributes_7__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field79);
            buffer.WriteInt(32, AttributeParam9);
            ptAttributes_8__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field83);
            buffer.WriteInt(32, AttributeParam10);
            ptAttributes_9__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field87);
            buffer.WriteInt(32, AttributeParam11);
            ptAttributes_10__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field91);
            buffer.WriteInt(32, AttributeParam12);
            ptAttributes_11__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field95);
            buffer.WriteInt(32, AttributeParam13);
            ptAttributes_12__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field99);
            buffer.WriteInt(32, AttributeParam14);
            ptAttributes_13__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field103);
            buffer.WriteInt(32, AttributeParam15);
            ptAttributes_14__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field107);
            buffer.WriteInt(32, AttributeParam16);
            ptAttributes_15__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(4, Field111 - (-1));
            for (int i = 0; i < _RecipeToGrant.Length; i++) buffer.WriteInt(32, _RecipeToGrant[i]);
            buffer.WriteInt(32, EnhancementToGrant);
            buffer.WriteInt(32, LegendaryAffixFamily1);
            buffer.WriteInt(32, LegendaryAffixFamily2);
            buffer.WriteInt(32, LegendaryAffixFamily3);
            buffer.WriteInt(32, LegendaryAffixFamily4);
            buffer.WriteInt(32, LegendaryAffixFamily5);
            buffer.WriteInt(32, LegendaryAffixFamily6);
            buffer.WriteInt(32, Field120);
            buffer.WriteInt(32, Field121);
            buffer.WriteInt(32, Field122);
            buffer.WriteInt(32, Field123);
            buffer.WriteInt(32, Field124);
            buffer.WriteInt(32, Field125);
            buffer.WriteInt(32, Field126);
            buffer.WriteInt(32, Field127);
            buffer.WriteInt(32, Field128);
            buffer.WriteInt(32, Field129);
            buffer.WriteInt(32, Field130);
            buffer.WriteInt(32, Field131);
            buffer.WriteInt(2, Field132 - (1));
            buffer.WriteInt(32, Field133);
            buffer.WriteInt(2, Field134 - (1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Item {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Actor:" + Actor.ToString());
            b.Append(' ', pad); b.AppendLine("ItemType1:" + ItemType1.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("BaseItem:" + BaseItem.ToString());
            b.Append(' ', pad); b.AppendLine("Set:" + Set.ToString());
            b.Append(' ', pad); b.AppendLine("ComponentTreasureClass:" + ComponentTreasureClass.ToString());
            b.Append(' ', pad); b.AppendLine("ComponentTreasureClassMagic:" + ComponentTreasureClassMagic.ToString());
            b.Append(' ', pad); b.AppendLine("ComponentTreasureClassRare:" + ComponentTreasureClassRare.ToString());
            b.Append(' ', pad); b.AppendLine("RareNamePrefixStringList:" + RareNamePrefixStringList.ToString());
            b.Append(' ', pad); b.AppendLine("RareNameSuffixStringList:" + RareNameSuffixStringList.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Field34:" + Field34.ToString());
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Skill0:" + Skill0.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Skill1:" + Skill1.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Skill2:" + Skill2.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            b.Append(' ', pad); b.AppendLine("Skill3:" + Skill3.ToString());
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            for (int loop12 = 0; loop12 < _Field46.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field46[loop12]:" + _Field46[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field47:" + Field47.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam1:" + AttributeParam1.ToString());
            ptAttributes_0__serAttributeFormula.AsText(b, pad, "ptAttributes_0__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_0__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_0__AttributeFormula[loop12]:" + _ptAttributes_0__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam2:" + AttributeParam2.ToString());
            ptAttributes_1__serAttributeFormula.AsText(b, pad, "ptAttributes_1__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_1__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_1__AttributeFormula[loop12]:" + _ptAttributes_1__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field55:" + Field55.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam3:" + AttributeParam3.ToString());
            ptAttributes_2__serAttributeFormula.AsText(b, pad, "ptAttributes_2__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_2__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_2__AttributeFormula[loop12]:" + _ptAttributes_2__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field59:" + Field59.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam4:" + AttributeParam4.ToString());
            ptAttributes_3__serAttributeFormula.AsText(b, pad, "ptAttributes_3__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_3__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_3__AttributeFormula[loop12]:" + _ptAttributes_3__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field63:" + Field63.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam5:" + AttributeParam5.ToString());
            ptAttributes_4__serAttributeFormula.AsText(b, pad, "ptAttributes_4__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_4__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_4__AttributeFormula[loop12]:" + _ptAttributes_4__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field67:" + Field67.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam6:" + AttributeParam6.ToString());
            ptAttributes_5__serAttributeFormula.AsText(b, pad, "ptAttributes_5__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_5__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_5__AttributeFormula[loop12]:" + _ptAttributes_5__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field71:" + Field71.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam7:" + AttributeParam7.ToString());
            ptAttributes_6__serAttributeFormula.AsText(b, pad, "ptAttributes_6__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_6__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_6__AttributeFormula[loop12]:" + _ptAttributes_6__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field75:" + Field75.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam8:" + AttributeParam8.ToString());
            ptAttributes_7__serAttributeFormula.AsText(b, pad, "ptAttributes_7__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_7__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_7__AttributeFormula[loop12]:" + _ptAttributes_7__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field79:" + Field79.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam9:" + AttributeParam9.ToString());
            ptAttributes_8__serAttributeFormula.AsText(b, pad, "ptAttributes_8__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_8__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_8__AttributeFormula[loop12]:" + _ptAttributes_8__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field83:" + Field83.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam10:" + AttributeParam10.ToString());
            ptAttributes_9__serAttributeFormula.AsText(b, pad, "ptAttributes_9__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_9__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_9__AttributeFormula[loop12]:" + _ptAttributes_9__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field87:" + Field87.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam11:" + AttributeParam11.ToString());
            ptAttributes_10__serAttributeFormula.AsText(b, pad, "ptAttributes_10__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_10__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_10__AttributeFormula[loop12]:" + _ptAttributes_10__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field91:" + Field91.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam12:" + AttributeParam12.ToString());
            ptAttributes_11__serAttributeFormula.AsText(b, pad, "ptAttributes_11__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_11__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_11__AttributeFormula[loop12]:" + _ptAttributes_11__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field95:" + Field95.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam13:" + AttributeParam13.ToString());
            ptAttributes_12__serAttributeFormula.AsText(b, pad, "ptAttributes_12__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_12__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_12__AttributeFormula[loop12]:" + _ptAttributes_12__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field99:" + Field99.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam14:" + AttributeParam14.ToString());
            ptAttributes_13__serAttributeFormula.AsText(b, pad, "ptAttributes_13__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_13__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_13__AttributeFormula[loop12]:" + _ptAttributes_13__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field103:" + Field103.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam15:" + AttributeParam15.ToString());
            ptAttributes_14__serAttributeFormula.AsText(b, pad, "ptAttributes_14__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_14__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_14__AttributeFormula[loop12]:" + _ptAttributes_14__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field107:" + Field107.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam16:" + AttributeParam16.ToString());
            ptAttributes_15__serAttributeFormula.AsText(b, pad, "ptAttributes_15__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_15__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_15__AttributeFormula[loop12]:" + _ptAttributes_15__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field111:" + Field111.ToString());
            for (int loop12 = 0; loop12 < _RecipeToGrant.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_RecipeToGrant[loop12]:" + _RecipeToGrant[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("EnhancementToGrant:" + EnhancementToGrant.ToString());
            b.Append(' ', pad); b.AppendLine("LegendaryAffixFamily1:" + LegendaryAffixFamily1.ToString());
            b.Append(' ', pad); b.AppendLine("LegendaryAffixFamily2:" + LegendaryAffixFamily2.ToString());
            b.Append(' ', pad); b.AppendLine("LegendaryAffixFamily3:" + LegendaryAffixFamily3.ToString());
            b.Append(' ', pad); b.AppendLine("LegendaryAffixFamily4:" + LegendaryAffixFamily4.ToString());
            b.Append(' ', pad); b.AppendLine("LegendaryAffixFamily5:" + LegendaryAffixFamily5.ToString());
            b.Append(' ', pad); b.AppendLine("LegendaryAffixFamily6:" + LegendaryAffixFamily6.ToString());
            b.Append(' ', pad); b.AppendLine("Field120:" + Field120.ToString());
            b.Append(' ', pad); b.AppendLine("Field121:" + Field121.ToString());
            b.Append(' ', pad); b.AppendLine("Field122:" + Field122.ToString());
            b.Append(' ', pad); b.AppendLine("Field123:" + Field123.ToString());
            b.Append(' ', pad); b.AppendLine("Field124:" + Field124.ToString());
            b.Append(' ', pad); b.AppendLine("Field125:" + Field125.ToString());
            b.Append(' ', pad); b.AppendLine("Field126:" + Field126.ToString());
            b.Append(' ', pad); b.AppendLine("Field127:" + Field127.ToString());
            b.Append(' ', pad); b.AppendLine("Field128:" + Field128.ToString());
            b.Append(' ', pad); b.AppendLine("Field129:" + Field129.ToString());
            b.Append(' ', pad); b.AppendLine("Field130:" + Field130.ToString());
            b.Append(' ', pad); b.AppendLine("Field131:" + Field131.ToString());
            b.Append(' ', pad); b.AppendLine("Field132:" + Field132.ToString());
            b.Append(' ', pad); b.AppendLine("Field133:" + Field133.ToString());
            b.Append(' ', pad); b.AppendLine("Field134:" + Field134.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Actor = stream.ReadValueS32();
            stream.Position = offset + 264;
            ItemType1 = stream.ReadValueS32();
            stream.Position = offset + 276;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 280;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 288;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 292;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 296;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 300;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 316;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 320;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 304;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 308;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 312;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 324;
            BaseItem = stream.ReadValueS32();
            stream.Position = offset + 328;
            Set = stream.ReadValueS32();
            stream.Position = offset + 332;
            ComponentTreasureClass = stream.ReadValueS32();
            stream.Position = offset + 336;
            ComponentTreasureClassMagic = stream.ReadValueS32();
            stream.Position = offset + 340;
            ComponentTreasureClassRare = stream.ReadValueS32();
            stream.Position = offset + 344;
            RareNamePrefixStringList = stream.ReadValueS32();
            stream.Position = offset + 348;
            RareNameSuffixStringList = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field22 = ((stream.ReadValueS32() >> 0) & 1) == 1;
            stream.Position = offset + 268;
            Field23 = ((stream.ReadValueS32() >> 1) & 1) == 1;
            stream.Position = offset + 268;
            Field24 = ((stream.ReadValueS32() >> 2) & 1) == 1;
            stream.Position = offset + 268;
            Field25 = ((stream.ReadValueS32() >> 3) & 1) == 1;
            stream.Position = offset + 268;
            Field26 = ((stream.ReadValueS32() >> 4) & 1) == 1;
            stream.Position = offset + 268;
            Field27 = ((stream.ReadValueS32() >> 5) & 1) == 1;
            stream.Position = offset + 268;
            Field28 = ((stream.ReadValueS32() >> 7) & 1) == 1;
            stream.Position = offset + 268;
            Field29 = ((stream.ReadValueS32() >> 6) & 1) == 1;
            stream.Position = offset + 272;
            Field30 = stream.ReadValueS32();
            stream.Position = offset + 456;
            Field31 = stream.ReadValueF32();
            stream.Position = offset + 460;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 812;
            Field33 = stream.ReadValueF32();
            stream.Position = offset + 816;
            Field34 = stream.ReadValueF32();
            stream.Position = offset + 724;
            Field35 = stream.ReadValueF32();
            stream.Position = offset + 548;
            Field36 = stream.ReadValueF32();
            stream.Position = offset + 552;
            Field37 = stream.ReadValueF32();
            stream.Position = offset + 924;
            Skill0 = stream.ReadValueS32();
            stream.Position = offset + 928;
            Field39 = stream.ReadValueS32();
            stream.Position = offset + 932;
            Skill1 = stream.ReadValueS32();
            stream.Position = offset + 936;
            Field41 = stream.ReadValueS32();
            stream.Position = offset + 940;
            Skill2 = stream.ReadValueS32();
            stream.Position = offset + 944;
            Field43 = stream.ReadValueS32();
            stream.Position = offset + 948;
            Skill3 = stream.ReadValueS32();
            stream.Position = offset + 952;
            Field45 = stream.ReadValueS32();
            stream.Position = offset + 352;
            Field46 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field46;
                temp12_Field46 = stream.ReadValueS32();
                _Field46[loop12] = temp12_Field46;
            }
            stream.Position = offset + 1000;
            Field47 = stream.ReadValueS32();
            stream.Position = offset + 1004;
            AttributeParam1 = stream.ReadValueS32();
            stream.Position = offset + 1016;
            ptAttributes_0__serAttributeFormula = new SerializeData();
            ptAttributes_0__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1008;
            //still checking variablearrays
            ptAttributes_0__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_0__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_0__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_0__AttributeFormula;
                temp12_ptAttributes_0__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_0__AttributeFormula.Add(temp12_ptAttributes_0__AttributeFormula);
            }
            stream.Position = offset + 1024;
            Field51 = stream.ReadValueS32();
            stream.Position = offset + 1028;
            AttributeParam2 = stream.ReadValueS32();
            stream.Position = offset + 1040;
            ptAttributes_1__serAttributeFormula = new SerializeData();
            ptAttributes_1__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1032;
            //still checking variablearrays
            ptAttributes_1__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_1__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_1__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_1__AttributeFormula;
                temp12_ptAttributes_1__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_1__AttributeFormula.Add(temp12_ptAttributes_1__AttributeFormula);
            }
            stream.Position = offset + 1048;
            Field55 = stream.ReadValueS32();
            stream.Position = offset + 1052;
            AttributeParam3 = stream.ReadValueS32();
            stream.Position = offset + 1064;
            ptAttributes_2__serAttributeFormula = new SerializeData();
            ptAttributes_2__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1056;
            //still checking variablearrays
            ptAttributes_2__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_2__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_2__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_2__AttributeFormula;
                temp12_ptAttributes_2__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_2__AttributeFormula.Add(temp12_ptAttributes_2__AttributeFormula);
            }
            stream.Position = offset + 1072;
            Field59 = stream.ReadValueS32();
            stream.Position = offset + 1076;
            AttributeParam4 = stream.ReadValueS32();
            stream.Position = offset + 1088;
            ptAttributes_3__serAttributeFormula = new SerializeData();
            ptAttributes_3__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1080;
            //still checking variablearrays
            ptAttributes_3__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_3__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_3__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_3__AttributeFormula;
                temp12_ptAttributes_3__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_3__AttributeFormula.Add(temp12_ptAttributes_3__AttributeFormula);
            }
            stream.Position = offset + 1096;
            Field63 = stream.ReadValueS32();
            stream.Position = offset + 1100;
            AttributeParam5 = stream.ReadValueS32();
            stream.Position = offset + 1112;
            ptAttributes_4__serAttributeFormula = new SerializeData();
            ptAttributes_4__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1104;
            //still checking variablearrays
            ptAttributes_4__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_4__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_4__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_4__AttributeFormula;
                temp12_ptAttributes_4__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_4__AttributeFormula.Add(temp12_ptAttributes_4__AttributeFormula);
            }
            stream.Position = offset + 1120;
            Field67 = stream.ReadValueS32();
            stream.Position = offset + 1124;
            AttributeParam6 = stream.ReadValueS32();
            stream.Position = offset + 1136;
            ptAttributes_5__serAttributeFormula = new SerializeData();
            ptAttributes_5__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1128;
            //still checking variablearrays
            ptAttributes_5__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_5__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_5__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_5__AttributeFormula;
                temp12_ptAttributes_5__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_5__AttributeFormula.Add(temp12_ptAttributes_5__AttributeFormula);
            }
            stream.Position = offset + 1144;
            Field71 = stream.ReadValueS32();
            stream.Position = offset + 1148;
            AttributeParam7 = stream.ReadValueS32();
            stream.Position = offset + 1160;
            ptAttributes_6__serAttributeFormula = new SerializeData();
            ptAttributes_6__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1152;
            //still checking variablearrays
            ptAttributes_6__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_6__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_6__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_6__AttributeFormula;
                temp12_ptAttributes_6__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_6__AttributeFormula.Add(temp12_ptAttributes_6__AttributeFormula);
            }
            stream.Position = offset + 1168;
            Field75 = stream.ReadValueS32();
            stream.Position = offset + 1172;
            AttributeParam8 = stream.ReadValueS32();
            stream.Position = offset + 1184;
            ptAttributes_7__serAttributeFormula = new SerializeData();
            ptAttributes_7__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1176;
            //still checking variablearrays
            ptAttributes_7__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_7__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_7__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_7__AttributeFormula;
                temp12_ptAttributes_7__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_7__AttributeFormula.Add(temp12_ptAttributes_7__AttributeFormula);
            }
            stream.Position = offset + 1192;
            Field79 = stream.ReadValueS32();
            stream.Position = offset + 1196;
            AttributeParam9 = stream.ReadValueS32();
            stream.Position = offset + 1208;
            ptAttributes_8__serAttributeFormula = new SerializeData();
            ptAttributes_8__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1200;
            //still checking variablearrays
            ptAttributes_8__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_8__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_8__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_8__AttributeFormula;
                temp12_ptAttributes_8__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_8__AttributeFormula.Add(temp12_ptAttributes_8__AttributeFormula);
            }
            stream.Position = offset + 1216;
            Field83 = stream.ReadValueS32();
            stream.Position = offset + 1220;
            AttributeParam10 = stream.ReadValueS32();
            stream.Position = offset + 1232;
            ptAttributes_9__serAttributeFormula = new SerializeData();
            ptAttributes_9__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1224;
            //still checking variablearrays
            ptAttributes_9__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_9__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_9__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_9__AttributeFormula;
                temp12_ptAttributes_9__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_9__AttributeFormula.Add(temp12_ptAttributes_9__AttributeFormula);
            }
            stream.Position = offset + 1240;
            Field87 = stream.ReadValueS32();
            stream.Position = offset + 1244;
            AttributeParam11 = stream.ReadValueS32();
            stream.Position = offset + 1256;
            ptAttributes_10__serAttributeFormula = new SerializeData();
            ptAttributes_10__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1248;
            //still checking variablearrays
            ptAttributes_10__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_10__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_10__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_10__AttributeFormula;
                temp12_ptAttributes_10__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_10__AttributeFormula.Add(temp12_ptAttributes_10__AttributeFormula);
            }
            stream.Position = offset + 1264;
            Field91 = stream.ReadValueS32();
            stream.Position = offset + 1268;
            AttributeParam12 = stream.ReadValueS32();
            stream.Position = offset + 1280;
            ptAttributes_11__serAttributeFormula = new SerializeData();
            ptAttributes_11__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1272;
            //still checking variablearrays
            ptAttributes_11__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_11__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_11__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_11__AttributeFormula;
                temp12_ptAttributes_11__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_11__AttributeFormula.Add(temp12_ptAttributes_11__AttributeFormula);
            }
            stream.Position = offset + 1288;
            Field95 = stream.ReadValueS32();
            stream.Position = offset + 1292;
            AttributeParam13 = stream.ReadValueS32();
            stream.Position = offset + 1304;
            ptAttributes_12__serAttributeFormula = new SerializeData();
            ptAttributes_12__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1296;
            //still checking variablearrays
            ptAttributes_12__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_12__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_12__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_12__AttributeFormula;
                temp12_ptAttributes_12__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_12__AttributeFormula.Add(temp12_ptAttributes_12__AttributeFormula);
            }
            stream.Position = offset + 1312;
            Field99 = stream.ReadValueS32();
            stream.Position = offset + 1316;
            AttributeParam14 = stream.ReadValueS32();
            stream.Position = offset + 1328;
            ptAttributes_13__serAttributeFormula = new SerializeData();
            ptAttributes_13__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1320;
            //still checking variablearrays
            ptAttributes_13__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_13__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_13__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_13__AttributeFormula;
                temp12_ptAttributes_13__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_13__AttributeFormula.Add(temp12_ptAttributes_13__AttributeFormula);
            }
            stream.Position = offset + 1336;
            Field103 = stream.ReadValueS32();
            stream.Position = offset + 1340;
            AttributeParam15 = stream.ReadValueS32();
            stream.Position = offset + 1352;
            ptAttributes_14__serAttributeFormula = new SerializeData();
            ptAttributes_14__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1344;
            //still checking variablearrays
            ptAttributes_14__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_14__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_14__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_14__AttributeFormula;
                temp12_ptAttributes_14__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_14__AttributeFormula.Add(temp12_ptAttributes_14__AttributeFormula);
            }
            stream.Position = offset + 1360;
            Field107 = stream.ReadValueS32();
            stream.Position = offset + 1364;
            AttributeParam16 = stream.ReadValueS32();
            stream.Position = offset + 1376;
            ptAttributes_15__serAttributeFormula = new SerializeData();
            ptAttributes_15__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 1368;
            //still checking variablearrays
            ptAttributes_15__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_15__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_15__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_15__AttributeFormula;
                temp12_ptAttributes_15__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_15__AttributeFormula.Add(temp12_ptAttributes_15__AttributeFormula);
            }
            stream.Position = offset + 1384;
            _Field111 = stream.ReadValueS32();
            stream.Position = offset + 1388;
            RecipeToGrant = new int[10];
            for (int loop12 = 0; loop12 < 10; loop12++)
            {
                int temp12_RecipeToGrant;
                temp12_RecipeToGrant = stream.ReadValueS32();
                _RecipeToGrant[loop12] = temp12_RecipeToGrant;
            }
            stream.Position = offset + 1428;
            EnhancementToGrant = stream.ReadValueS32();
            stream.Position = offset + 1432;
            LegendaryAffixFamily1 = stream.ReadValueS32();
            stream.Position = offset + 1436;
            LegendaryAffixFamily2 = stream.ReadValueS32();
            stream.Position = offset + 1440;
            LegendaryAffixFamily3 = stream.ReadValueS32();
            stream.Position = offset + 1444;
            LegendaryAffixFamily4 = stream.ReadValueS32();
            stream.Position = offset + 1448;
            LegendaryAffixFamily5 = stream.ReadValueS32();
            stream.Position = offset + 1452;
            LegendaryAffixFamily6 = stream.ReadValueS32();
            stream.Position = offset + 1456;
            Field120 = stream.ReadValueS32();
            stream.Position = offset + 1460;
            Field121 = stream.ReadValueS32();
            stream.Position = offset + 1464;
            Field122 = stream.ReadValueS32();
            stream.Position = offset + 1468;
            Field123 = stream.ReadValueS32();
            stream.Position = offset + 1472;
            Field124 = stream.ReadValueS32();
            stream.Position = offset + 1476;
            Field125 = stream.ReadValueS32();
            stream.Position = offset + 1480;
            Field126 = stream.ReadValueS32();
            stream.Position = offset + 1484;
            Field127 = stream.ReadValueS32();
            stream.Position = offset + 1488;
            Field128 = stream.ReadValueS32();
            stream.Position = offset + 1492;
            Field129 = stream.ReadValueS32();
            stream.Position = offset + 1496;
            Field130 = stream.ReadValueS32();
            stream.Position = offset + 1500;
            Field131 = stream.ReadValueS32();
            stream.Position = offset + 1504;
            _Field132 = stream.ReadValueS32();
            stream.Position = offset + 1508;
            Field133 = stream.ReadValueS32();
            stream.Position = offset + 1512;
            _Field134 = stream.ReadValueS32();
        }

    }

    public class ExperienceLevel : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public float Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public int Field13;
        public int Field14;
        public int Field15;
        public int Field16;
        public int Field17;
        public int Field18;
        public float Field19;
        public int Field20;
        public int Field21;
        public int Field22;
        public int Field23;
        public int Field24;
        public int Field25;
        public int Field26;
        public int Field27;
        public int Field28;
        public int Field29;
        public int Field30;
        public int Field31;
        public int Field32;
        public int Field33;
        public int Field34;
        public int Field35;
        public int Field36;
        public int Field37;
        public int Field38;
        public int Field39;
        public int Field40;
        public int Field41;
        public int Field42;
        public int Field43;
        public float Field44;
        public int Field45;
        public int Field46;
        public int Field47;
        public int Field48;
        public float Field49;
        public int Field50;
        public int Field51;
        public int Field52;
        public int Field53;
        public float Field54;
        public override int StructSize() { return 240; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadInt(32);
            Field22 = buffer.ReadInt(32);
            Field23 = buffer.ReadInt(32);
            Field24 = buffer.ReadInt(32);
            Field25 = buffer.ReadInt(32);
            Field26 = buffer.ReadInt(32);
            Field27 = buffer.ReadInt(32);
            Field28 = buffer.ReadInt(32);
            Field29 = buffer.ReadInt(32);
            Field30 = buffer.ReadInt(32);
            Field31 = buffer.ReadInt(32);
            Field32 = buffer.ReadInt(32);
            Field33 = buffer.ReadInt(32);
            Field34 = buffer.ReadInt(32);
            Field35 = buffer.ReadInt(32);
            Field36 = buffer.ReadInt(32);
            Field37 = buffer.ReadInt(32);
            Field38 = buffer.ReadInt(32);
            Field39 = buffer.ReadInt(32);
            Field40 = buffer.ReadInt(32);
            Field41 = buffer.ReadInt(32);
            Field42 = buffer.ReadInt(32);
            Field43 = buffer.ReadInt(32);
            Field44 = buffer.ReadFloat32();
            Field45 = buffer.ReadInt(32);
            Field46 = buffer.ReadInt(32);
            Field47 = buffer.ReadInt(32);
            Field48 = buffer.ReadInt(32);
            Field49 = buffer.ReadFloat32();
            Field50 = buffer.ReadInt(32);
            Field51 = buffer.ReadInt(32);
            Field52 = buffer.ReadInt(32);
            Field53 = buffer.ReadInt(32);
            Field54 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(32, Field22);
            buffer.WriteInt(32, Field23);
            buffer.WriteInt(32, Field24);
            buffer.WriteInt(32, Field25);
            buffer.WriteInt(32, Field26);
            buffer.WriteInt(32, Field27);
            buffer.WriteInt(32, Field28);
            buffer.WriteInt(32, Field29);
            buffer.WriteInt(32, Field30);
            buffer.WriteInt(32, Field31);
            buffer.WriteInt(32, Field32);
            buffer.WriteInt(32, Field33);
            buffer.WriteInt(32, Field34);
            buffer.WriteInt(32, Field35);
            buffer.WriteInt(32, Field36);
            buffer.WriteInt(32, Field37);
            buffer.WriteInt(32, Field38);
            buffer.WriteInt(32, Field39);
            buffer.WriteInt(32, Field40);
            buffer.WriteInt(32, Field41);
            buffer.WriteInt(32, Field42);
            buffer.WriteInt(32, Field43);
            buffer.WriteFloat32(Field44);
            buffer.WriteInt(32, Field45);
            buffer.WriteInt(32, Field46);
            buffer.WriteInt(32, Field47);
            buffer.WriteInt(32, Field48);
            buffer.WriteFloat32(Field49);
            buffer.WriteInt(32, Field50);
            buffer.WriteInt(32, Field51);
            buffer.WriteInt(32, Field52);
            buffer.WriteInt(32, Field53);
            buffer.WriteFloat32(Field54);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ExperienceLevel {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Field34:" + Field34.ToString());
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Field38:" + Field38.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Field40:" + Field40.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            b.Append(' ', pad); b.AppendLine("Field44:" + Field44.ToString());
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            b.Append(' ', pad); b.AppendLine("Field46:" + Field46.ToString());
            b.Append(' ', pad); b.AppendLine("Field47:" + Field47.ToString());
            b.Append(' ', pad); b.AppendLine("Field48:" + Field48.ToString());
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Field50:" + Field50.ToString());
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            b.Append(' ', pad); b.AppendLine("Field52:" + Field52.ToString());
            b.Append(' ', pad); b.AppendLine("Field53:" + Field53.ToString());
            b.Append(' ', pad); b.AppendLine("Field54:" + Field54.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 88;
            Field22 = stream.ReadValueS32();
            stream.Position = offset + 92;
            Field23 = stream.ReadValueS32();
            stream.Position = offset + 96;
            Field24 = stream.ReadValueS32();
            stream.Position = offset + 100;
            Field25 = stream.ReadValueS32();
            stream.Position = offset + 104;
            Field26 = stream.ReadValueS32();
            stream.Position = offset + 108;
            Field27 = stream.ReadValueS32();
            stream.Position = offset + 112;
            Field28 = stream.ReadValueS32();
            stream.Position = offset + 116;
            Field29 = stream.ReadValueS32();
            stream.Position = offset + 120;
            Field30 = stream.ReadValueS32();
            stream.Position = offset + 124;
            Field31 = stream.ReadValueS32();
            stream.Position = offset + 128;
            Field32 = stream.ReadValueS32();
            stream.Position = offset + 132;
            Field33 = stream.ReadValueS32();
            stream.Position = offset + 136;
            Field34 = stream.ReadValueS32();
            stream.Position = offset + 140;
            Field35 = stream.ReadValueS32();
            stream.Position = offset + 144;
            Field36 = stream.ReadValueS32();
            stream.Position = offset + 148;
            Field37 = stream.ReadValueS32();
            stream.Position = offset + 152;
            Field38 = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field39 = stream.ReadValueS32();
            stream.Position = offset + 176;
            Field40 = stream.ReadValueS32();
            stream.Position = offset + 180;
            Field41 = stream.ReadValueS32();
            stream.Position = offset + 184;
            Field42 = stream.ReadValueS32();
            stream.Position = offset + 188;
            Field43 = stream.ReadValueS32();
            stream.Position = offset + 228;
            Field44 = stream.ReadValueF32();
            stream.Position = offset + 192;
            Field45 = stream.ReadValueS32();
            stream.Position = offset + 196;
            Field46 = stream.ReadValueS32();
            stream.Position = offset + 200;
            Field47 = stream.ReadValueS32();
            stream.Position = offset + 204;
            Field48 = stream.ReadValueS32();
            stream.Position = offset + 232;
            Field49 = stream.ReadValueF32();
            stream.Position = offset + 208;
            Field50 = stream.ReadValueS32();
            stream.Position = offset + 212;
            Field51 = stream.ReadValueS32();
            stream.Position = offset + 216;
            Field52 = stream.ReadValueS32();
            stream.Position = offset + 220;
            Field53 = stream.ReadValueS32();
            stream.Position = offset + 236;
            Field54 = stream.ReadValueF32();
        }

    }

    public class HeroData : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int MaleActor;
        public int FemaleActor;
        public int Inventory_SNO;
        public int Field4;
        public int StartingLMBSkill;
        public int StartingRMBSkill;
        public int SkillKit0;
        public int SkillKit1;
        public int SkillKit2;
        public int SkillKit3;
        public float Field11;
        public int Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        int _Field21;
        public int Field21 { get { return _Field21; } set { if (value < 0 || value > 6) throw new ArgumentOutOfRangeException(); _Field21 = value; } }
        int _Field22;
        public int Field22 { get { return _Field22; } set { if (value < 0 || value > 6) throw new ArgumentOutOfRangeException(); _Field22 = value; } }
        int _Field23;
        public int Field23 { get { return _Field23; } set { if (value < -1 || value > 2) throw new ArgumentOutOfRangeException(); _Field23 = value; } }
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public float Field28;
        public float Field29;
        public float Field30;
        public float Field31;
        public float Field32;
        public float Field33;
        public float Field34;
        public float Field35;
        public float Field36;
        public float Field37;
        public float Field38;
        public float Field39;
        public float Field40;
        public float Field41;
        public float Field42;
        public float Field43;
        public float Field44;
        public float Field45;
        public float Field46;
        public float Field47;
        public float Field48;
        public float Field49;
        public float Field50;
        public float Field51;
        public float Field52;
        public float Field53;
        public float Field54;
        public float Field55;
        public float Field56;
        public float Field57;
        public float Field58;
        public override int StructSize() { return 876; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            MaleActor = buffer.ReadInt(32);
            FemaleActor = buffer.ReadInt(32);
            Inventory_SNO = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            StartingLMBSkill = buffer.ReadInt(32);
            StartingRMBSkill = buffer.ReadInt(32);
            SkillKit0 = buffer.ReadInt(32);
            SkillKit1 = buffer.ReadInt(32);
            SkillKit2 = buffer.ReadInt(32);
            SkillKit3 = buffer.ReadInt(32);
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadInt(3);
            Field22 = buffer.ReadInt(3);
            Field23 = buffer.ReadInt(2) + (-1);
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = buffer.ReadFloat32();
            Field31 = buffer.ReadFloat32();
            Field32 = buffer.ReadFloat32();
            Field33 = buffer.ReadFloat32();
            Field34 = buffer.ReadFloat32();
            Field35 = buffer.ReadFloat32();
            Field36 = buffer.ReadFloat32();
            Field37 = buffer.ReadFloat32();
            Field38 = buffer.ReadFloat32();
            Field39 = buffer.ReadFloat32();
            Field40 = buffer.ReadFloat32();
            Field41 = buffer.ReadFloat32();
            Field42 = buffer.ReadFloat32();
            Field43 = buffer.ReadFloat32();
            Field44 = buffer.ReadFloat32();
            Field45 = buffer.ReadFloat32();
            Field46 = buffer.ReadFloat32();
            Field47 = buffer.ReadFloat32();
            Field48 = buffer.ReadFloat32();
            Field49 = buffer.ReadFloat32();
            Field50 = buffer.ReadFloat32();
            Field51 = buffer.ReadFloat32();
            Field52 = buffer.ReadFloat32();
            Field53 = buffer.ReadFloat32();
            Field54 = buffer.ReadFloat32();
            Field55 = buffer.ReadFloat32();
            Field56 = buffer.ReadFloat32();
            Field57 = buffer.ReadFloat32();
            Field58 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, MaleActor);
            buffer.WriteInt(32, FemaleActor);
            buffer.WriteInt(32, Inventory_SNO);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, StartingLMBSkill);
            buffer.WriteInt(32, StartingRMBSkill);
            buffer.WriteInt(32, SkillKit0);
            buffer.WriteInt(32, SkillKit1);
            buffer.WriteInt(32, SkillKit2);
            buffer.WriteInt(32, SkillKit3);
            buffer.WriteFloat32(Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteInt(3, Field21);
            buffer.WriteInt(3, Field22);
            buffer.WriteInt(2, Field23 - (-1));
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            buffer.WriteFloat32(Field30);
            buffer.WriteFloat32(Field31);
            buffer.WriteFloat32(Field32);
            buffer.WriteFloat32(Field33);
            buffer.WriteFloat32(Field34);
            buffer.WriteFloat32(Field35);
            buffer.WriteFloat32(Field36);
            buffer.WriteFloat32(Field37);
            buffer.WriteFloat32(Field38);
            buffer.WriteFloat32(Field39);
            buffer.WriteFloat32(Field40);
            buffer.WriteFloat32(Field41);
            buffer.WriteFloat32(Field42);
            buffer.WriteFloat32(Field43);
            buffer.WriteFloat32(Field44);
            buffer.WriteFloat32(Field45);
            buffer.WriteFloat32(Field46);
            buffer.WriteFloat32(Field47);
            buffer.WriteFloat32(Field48);
            buffer.WriteFloat32(Field49);
            buffer.WriteFloat32(Field50);
            buffer.WriteFloat32(Field51);
            buffer.WriteFloat32(Field52);
            buffer.WriteFloat32(Field53);
            buffer.WriteFloat32(Field54);
            buffer.WriteFloat32(Field55);
            buffer.WriteFloat32(Field56);
            buffer.WriteFloat32(Field57);
            buffer.WriteFloat32(Field58);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HeroData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("MaleActor:" + MaleActor.ToString());
            b.Append(' ', pad); b.AppendLine("FemaleActor:" + FemaleActor.ToString());
            b.Append(' ', pad); b.AppendLine("Inventory_SNO:" + Inventory_SNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("StartingLMBSkill:" + StartingLMBSkill.ToString());
            b.Append(' ', pad); b.AppendLine("StartingRMBSkill:" + StartingRMBSkill.ToString());
            b.Append(' ', pad); b.AppendLine("SkillKit0:" + SkillKit0.ToString());
            b.Append(' ', pad); b.AppendLine("SkillKit1:" + SkillKit1.ToString());
            b.Append(' ', pad); b.AppendLine("SkillKit2:" + SkillKit2.ToString());
            b.Append(' ', pad); b.AppendLine("SkillKit3:" + SkillKit3.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Field34:" + Field34.ToString());
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Field38:" + Field38.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Field40:" + Field40.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            b.Append(' ', pad); b.AppendLine("Field44:" + Field44.ToString());
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            b.Append(' ', pad); b.AppendLine("Field46:" + Field46.ToString());
            b.Append(' ', pad); b.AppendLine("Field47:" + Field47.ToString());
            b.Append(' ', pad); b.AppendLine("Field48:" + Field48.ToString());
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Field50:" + Field50.ToString());
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            b.Append(' ', pad); b.AppendLine("Field52:" + Field52.ToString());
            b.Append(' ', pad); b.AppendLine("Field53:" + Field53.ToString());
            b.Append(' ', pad); b.AppendLine("Field54:" + Field54.ToString());
            b.Append(' ', pad); b.AppendLine("Field55:" + Field55.ToString());
            b.Append(' ', pad); b.AppendLine("Field56:" + Field56.ToString());
            b.Append(' ', pad); b.AppendLine("Field57:" + Field57.ToString());
            b.Append(' ', pad); b.AppendLine("Field58:" + Field58.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            MaleActor = stream.ReadValueS32();
            stream.Position = offset + 264;
            FemaleActor = stream.ReadValueS32();
            stream.Position = offset + 268;
            Inventory_SNO = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 276;
            StartingLMBSkill = stream.ReadValueS32();
            stream.Position = offset + 280;
            StartingRMBSkill = stream.ReadValueS32();
            stream.Position = offset + 284;
            SkillKit0 = stream.ReadValueS32();
            stream.Position = offset + 288;
            SkillKit1 = stream.ReadValueS32();
            stream.Position = offset + 292;
            SkillKit2 = stream.ReadValueS32();
            stream.Position = offset + 296;
            SkillKit3 = stream.ReadValueS32();
            stream.Position = offset + 312;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 316;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 800;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 804;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 812;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 808;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 336;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 340;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 352;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 872;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 300;
            _Field21 = stream.ReadValueS32();
            stream.Position = offset + 304;
            _Field22 = stream.ReadValueS32();
            stream.Position = offset + 308;
            _Field23 = stream.ReadValueS32();
            stream.Position = offset + 356;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 360;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 364;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 372;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 376;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 380;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 500;
            Field30 = stream.ReadValueF32();
            stream.Position = offset + 408;
            Field31 = stream.ReadValueF32();
            stream.Position = offset + 536;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 540;
            Field33 = stream.ReadValueF32();
            stream.Position = offset + 492;
            Field34 = stream.ReadValueF32();
            stream.Position = offset + 548;
            Field35 = stream.ReadValueF32();
            stream.Position = offset + 484;
            Field36 = stream.ReadValueF32();
            stream.Position = offset + 488;
            Field37 = stream.ReadValueF32();
            stream.Position = offset + 772;
            Field38 = stream.ReadValueF32();
            stream.Position = offset + 856;
            Field39 = stream.ReadValueF32();
            stream.Position = offset + 860;
            Field40 = stream.ReadValueF32();
            stream.Position = offset + 864;
            Field41 = stream.ReadValueF32();
            stream.Position = offset + 868;
            Field42 = stream.ReadValueF32();
            stream.Position = offset + 584;
            Field43 = stream.ReadValueF32();
            stream.Position = offset + 588;
            Field44 = stream.ReadValueF32();
            stream.Position = offset + 592;
            Field45 = stream.ReadValueF32();
            stream.Position = offset + 596;
            Field46 = stream.ReadValueF32();
            stream.Position = offset + 600;
            Field47 = stream.ReadValueF32();
            stream.Position = offset + 604;
            Field48 = stream.ReadValueF32();
            stream.Position = offset + 612;
            Field49 = stream.ReadValueF32();
            stream.Position = offset + 616;
            Field50 = stream.ReadValueF32();
            stream.Position = offset + 680;
            Field51 = stream.ReadValueF32();
            stream.Position = offset + 692;
            Field52 = stream.ReadValueF32();
            stream.Position = offset + 696;
            Field53 = stream.ReadValueF32();
            stream.Position = offset + 700;
            Field54 = stream.ReadValueF32();
            stream.Position = offset + 704;
            Field55 = stream.ReadValueF32();
            stream.Position = offset + 720;
            Field56 = stream.ReadValueF32();
            stream.Position = offset + 724;
            Field57 = stream.ReadValueF32();
            stream.Position = offset + 728;
            Field58 = stream.ReadValueF32();
        }

    }

    public class AffixTableEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        int _Field9;
        public int Field9 { get { return _Field9; } set { if (value < 0 || value > 14) throw new ArgumentOutOfRangeException(); _Field9 = value; } }
        public int Field10;
        public int RareNamePrefixStringList;
        public int RareNameSuffixStringList;
        public int AffixFamily0;
        public int AffixFamily1;
        public int Field15;
        int _Field16;
        public int Field16 { get { return _Field16; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Field16 = value; } }
        int[] _Field17;
        public int[] Field17 { get { return _Field17; } set { if (value != null && value.Length != 16) throw new ArgumentOutOfRangeException(); _Field17 = value; } }
        int[] _Field18;
        public int[] Field18 { get { return _Field18; } set { if (value != null && value.Length != 16) throw new ArgumentOutOfRangeException(); _Field18 = value; } }
        public int AssociatedAffix;
        int _Field20;
        public int Field20 { get { return _Field20; } set { if (value < -1 || value > 4) throw new ArgumentOutOfRangeException(); _Field20 = value; } }
        public int ExclusionCategory;
        int[] _Field22;
        public int[] Field22 { get { return _Field22; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _Field22 = value; } }
        AttributeSpecifier[] _Field23;
        public AttributeSpecifier[] Field23 { get { return _Field23; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field23 = value; } }
        public override int StructSize() { return 656; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(4);
            Field10 = buffer.ReadInt(32);
            RareNamePrefixStringList = buffer.ReadInt(32);
            RareNameSuffixStringList = buffer.ReadInt(32);
            AffixFamily0 = buffer.ReadInt(32);
            AffixFamily1 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(4);
            Field17 = new int[16];
            for (int i = 0; i < _Field17.Length; i++) _Field17[i] = buffer.ReadInt(32);
            Field18 = new int[16];
            for (int i = 0; i < _Field18.Length; i++) _Field18[i] = buffer.ReadInt(32);
            AssociatedAffix = buffer.ReadInt(32);
            Field20 = buffer.ReadInt(3) + (-1);
            ExclusionCategory = buffer.ReadInt(32);
            Field22 = new int[6];
            for (int i = 0; i < _Field22.Length; i++) _Field22[i] = buffer.ReadInt(32);
            Field23 = new AttributeSpecifier[4];
            for (int i = 0; i < _Field23.Length; i++)
            {
                _Field23[i] = new AttributeSpecifier();
                _Field23[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(4, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, RareNamePrefixStringList);
            buffer.WriteInt(32, RareNameSuffixStringList);
            buffer.WriteInt(32, AffixFamily0);
            buffer.WriteInt(32, AffixFamily1);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(4, Field16);
            for (int i = 0; i < _Field17.Length; i++) buffer.WriteInt(32, _Field17[i]);
            for (int i = 0; i < _Field18.Length; i++) buffer.WriteInt(32, _Field18[i]);
            buffer.WriteInt(32, AssociatedAffix);
            buffer.WriteInt(3, Field20 - (-1));
            buffer.WriteInt(32, ExclusionCategory);
            for (int i = 0; i < _Field22.Length; i++) buffer.WriteInt(32, _Field22[i]);
            for (int i = 0; i < _Field23.Length; i++) _Field23[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AffixTableEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("RareNamePrefixStringList:" + RareNamePrefixStringList.ToString());
            b.Append(' ', pad); b.AppendLine("RareNameSuffixStringList:" + RareNameSuffixStringList.ToString());
            b.Append(' ', pad); b.AppendLine("AffixFamily0:" + AffixFamily0.ToString());
            b.Append(' ', pad); b.AppendLine("AffixFamily1:" + AffixFamily1.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            for (int loop12 = 0; loop12 < _Field17.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field17[loop12]:" + _Field17[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field18.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field18[loop12]:" + _Field18[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("AssociatedAffix:" + AssociatedAffix.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("ExclusionCategory:" + ExclusionCategory.ToString());
            for (int loop12 = 0; loop12 < _Field22.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field22[loop12]:" + _Field22[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field23.Length; loop12++)
            {
                _Field23[loop12].AsText(b, pad, "_Field23[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 276;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 280;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 288;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 292;
            _Field9 = stream.ReadValueS32();
            stream.Position = offset + 296;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 300;
            RareNamePrefixStringList = stream.ReadValueS32();
            stream.Position = offset + 304;
            RareNameSuffixStringList = stream.ReadValueS32();
            stream.Position = offset + 308;
            AffixFamily0 = stream.ReadValueS32();
            stream.Position = offset + 312;
            AffixFamily1 = stream.ReadValueS32();
            stream.Position = offset + 476;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 480;
            _Field16 = stream.ReadValueS32();
            stream.Position = offset + 348;
            Field17 = new int[16];
            for (int loop12 = 0; loop12 < 16; loop12++)
            {
                int temp12_Field17;
                temp12_Field17 = stream.ReadValueS32();
                _Field17[loop12] = temp12_Field17;
            }
            stream.Position = offset + 412;
            Field18 = new int[16];
            for (int loop12 = 0; loop12 < 16; loop12++)
            {
                int temp12_Field18;
                temp12_Field18 = stream.ReadValueS32();
                _Field18[loop12] = temp12_Field18;
            }
            stream.Position = offset + 484;
            AssociatedAffix = stream.ReadValueS32();
            stream.Position = offset + 316;
            _Field20 = stream.ReadValueS32();
            stream.Position = offset + 320;
            ExclusionCategory = stream.ReadValueS32();
            stream.Position = offset + 324;
            Field22 = new int[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                int temp12_Field22;
                temp12_Field22 = stream.ReadValueS32();
                _Field22[loop12] = temp12_Field22;
            }
            stream.Position = offset + 488;
            Field23 = new AttributeSpecifier[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                AttributeSpecifier temp12_Field23;
                temp12_Field23 = new AttributeSpecifier();
                temp12_Field23.FileRead(stream, stream.Position);
                _Field23[loop12] = temp12_Field23;
            }
        }

    }

    public class AttributeSpecifier : GameMessage
    {
        public int AttributeId;
        public int SNOParam;
        public SerializeData serAttributeFormula;
        List<byte> _Formula;
        public List<byte> Formula { get { return _Formula; } set { _Formula = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            AttributeId = buffer.ReadInt(0);
            SNOParam = buffer.ReadInt(32);
            serAttributeFormula = new SerializeData();
            serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(0, AttributeId);
            buffer.WriteInt(32, SNOParam);
            serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AttributeSpecifier {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("AttributeId:" + AttributeId.ToString());
            b.Append(' ', pad); b.AppendLine("SNOParam:" + SNOParam.ToString());
            serAttributeFormula.AsText(b, pad, "serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _Formula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Formula[loop12]:" + _Formula[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            AttributeId = stream.ReadValueS32();
            stream.Position = offset + 4;
            SNOParam = stream.ReadValueS32();
            stream.Position = offset + 16;
            serAttributeFormula = new SerializeData();
            serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Formula = new List<byte>();
            for (int i = 0; i < (int)(serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_Formula;
                temp12_Formula = (byte)stream.ReadByte();
                _Formula.Add(temp12_Formula);
            }
        }

    }

    public class RareItemNamesEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int RelatedAffixOrItemType;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 1 || value > 37) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 272; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            RelatedAffixOrItemType = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(6) + (1);
            Field3 = buffer.ReadInt(4);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, RelatedAffixOrItemType);
            buffer.WriteInt(6, Field2 - (1));
            buffer.WriteInt(4, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareItemNamesEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("RelatedAffixOrItemType:" + RelatedAffixOrItemType.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 264;
            RelatedAffixOrItemType = stream.ReadValueS32();
            stream.Position = offset + 260;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            _Field3 = stream.ReadValueS32();
        }

    }

    public class MonsterAffixesEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < 0 || value > 6) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public int Field7;
        public int Field8;
        public int Field9;
        public int On_Spawn_Power_Minion;
        public int On_Spawn_Power_Rare;
        public int On_Spawn_Power_Champion;
        public int Field13;
        public int Param0;
        public SerializeData ptAttributes_0__serAttributeFormula;
        List<byte> _ptAttributes_0__AttributeFormula;
        public List<byte> ptAttributes_0__AttributeFormula { get { return _ptAttributes_0__AttributeFormula; } set { _ptAttributes_0__AttributeFormula = value; } }
        public int Field17;
        public int Param1;
        public SerializeData ptAttributes_1__serAttributeFormula;
        List<byte> _ptAttributes_1__AttributeFormula;
        public List<byte> ptAttributes_1__AttributeFormula { get { return _ptAttributes_1__AttributeFormula; } set { _ptAttributes_1__AttributeFormula = value; } }
        public int Field21;
        public int Param2;
        public SerializeData ptAttributes_2__serAttributeFormula;
        List<byte> _ptAttributes_2__AttributeFormula;
        public List<byte> ptAttributes_2__AttributeFormula { get { return _ptAttributes_2__AttributeFormula; } set { _ptAttributes_2__AttributeFormula = value; } }
        public int Field25;
        public int Param3;
        public SerializeData ptAttributes_3__serAttributeFormula;
        List<byte> _ptAttributes_3__AttributeFormula;
        public List<byte> ptAttributes_3__AttributeFormula { get { return _ptAttributes_3__AttributeFormula; } set { _ptAttributes_3__AttributeFormula = value; } }
        public int Field29;
        public int Param4;
        public SerializeData ptAttributes_4__serAttributeFormula;
        List<byte> _ptAttributes_4__AttributeFormula;
        public List<byte> ptAttributes_4__AttributeFormula { get { return _ptAttributes_4__AttributeFormula; } set { _ptAttributes_4__AttributeFormula = value; } }
        public int Field33;
        public int Param5;
        public SerializeData ptAttributes_5__serAttributeFormula;
        List<byte> _ptAttributes_5__AttributeFormula;
        public List<byte> ptAttributes_5__AttributeFormula { get { return _ptAttributes_5__AttributeFormula; } set { _ptAttributes_5__AttributeFormula = value; } }
        public int Field37;
        public int Param6;
        public SerializeData ptAttributes_6__serAttributeFormula;
        List<byte> _ptAttributes_6__AttributeFormula;
        public List<byte> ptAttributes_6__AttributeFormula { get { return _ptAttributes_6__AttributeFormula; } set { _ptAttributes_6__AttributeFormula = value; } }
        public int Field41;
        public int Param7;
        public SerializeData ptAttributes_7__serAttributeFormula;
        List<byte> _ptAttributes_7__AttributeFormula;
        public List<byte> ptAttributes_7__AttributeFormula { get { return _ptAttributes_7__AttributeFormula; } set { _ptAttributes_7__AttributeFormula = value; } }
        public int Field45;
        public int Param8;
        public SerializeData ptAttributes_8__serAttributeFormula;
        List<byte> _ptAttributes_8__AttributeFormula;
        public List<byte> ptAttributes_8__AttributeFormula { get { return _ptAttributes_8__AttributeFormula; } set { _ptAttributes_8__AttributeFormula = value; } }
        public int Field49;
        public int Param9;
        public SerializeData ptAttributes_9__serAttributeFormula;
        List<byte> _ptAttributes_9__AttributeFormula;
        public List<byte> ptAttributes_9__AttributeFormula { get { return _ptAttributes_9__AttributeFormula; } set { _ptAttributes_9__AttributeFormula = value; } }
        public int Field53;
        public int MinionParam0;
        public SerializeData ptMinionAttributes_0__serAttributeFormula;
        List<byte> _ptMinionAttributes_0__AttributeFormula;
        public List<byte> ptMinionAttributes_0__AttributeFormula { get { return _ptMinionAttributes_0__AttributeFormula; } set { _ptMinionAttributes_0__AttributeFormula = value; } }
        public int Field57;
        public int MinionParam1;
        public SerializeData ptMinionAttributes_1__serAttributeFormula;
        List<byte> _ptMinionAttributes_1__AttributeFormula;
        public List<byte> ptMinionAttributes_1__AttributeFormula { get { return _ptMinionAttributes_1__AttributeFormula; } set { _ptMinionAttributes_1__AttributeFormula = value; } }
        public int Field61;
        public int MinionParam2;
        public SerializeData ptMinionAttributes_2__serAttributeFormula;
        List<byte> _ptMinionAttributes_2__AttributeFormula;
        public List<byte> ptMinionAttributes_2__AttributeFormula { get { return _ptMinionAttributes_2__AttributeFormula; } set { _ptMinionAttributes_2__AttributeFormula = value; } }
        public int Field65;
        public int MinionParam3;
        public SerializeData ptMinionAttributes_3__serAttributeFormula;
        List<byte> _ptMinionAttributes_3__AttributeFormula;
        public List<byte> ptMinionAttributes_3__AttributeFormula { get { return _ptMinionAttributes_3__AttributeFormula; } set { _ptMinionAttributes_3__AttributeFormula = value; } }
        public int Field69;
        public int MinionParam4;
        public SerializeData ptMinionAttributes_4__serAttributeFormula;
        List<byte> _ptMinionAttributes_4__AttributeFormula;
        public List<byte> ptMinionAttributes_4__AttributeFormula { get { return _ptMinionAttributes_4__AttributeFormula; } set { _ptMinionAttributes_4__AttributeFormula = value; } }
        public int Field73;
        public int MinionParam5;
        public SerializeData ptMinionAttributes_5__serAttributeFormula;
        List<byte> _ptMinionAttributes_5__AttributeFormula;
        public List<byte> ptMinionAttributes_5__AttributeFormula { get { return _ptMinionAttributes_5__AttributeFormula; } set { _ptMinionAttributes_5__AttributeFormula = value; } }
        public int Field77;
        public int MinionParam6;
        public SerializeData ptMinionAttributes_6__serAttributeFormula;
        List<byte> _ptMinionAttributes_6__AttributeFormula;
        public List<byte> ptMinionAttributes_6__AttributeFormula { get { return _ptMinionAttributes_6__AttributeFormula; } set { _ptMinionAttributes_6__AttributeFormula = value; } }
        public int Field81;
        public int MinionParam7;
        public SerializeData ptMinionAttributes_7__serAttributeFormula;
        List<byte> _ptMinionAttributes_7__AttributeFormula;
        public List<byte> ptMinionAttributes_7__AttributeFormula { get { return _ptMinionAttributes_7__AttributeFormula; } set { _ptMinionAttributes_7__AttributeFormula = value; } }
        public int Field85;
        public int MinionParam8;
        public SerializeData ptMinionAttributes_8__serAttributeFormula;
        List<byte> _ptMinionAttributes_8__AttributeFormula;
        public List<byte> ptMinionAttributes_8__AttributeFormula { get { return _ptMinionAttributes_8__AttributeFormula; } set { _ptMinionAttributes_8__AttributeFormula = value; } }
        public int Field89;
        public int MinionParam9;
        public SerializeData ptMinionAttributes_9__serAttributeFormula;
        List<byte> _ptMinionAttributes_9__AttributeFormula;
        public List<byte> ptMinionAttributes_9__AttributeFormula { get { return _ptMinionAttributes_9__AttributeFormula; } set { _ptMinionAttributes_9__AttributeFormula = value; } }
        public override int StructSize() { return 792; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(4);
            Field5 = buffer.ReadInt(2);
            Field6 = buffer.ReadInt(3);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            On_Spawn_Power_Minion = buffer.ReadInt(32);
            On_Spawn_Power_Rare = buffer.ReadInt(32);
            On_Spawn_Power_Champion = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_0__serAttributeFormula = new SerializeData();
            ptAttributes_0__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field17 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_1__serAttributeFormula = new SerializeData();
            ptAttributes_1__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field21 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_2__serAttributeFormula = new SerializeData();
            ptAttributes_2__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field25 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_3__serAttributeFormula = new SerializeData();
            ptAttributes_3__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field29 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_4__serAttributeFormula = new SerializeData();
            ptAttributes_4__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field33 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_5__serAttributeFormula = new SerializeData();
            ptAttributes_5__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field37 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_6__serAttributeFormula = new SerializeData();
            ptAttributes_6__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field41 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_7__serAttributeFormula = new SerializeData();
            ptAttributes_7__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field45 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_8__serAttributeFormula = new SerializeData();
            ptAttributes_8__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field49 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_9__serAttributeFormula = new SerializeData();
            ptAttributes_9__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field53 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_0__serAttributeFormula = new SerializeData();
            ptMinionAttributes_0__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field57 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_1__serAttributeFormula = new SerializeData();
            ptMinionAttributes_1__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field61 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_2__serAttributeFormula = new SerializeData();
            ptMinionAttributes_2__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field65 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_3__serAttributeFormula = new SerializeData();
            ptMinionAttributes_3__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field69 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_4__serAttributeFormula = new SerializeData();
            ptMinionAttributes_4__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field73 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_5__serAttributeFormula = new SerializeData();
            ptMinionAttributes_5__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field77 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_6__serAttributeFormula = new SerializeData();
            ptMinionAttributes_6__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field81 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_7__serAttributeFormula = new SerializeData();
            ptMinionAttributes_7__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field85 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_8__serAttributeFormula = new SerializeData();
            ptMinionAttributes_8__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field89 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptMinionAttributes_9__serAttributeFormula = new SerializeData();
            ptMinionAttributes_9__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(4, Field4);
            buffer.WriteInt(2, Field5);
            buffer.WriteInt(3, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, On_Spawn_Power_Minion);
            buffer.WriteInt(32, On_Spawn_Power_Rare);
            buffer.WriteInt(32, On_Spawn_Power_Champion);
            buffer.WriteInt(0, Field13);
            buffer.WriteInt(32, Param0);
            ptAttributes_0__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field17);
            buffer.WriteInt(32, Param1);
            ptAttributes_1__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field21);
            buffer.WriteInt(32, Param2);
            ptAttributes_2__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field25);
            buffer.WriteInt(32, Param3);
            ptAttributes_3__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field29);
            buffer.WriteInt(32, Param4);
            ptAttributes_4__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field33);
            buffer.WriteInt(32, Param5);
            ptAttributes_5__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field37);
            buffer.WriteInt(32, Param6);
            ptAttributes_6__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field41);
            buffer.WriteInt(32, Param7);
            ptAttributes_7__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field45);
            buffer.WriteInt(32, Param8);
            ptAttributes_8__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field49);
            buffer.WriteInt(32, Param9);
            ptAttributes_9__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field53);
            buffer.WriteInt(32, MinionParam0);
            ptMinionAttributes_0__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field57);
            buffer.WriteInt(32, MinionParam1);
            ptMinionAttributes_1__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field61);
            buffer.WriteInt(32, MinionParam2);
            ptMinionAttributes_2__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field65);
            buffer.WriteInt(32, MinionParam3);
            ptMinionAttributes_3__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field69);
            buffer.WriteInt(32, MinionParam4);
            ptMinionAttributes_4__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field73);
            buffer.WriteInt(32, MinionParam5);
            ptMinionAttributes_5__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field77);
            buffer.WriteInt(32, MinionParam6);
            ptMinionAttributes_6__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field81);
            buffer.WriteInt(32, MinionParam7);
            ptMinionAttributes_7__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field85);
            buffer.WriteInt(32, MinionParam8);
            ptMinionAttributes_8__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field89);
            buffer.WriteInt(32, MinionParam9);
            ptMinionAttributes_9__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterAffixesEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("On_Spawn_Power_Minion:" + On_Spawn_Power_Minion.ToString());
            b.Append(' ', pad); b.AppendLine("On_Spawn_Power_Rare:" + On_Spawn_Power_Rare.ToString());
            b.Append(' ', pad); b.AppendLine("On_Spawn_Power_Champion:" + On_Spawn_Power_Champion.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Param0:" + Param0.ToString());
            ptAttributes_0__serAttributeFormula.AsText(b, pad, "ptAttributes_0__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_0__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_0__AttributeFormula[loop12]:" + _ptAttributes_0__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Param1:" + Param1.ToString());
            ptAttributes_1__serAttributeFormula.AsText(b, pad, "ptAttributes_1__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_1__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_1__AttributeFormula[loop12]:" + _ptAttributes_1__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Param2:" + Param2.ToString());
            ptAttributes_2__serAttributeFormula.AsText(b, pad, "ptAttributes_2__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_2__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_2__AttributeFormula[loop12]:" + _ptAttributes_2__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Param3:" + Param3.ToString());
            ptAttributes_3__serAttributeFormula.AsText(b, pad, "ptAttributes_3__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_3__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_3__AttributeFormula[loop12]:" + _ptAttributes_3__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Param4:" + Param4.ToString());
            ptAttributes_4__serAttributeFormula.AsText(b, pad, "ptAttributes_4__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_4__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_4__AttributeFormula[loop12]:" + _ptAttributes_4__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Param5:" + Param5.ToString());
            ptAttributes_5__serAttributeFormula.AsText(b, pad, "ptAttributes_5__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_5__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_5__AttributeFormula[loop12]:" + _ptAttributes_5__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Param6:" + Param6.ToString());
            ptAttributes_6__serAttributeFormula.AsText(b, pad, "ptAttributes_6__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_6__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_6__AttributeFormula[loop12]:" + _ptAttributes_6__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Param7:" + Param7.ToString());
            ptAttributes_7__serAttributeFormula.AsText(b, pad, "ptAttributes_7__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_7__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_7__AttributeFormula[loop12]:" + _ptAttributes_7__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            b.Append(' ', pad); b.AppendLine("Param8:" + Param8.ToString());
            ptAttributes_8__serAttributeFormula.AsText(b, pad, "ptAttributes_8__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_8__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_8__AttributeFormula[loop12]:" + _ptAttributes_8__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Param9:" + Param9.ToString());
            ptAttributes_9__serAttributeFormula.AsText(b, pad, "ptAttributes_9__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_9__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_9__AttributeFormula[loop12]:" + _ptAttributes_9__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field53:" + Field53.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam0:" + MinionParam0.ToString());
            ptMinionAttributes_0__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_0__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_0__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_0__AttributeFormula[loop12]:" + _ptMinionAttributes_0__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field57:" + Field57.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam1:" + MinionParam1.ToString());
            ptMinionAttributes_1__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_1__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_1__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_1__AttributeFormula[loop12]:" + _ptMinionAttributes_1__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field61:" + Field61.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam2:" + MinionParam2.ToString());
            ptMinionAttributes_2__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_2__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_2__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_2__AttributeFormula[loop12]:" + _ptMinionAttributes_2__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field65:" + Field65.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam3:" + MinionParam3.ToString());
            ptMinionAttributes_3__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_3__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_3__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_3__AttributeFormula[loop12]:" + _ptMinionAttributes_3__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field69:" + Field69.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam4:" + MinionParam4.ToString());
            ptMinionAttributes_4__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_4__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_4__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_4__AttributeFormula[loop12]:" + _ptMinionAttributes_4__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field73:" + Field73.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam5:" + MinionParam5.ToString());
            ptMinionAttributes_5__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_5__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_5__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_5__AttributeFormula[loop12]:" + _ptMinionAttributes_5__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field77:" + Field77.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam6:" + MinionParam6.ToString());
            ptMinionAttributes_6__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_6__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_6__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_6__AttributeFormula[loop12]:" + _ptMinionAttributes_6__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field81:" + Field81.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam7:" + MinionParam7.ToString());
            ptMinionAttributes_7__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_7__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_7__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_7__AttributeFormula[loop12]:" + _ptMinionAttributes_7__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field85:" + Field85.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam8:" + MinionParam8.ToString());
            ptMinionAttributes_8__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_8__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_8__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_8__AttributeFormula[loop12]:" + _ptMinionAttributes_8__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field89:" + Field89.ToString());
            b.Append(' ', pad); b.AppendLine("MinionParam9:" + MinionParam9.ToString());
            ptMinionAttributes_9__serAttributeFormula.AsText(b, pad, "ptMinionAttributes_9__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptMinionAttributes_9__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptMinionAttributes_9__AttributeFormula[loop12]:" + _ptMinionAttributes_9__AttributeFormula[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 280;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 272;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 276;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 288;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 292;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 780;
            On_Spawn_Power_Minion = stream.ReadValueS32();
            stream.Position = offset + 788;
            On_Spawn_Power_Rare = stream.ReadValueS32();
            stream.Position = offset + 784;
            On_Spawn_Power_Champion = stream.ReadValueS32();
            stream.Position = offset + 296;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 300;
            Param0 = stream.ReadValueS32();
            stream.Position = offset + 312;
            ptAttributes_0__serAttributeFormula = new SerializeData();
            ptAttributes_0__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 304;
            //still checking variablearrays
            ptAttributes_0__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_0__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_0__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_0__AttributeFormula;
                temp12_ptAttributes_0__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_0__AttributeFormula.Add(temp12_ptAttributes_0__AttributeFormula);
            }
            stream.Position = offset + 320;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 324;
            Param1 = stream.ReadValueS32();
            stream.Position = offset + 336;
            ptAttributes_1__serAttributeFormula = new SerializeData();
            ptAttributes_1__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 328;
            //still checking variablearrays
            ptAttributes_1__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_1__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_1__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_1__AttributeFormula;
                temp12_ptAttributes_1__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_1__AttributeFormula.Add(temp12_ptAttributes_1__AttributeFormula);
            }
            stream.Position = offset + 344;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 348;
            Param2 = stream.ReadValueS32();
            stream.Position = offset + 360;
            ptAttributes_2__serAttributeFormula = new SerializeData();
            ptAttributes_2__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 352;
            //still checking variablearrays
            ptAttributes_2__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_2__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_2__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_2__AttributeFormula;
                temp12_ptAttributes_2__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_2__AttributeFormula.Add(temp12_ptAttributes_2__AttributeFormula);
            }
            stream.Position = offset + 368;
            Field25 = stream.ReadValueS32();
            stream.Position = offset + 372;
            Param3 = stream.ReadValueS32();
            stream.Position = offset + 384;
            ptAttributes_3__serAttributeFormula = new SerializeData();
            ptAttributes_3__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 376;
            //still checking variablearrays
            ptAttributes_3__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_3__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_3__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_3__AttributeFormula;
                temp12_ptAttributes_3__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_3__AttributeFormula.Add(temp12_ptAttributes_3__AttributeFormula);
            }
            stream.Position = offset + 392;
            Field29 = stream.ReadValueS32();
            stream.Position = offset + 396;
            Param4 = stream.ReadValueS32();
            stream.Position = offset + 408;
            ptAttributes_4__serAttributeFormula = new SerializeData();
            ptAttributes_4__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 400;
            //still checking variablearrays
            ptAttributes_4__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_4__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_4__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_4__AttributeFormula;
                temp12_ptAttributes_4__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_4__AttributeFormula.Add(temp12_ptAttributes_4__AttributeFormula);
            }
            stream.Position = offset + 416;
            Field33 = stream.ReadValueS32();
            stream.Position = offset + 420;
            Param5 = stream.ReadValueS32();
            stream.Position = offset + 432;
            ptAttributes_5__serAttributeFormula = new SerializeData();
            ptAttributes_5__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 424;
            //still checking variablearrays
            ptAttributes_5__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_5__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_5__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_5__AttributeFormula;
                temp12_ptAttributes_5__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_5__AttributeFormula.Add(temp12_ptAttributes_5__AttributeFormula);
            }
            stream.Position = offset + 440;
            Field37 = stream.ReadValueS32();
            stream.Position = offset + 444;
            Param6 = stream.ReadValueS32();
            stream.Position = offset + 456;
            ptAttributes_6__serAttributeFormula = new SerializeData();
            ptAttributes_6__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 448;
            //still checking variablearrays
            ptAttributes_6__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_6__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_6__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_6__AttributeFormula;
                temp12_ptAttributes_6__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_6__AttributeFormula.Add(temp12_ptAttributes_6__AttributeFormula);
            }
            stream.Position = offset + 464;
            Field41 = stream.ReadValueS32();
            stream.Position = offset + 468;
            Param7 = stream.ReadValueS32();
            stream.Position = offset + 480;
            ptAttributes_7__serAttributeFormula = new SerializeData();
            ptAttributes_7__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 472;
            //still checking variablearrays
            ptAttributes_7__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_7__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_7__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_7__AttributeFormula;
                temp12_ptAttributes_7__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_7__AttributeFormula.Add(temp12_ptAttributes_7__AttributeFormula);
            }
            stream.Position = offset + 488;
            Field45 = stream.ReadValueS32();
            stream.Position = offset + 492;
            Param8 = stream.ReadValueS32();
            stream.Position = offset + 504;
            ptAttributes_8__serAttributeFormula = new SerializeData();
            ptAttributes_8__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 496;
            //still checking variablearrays
            ptAttributes_8__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_8__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_8__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_8__AttributeFormula;
                temp12_ptAttributes_8__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_8__AttributeFormula.Add(temp12_ptAttributes_8__AttributeFormula);
            }
            stream.Position = offset + 512;
            Field49 = stream.ReadValueS32();
            stream.Position = offset + 516;
            Param9 = stream.ReadValueS32();
            stream.Position = offset + 528;
            ptAttributes_9__serAttributeFormula = new SerializeData();
            ptAttributes_9__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 520;
            //still checking variablearrays
            ptAttributes_9__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_9__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_9__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_9__AttributeFormula;
                temp12_ptAttributes_9__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_9__AttributeFormula.Add(temp12_ptAttributes_9__AttributeFormula);
            }
            stream.Position = offset + 536;
            Field53 = stream.ReadValueS32();
            stream.Position = offset + 540;
            MinionParam0 = stream.ReadValueS32();
            stream.Position = offset + 552;
            ptMinionAttributes_0__serAttributeFormula = new SerializeData();
            ptMinionAttributes_0__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 544;
            //still checking variablearrays
            ptMinionAttributes_0__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_0__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_0__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_0__AttributeFormula;
                temp12_ptMinionAttributes_0__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_0__AttributeFormula.Add(temp12_ptMinionAttributes_0__AttributeFormula);
            }
            stream.Position = offset + 560;
            Field57 = stream.ReadValueS32();
            stream.Position = offset + 564;
            MinionParam1 = stream.ReadValueS32();
            stream.Position = offset + 576;
            ptMinionAttributes_1__serAttributeFormula = new SerializeData();
            ptMinionAttributes_1__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 568;
            //still checking variablearrays
            ptMinionAttributes_1__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_1__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_1__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_1__AttributeFormula;
                temp12_ptMinionAttributes_1__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_1__AttributeFormula.Add(temp12_ptMinionAttributes_1__AttributeFormula);
            }
            stream.Position = offset + 584;
            Field61 = stream.ReadValueS32();
            stream.Position = offset + 588;
            MinionParam2 = stream.ReadValueS32();
            stream.Position = offset + 600;
            ptMinionAttributes_2__serAttributeFormula = new SerializeData();
            ptMinionAttributes_2__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 592;
            //still checking variablearrays
            ptMinionAttributes_2__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_2__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_2__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_2__AttributeFormula;
                temp12_ptMinionAttributes_2__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_2__AttributeFormula.Add(temp12_ptMinionAttributes_2__AttributeFormula);
            }
            stream.Position = offset + 608;
            Field65 = stream.ReadValueS32();
            stream.Position = offset + 612;
            MinionParam3 = stream.ReadValueS32();
            stream.Position = offset + 624;
            ptMinionAttributes_3__serAttributeFormula = new SerializeData();
            ptMinionAttributes_3__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 616;
            //still checking variablearrays
            ptMinionAttributes_3__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_3__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_3__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_3__AttributeFormula;
                temp12_ptMinionAttributes_3__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_3__AttributeFormula.Add(temp12_ptMinionAttributes_3__AttributeFormula);
            }
            stream.Position = offset + 632;
            Field69 = stream.ReadValueS32();
            stream.Position = offset + 636;
            MinionParam4 = stream.ReadValueS32();
            stream.Position = offset + 648;
            ptMinionAttributes_4__serAttributeFormula = new SerializeData();
            ptMinionAttributes_4__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 640;
            //still checking variablearrays
            ptMinionAttributes_4__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_4__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_4__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_4__AttributeFormula;
                temp12_ptMinionAttributes_4__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_4__AttributeFormula.Add(temp12_ptMinionAttributes_4__AttributeFormula);
            }
            stream.Position = offset + 656;
            Field73 = stream.ReadValueS32();
            stream.Position = offset + 660;
            MinionParam5 = stream.ReadValueS32();
            stream.Position = offset + 672;
            ptMinionAttributes_5__serAttributeFormula = new SerializeData();
            ptMinionAttributes_5__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 664;
            //still checking variablearrays
            ptMinionAttributes_5__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_5__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_5__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_5__AttributeFormula;
                temp12_ptMinionAttributes_5__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_5__AttributeFormula.Add(temp12_ptMinionAttributes_5__AttributeFormula);
            }
            stream.Position = offset + 680;
            Field77 = stream.ReadValueS32();
            stream.Position = offset + 684;
            MinionParam6 = stream.ReadValueS32();
            stream.Position = offset + 696;
            ptMinionAttributes_6__serAttributeFormula = new SerializeData();
            ptMinionAttributes_6__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 688;
            //still checking variablearrays
            ptMinionAttributes_6__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_6__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_6__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_6__AttributeFormula;
                temp12_ptMinionAttributes_6__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_6__AttributeFormula.Add(temp12_ptMinionAttributes_6__AttributeFormula);
            }
            stream.Position = offset + 704;
            Field81 = stream.ReadValueS32();
            stream.Position = offset + 708;
            MinionParam7 = stream.ReadValueS32();
            stream.Position = offset + 720;
            ptMinionAttributes_7__serAttributeFormula = new SerializeData();
            ptMinionAttributes_7__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 712;
            //still checking variablearrays
            ptMinionAttributes_7__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_7__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_7__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_7__AttributeFormula;
                temp12_ptMinionAttributes_7__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_7__AttributeFormula.Add(temp12_ptMinionAttributes_7__AttributeFormula);
            }
            stream.Position = offset + 728;
            Field85 = stream.ReadValueS32();
            stream.Position = offset + 732;
            MinionParam8 = stream.ReadValueS32();
            stream.Position = offset + 744;
            ptMinionAttributes_8__serAttributeFormula = new SerializeData();
            ptMinionAttributes_8__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 736;
            //still checking variablearrays
            ptMinionAttributes_8__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_8__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_8__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_8__AttributeFormula;
                temp12_ptMinionAttributes_8__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_8__AttributeFormula.Add(temp12_ptMinionAttributes_8__AttributeFormula);
            }
            stream.Position = offset + 752;
            Field89 = stream.ReadValueS32();
            stream.Position = offset + 756;
            MinionParam9 = stream.ReadValueS32();
            stream.Position = offset + 768;
            ptMinionAttributes_9__serAttributeFormula = new SerializeData();
            ptMinionAttributes_9__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 760;
            //still checking variablearrays
            ptMinionAttributes_9__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptMinionAttributes_9__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptMinionAttributes_9__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptMinionAttributes_9__AttributeFormula;
                temp12_ptMinionAttributes_9__AttributeFormula = (byte)stream.ReadByte();
                _ptMinionAttributes_9__AttributeFormula.Add(temp12_ptMinionAttributes_9__AttributeFormula);
            }
        }

    }

    public class SocketedEffectsTableEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Item;
        public int ItemType;
        public int Field3;
        public int AttributeParam1;
        public SerializeData ptAttributes_0__serAttributeFormula;
        List<byte> _ptAttributes_0__AttributeFormula;
        public List<byte> ptAttributes_0__AttributeFormula { get { return _ptAttributes_0__AttributeFormula; } set { _ptAttributes_0__AttributeFormula = value; } }
        public int Field7;
        public int AttributeParam2;
        public SerializeData ptAttributes_1__serAttributeFormula;
        List<byte> _ptAttributes_1__AttributeFormula;
        public List<byte> ptAttributes_1__AttributeFormula { get { return _ptAttributes_1__AttributeFormula; } set { _ptAttributes_1__AttributeFormula = value; } }
        public int Field11;
        public int AttributeParam3;
        public SerializeData ptAttributes_2__serAttributeFormula;
        List<byte> _ptAttributes_2__AttributeFormula;
        public List<byte> ptAttributes_2__AttributeFormula { get { return _ptAttributes_2__AttributeFormula; } set { _ptAttributes_2__AttributeFormula = value; } }
        public int Field15;
        public int ReqAttribParam1;
        public SerializeData ptRequirements_0__serAttributeFormula;
        List<byte> _ptRequirements_0__AttributeFormula;
        public List<byte> ptRequirements_0__AttributeFormula { get { return _ptRequirements_0__AttributeFormula; } set { _ptRequirements_0__AttributeFormula = value; } }
        public int Field19;
        public int ReqAttribParam2;
        public SerializeData ptRequirements_1__serAttributeFormula;
        List<byte> _ptRequirements_1__AttributeFormula;
        public List<byte> ptRequirements_1__AttributeFormula { get { return _ptRequirements_1__AttributeFormula; } set { _ptRequirements_1__AttributeFormula = value; } }
        public string _Field23;
        public string Field23 { get { return _Field23; } set { if (value != null && value.Length > 1024) throw new ArgumentOutOfRangeException(); _Field23 = value; } }
        public override int StructSize() { return 1416; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Item = buffer.ReadInt(32);
            ItemType = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_0__serAttributeFormula = new SerializeData();
            ptAttributes_0__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field7 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_1__serAttributeFormula = new SerializeData();
            ptAttributes_1__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field11 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptAttributes_2__serAttributeFormula = new SerializeData();
            ptAttributes_2__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field15 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptRequirements_0__serAttributeFormula = new SerializeData();
            ptRequirements_0__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field19 = buffer.ReadInt(0);
            buffer.ReadInt(32);
            ptRequirements_1__serAttributeFormula = new SerializeData();
            ptRequirements_1__serAttributeFormula.Parse(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            Field23 = buffer.ReadCharArray(1024);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Item);
            buffer.WriteInt(32, ItemType);
            buffer.WriteInt(0, Field3);
            buffer.WriteInt(32, AttributeParam1);
            ptAttributes_0__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field7);
            buffer.WriteInt(32, AttributeParam2);
            ptAttributes_1__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field11);
            buffer.WriteInt(32, AttributeParam3);
            ptAttributes_2__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field15);
            buffer.WriteInt(32, ReqAttribParam1);
            ptRequirements_0__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteInt(0, Field19);
            buffer.WriteInt(32, ReqAttribParam2);
            ptRequirements_1__serAttributeFormula.Encode(buffer);
            throw new Exception("DT_FORMULA in network packets not implemented.");
            buffer.WriteCharArray(1024, Field23);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SocketedEffectsTableEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Item:" + Item.ToString());
            b.Append(' ', pad); b.AppendLine("ItemType:" + ItemType.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam1:" + AttributeParam1.ToString());
            ptAttributes_0__serAttributeFormula.AsText(b, pad, "ptAttributes_0__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_0__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_0__AttributeFormula[loop12]:" + _ptAttributes_0__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam2:" + AttributeParam2.ToString());
            ptAttributes_1__serAttributeFormula.AsText(b, pad, "ptAttributes_1__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_1__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_1__AttributeFormula[loop12]:" + _ptAttributes_1__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("AttributeParam3:" + AttributeParam3.ToString());
            ptAttributes_2__serAttributeFormula.AsText(b, pad, "ptAttributes_2__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptAttributes_2__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptAttributes_2__AttributeFormula[loop12]:" + _ptAttributes_2__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("ReqAttribParam1:" + ReqAttribParam1.ToString());
            ptRequirements_0__serAttributeFormula.AsText(b, pad, "ptRequirements_0__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptRequirements_0__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptRequirements_0__AttributeFormula[loop12]:" + _ptRequirements_0__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("ReqAttribParam2:" + ReqAttribParam2.ToString());
            ptRequirements_1__serAttributeFormula.AsText(b, pad, "ptRequirements_1__serAttributeFormula: ");
            for (int loop12 = 0; loop12 < _ptRequirements_1__AttributeFormula.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ptRequirements_1__AttributeFormula[loop12]:" + _ptRequirements_1__AttributeFormula[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Item = stream.ReadValueS32();
            stream.Position = offset + 264;
            ItemType = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 276;
            AttributeParam1 = stream.ReadValueS32();
            stream.Position = offset + 288;
            ptAttributes_0__serAttributeFormula = new SerializeData();
            ptAttributes_0__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 280;
            //still checking variablearrays
            ptAttributes_0__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_0__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_0__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_0__AttributeFormula;
                temp12_ptAttributes_0__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_0__AttributeFormula.Add(temp12_ptAttributes_0__AttributeFormula);
            }
            stream.Position = offset + 296;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 300;
            AttributeParam2 = stream.ReadValueS32();
            stream.Position = offset + 312;
            ptAttributes_1__serAttributeFormula = new SerializeData();
            ptAttributes_1__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 304;
            //still checking variablearrays
            ptAttributes_1__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_1__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_1__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_1__AttributeFormula;
                temp12_ptAttributes_1__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_1__AttributeFormula.Add(temp12_ptAttributes_1__AttributeFormula);
            }
            stream.Position = offset + 320;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 324;
            AttributeParam3 = stream.ReadValueS32();
            stream.Position = offset + 336;
            ptAttributes_2__serAttributeFormula = new SerializeData();
            ptAttributes_2__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 328;
            //still checking variablearrays
            ptAttributes_2__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptAttributes_2__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptAttributes_2__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptAttributes_2__AttributeFormula;
                temp12_ptAttributes_2__AttributeFormula = (byte)stream.ReadByte();
                _ptAttributes_2__AttributeFormula.Add(temp12_ptAttributes_2__AttributeFormula);
            }
            stream.Position = offset + 344;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 348;
            ReqAttribParam1 = stream.ReadValueS32();
            stream.Position = offset + 360;
            ptRequirements_0__serAttributeFormula = new SerializeData();
            ptRequirements_0__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 352;
            //still checking variablearrays
            ptRequirements_0__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptRequirements_0__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptRequirements_0__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptRequirements_0__AttributeFormula;
                temp12_ptRequirements_0__AttributeFormula = (byte)stream.ReadByte();
                _ptRequirements_0__AttributeFormula.Add(temp12_ptRequirements_0__AttributeFormula);
            }
            stream.Position = offset + 368;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 372;
            ReqAttribParam2 = stream.ReadValueS32();
            stream.Position = offset + 384;
            ptRequirements_1__serAttributeFormula = new SerializeData();
            ptRequirements_1__serAttributeFormula.FileRead(stream, stream.Position);
            stream.Position = offset + 376;
            //still checking variablearrays
            ptRequirements_1__AttributeFormula = new List<byte>();
            for (int i = 0; i < (int)(ptRequirements_1__serAttributeFormula.Field1 / 1); i++)
            {
                stream.Position = ptRequirements_1__serAttributeFormula.Field0 + 16 + (1 * i);
                byte temp12_ptRequirements_1__AttributeFormula;
                temp12_ptRequirements_1__AttributeFormula = (byte)stream.ReadByte();
                _ptRequirements_1__AttributeFormula.Add(temp12_ptRequirements_1__AttributeFormula);
            }
            stream.Position = offset + 392;
            Field23 = stream.ReadString(1024);
        }

    }

    public class HirelingEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Actor;
        public int Proxy;
        public int Inventory;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 2) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public override int StructSize() { return 832; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Actor = buffer.ReadInt(32);
            Proxy = buffer.ReadInt(32);
            Inventory = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(2) + (-1);
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Actor);
            buffer.WriteInt(32, Proxy);
            buffer.WriteInt(32, Inventory);
            buffer.WriteInt(2, Field4 - (-1));
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HirelingEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Actor:" + Actor.ToString());
            b.Append(' ', pad); b.AppendLine("Proxy:" + Proxy.ToString());
            b.Append(' ', pad); b.AppendLine("Inventory:" + Inventory.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Actor = stream.ReadValueS32();
            stream.Position = offset + 264;
            Proxy = stream.ReadValueS32();
            stream.Position = offset + 268;
            Inventory = stream.ReadValueS32();
            stream.Position = offset + 272;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 756;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 760;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 768;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 764;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 440;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 444;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 728;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 780;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 784;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 788;
            Field14 = stream.ReadValueF32();
        }

    }

    public class SetItemBonusTableEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public int Set;
        AttributeSpecifier[] _Field3;
        public AttributeSpecifier[] Field3 { get { return _Field3; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 464; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
            Set = buffer.ReadInt(32);
            Field3 = new AttributeSpecifier[8];
            for (int i = 0; i < _Field3.Length; i++)
            {
                _Field3[i] = new AttributeSpecifier();
                _Field3[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Set);
            for (int i = 0; i < _Field3.Length; i++) _Field3[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SetItemBonusTableEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Set:" + Set.ToString());
            for (int loop12 = 0; loop12 < _Field3.Length; loop12++)
            {
                _Field3[loop12].AsText(b, pad, "_Field3[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 264;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 260;
            Set = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field3 = new AttributeSpecifier[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                AttributeSpecifier temp12_Field3;
                temp12_Field3 = new AttributeSpecifier();
                temp12_Field3.FileRead(stream, stream.Position);
                _Field3[loop12] = temp12_Field3;
            }
        }

    }

    public class GameSyncedData : GameMessage
    {
        int _Field0;
        public int Field0 { get { return _Field0; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        int[] _Field7;
        public int[] Field7 { get { return _Field7; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        int[] _Field8;
        public int[] Field8 { get { return _Field8; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(2);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = new int[2];
            for (int i = 0; i < _Field7.Length; i++) _Field7[i] = buffer.ReadInt(32);
            Field8 = new int[2];
            for (int i = 0; i < _Field8.Length; i++) _Field8[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(2, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            for (int i = 0; i < _Field7.Length; i++) buffer.WriteInt(32, _Field7[i]);
            for (int i = 0; i < _Field8.Length; i++) buffer.WriteInt(32, _Field8[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameSyncedData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            for (int loop12 = 0; loop12 < _Field7.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field7[loop12]:" + _Field7[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field8.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field8[loop12]:" + _Field8[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field7 = new int[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                int temp12_Field7;
                temp12_Field7 = stream.ReadValueS32();
                _Field7[loop12] = temp12_Field7;
            }
            stream.Position = offset + 84;
            Field8 = new int[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                int temp12_Field8;
                temp12_Field8 = stream.ReadValueS32();
                _Field8[loop12] = temp12_Field8;
            }
        }

    }

    public class NetAttributeKeyValue : GameMessage
    {
        int? _Field0;
        public int? Field0 { get { return _Field0; } set { if (value.HasValue && (value.Value < 0 || value.Value > 0xFFFFF)) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public GameAttribute Field1;
        public override int StructSize() { return 16; }

        public float Float;
        public int Int;

        public override void Parse(GameBitBuffer buffer)
        {
            if (buffer.ReadBool())
                Field0 = buffer.ReadInt(20);
            Field1 = GameAttributeList.Attributes[buffer.ReadInt(10)];
        }

        public override void Encode(GameBitBuffer buffer)
        {
            if (Field0.HasValue)
                buffer.WriteInt(20, Field0.Value);
            buffer.WriteInt(10, Field1.Id);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NetAttributeKeyValue {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 8;
            // : type  hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

        public void ParseValue(GameBitBuffer buffer)
        {
            switch (Field1.EncodingType)
            {
                case GameAttributeEncoding.Int:
                    Int = buffer.ReadInt(Field1.BitCount);
                    break;
                case GameAttributeEncoding.IntMinMax:
                    Int = buffer.ReadInt(Field1.BitCount) + Field1.Min.Value;
                    break;
                case GameAttributeEncoding.Float16:
                    Float = buffer.ReadFloat16();
                    break;
                case GameAttributeEncoding.Float16Or32:
                    Float = buffer.ReadBool() ? buffer.ReadFloat16() : buffer.ReadFloat32();
                    break;
                default:
                    throw new Exception("bad voodoo");
            }
        }

        public void EncodeValue(GameBitBuffer buffer)
        {
            switch (Field1.EncodingType)
            {
                case GameAttributeEncoding.Int:
                    buffer.WriteInt(Field1.BitCount, Int);
                    break;
                case GameAttributeEncoding.IntMinMax:
                    buffer.WriteInt(Field1.BitCount, Int - Field1.Min.Value);
                    break;
                case GameAttributeEncoding.Float16:
                    buffer.WriteFloat16(Float);
                    break;
                case GameAttributeEncoding.Float16Or32:
                    if (Float >= 65536.0f || -65536.0f >= Float)
                    {
                        buffer.WriteBool(false);
                        buffer.WriteFloat32(Float);
                    }
                    else
                    {
                        buffer.WriteBool(true);
                        buffer.WriteFloat16(Float);
                    }
                    break;
                default:
                    throw new Exception("bad voodoo");
            }
        }
    }

    public class ConvexHull : GameMessage
    {
        public int Field0;
        public SerializeData serVertices;
        List<Vector3D> _Vertices;
        public List<Vector3D> Vertices { get { return _Vertices; } set { _Vertices = value; } }
        public int Field3;
        public SerializeData serTriangles;
        List<IndexedTriangle> _Triangles;
        public List<IndexedTriangle> Triangles { get { return _Triangles; } set { _Triangles = value; } }
        public int Field6;
        public SerializeData serPlanes;
        List<Plane> _Planes;
        public List<Plane> Planes { get { return _Planes; } set { _Planes = value; } }
        public Matrix3x3 Field9;
        public Vector3D Field10;
        public float Field11;
        public float Field12;
        public override int StructSize() { return 104; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serVertices = new SerializeData();
            serVertices.Parse(buffer);
            //still checking variablearrays
            this.Vertices = new List<Vector3D>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12] = new Vector3D();
                _Vertices[loop12].Parse(buffer);
            }
            Field3 = buffer.ReadInt(32);
            serTriangles = new SerializeData();
            serTriangles.Parse(buffer);
            //still checking variablearrays
            this.Triangles = new List<IndexedTriangle>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Triangles.Count; loop12++)
            {
                _Triangles[loop12] = new IndexedTriangle();
                _Triangles[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            serPlanes = new SerializeData();
            serPlanes.Parse(buffer);
            //still checking variablearrays
            this.Planes = new List<Plane>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Planes.Count; loop12++)
            {
                _Planes[loop12] = new Plane();
                _Planes[loop12].Parse(buffer);
            }
            Field9 = new Matrix3x3();
            Field9.Parse(buffer);
            Field10 = new Vector3D();
            Field10.Parse(buffer);
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serVertices.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Vertices.Count);
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field3);
            serTriangles.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Triangles.Count);
            for (int loop12 = 0; loop12 < _Triangles.Count; loop12++)
            {
                _Triangles[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field6);
            serPlanes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Planes.Count);
            for (int loop12 = 0; loop12 < _Planes.Count; loop12++)
            {
                _Planes[loop12].Encode(buffer);
            }
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConvexHull {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serVertices.AsText(b, pad, "serVertices: ");
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12].AsText(b, pad, "_Vertices[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serTriangles.AsText(b, pad, "serTriangles: ");
            for (int loop12 = 0; loop12 < _Triangles.Count; loop12++)
            {
                _Triangles[loop12].AsText(b, pad, "_Triangles[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serPlanes.AsText(b, pad, "serPlanes: ");
            for (int loop12 = 0; loop12 < _Planes.Count; loop12++)
            {
                _Planes[loop12].AsText(b, pad, "_Planes[loop12]: ");
            }
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serVertices = new SerializeData();
            serVertices.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            //still checking variablearrays
            Vertices = new List<Vector3D>();
            for (int i = 0; i < (int)(serVertices.Field1 / 12); i++)
            {
                stream.Position = serVertices.Field0 + 16 + (12 * i);
                Vector3D temp12_Vertices;
                temp12_Vertices = new Vector3D();
                temp12_Vertices.FileRead(stream, stream.Position);
                _Vertices.Add(temp12_Vertices);
            }
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            serTriangles = new SerializeData();
            serTriangles.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Triangles = new List<IndexedTriangle>();
            for (int i = 0; i < (int)(serTriangles.Field1 / 12); i++)
            {
                stream.Position = serTriangles.Field0 + 16 + (12 * i);
                IndexedTriangle temp12_Triangles;
                temp12_Triangles = new IndexedTriangle();
                temp12_Triangles.FileRead(stream, stream.Position);
                _Triangles.Add(temp12_Triangles);
            }
            stream.Position = offset + 32;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 36;
            serPlanes = new SerializeData();
            serPlanes.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            //still checking variablearrays
            Planes = new List<Plane>();
            for (int i = 0; i < (int)(serPlanes.Field1 / 16); i++)
            {
                stream.Position = serPlanes.Field0 + 16 + (16 * i);
                Plane temp12_Planes;
                temp12_Planes = new Plane();
                temp12_Planes.FileRead(stream, stream.Position);
                _Planes.Add(temp12_Planes);
            }
            stream.Position = offset + 48;
            Field9 = new Matrix3x3();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 84;
            Field10 = new Vector3D();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 96;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 100;
            Field12 = stream.ReadValueF32();
        }

    }

    public class SerializeData : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SerializeData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class Vector3D : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Vector3D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class IndexedTriangle : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "IndexedTriangle {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
        }

    }

    public class Plane : GameMessage
    {
        public Vector3D Field0;
        public float Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Plane {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = stream.ReadValueF32();
        }

    }

    public class Matrix3x3 : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Matrix3x3 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueF32();
        }

    }

    public class Triangle3D : GameMessage
    {
        public Vector3D Field0;
        public Vector3D Field1;
        public Vector3D Field2;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = new Vector3D();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Triangle3D {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = new Vector3D();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class Shape : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public ConvexHull Field7;
        public OBB Field8;
        public Sphere Field9;
        public Cylinder Field10;
        public Capsule Field11;
        public override int StructSize() { return 244; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = new ConvexHull();
            Field7.Parse(buffer);
            Field8 = new OBB();
            Field8.Parse(buffer);
            Field9 = new Sphere();
            Field9.Parse(buffer);
            Field10 = new Cylinder();
            Field10.Parse(buffer);
            Field11 = new Capsule();
            Field11.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            Field11.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Shape {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            Field11.AsText(b, pad, "Field11: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = new ConvexHull();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 132;
            Field8 = new OBB();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 172;
            Field9 = new Sphere();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 188;
            Field10 = new Cylinder();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 216;
            Field11 = new Capsule();
            Field11.FileRead(stream, stream.Position);
        }

    }

    public class OBB : GameMessage
    {
        public PRTransform Field0;
        public Vector3D Field1;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new PRTransform();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "OBB {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new PRTransform();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class PRTransform : GameMessage
    {
        public Quaternion Quanternion;
        public Vector3D Vector3D;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Quanternion = new Quaternion();
            Quanternion.Parse(buffer);
            Vector3D = new Vector3D();
            Vector3D.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Quanternion.Encode(buffer);
            Vector3D.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PRTransform {");
            pad += 4;
            Quanternion.AsText(b, pad, "Quanternion: ");
            Vector3D.AsText(b, pad, "Vector3D: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Quanternion = new Quaternion();
            Quanternion.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Vector3D = new Vector3D();
            Vector3D.FileRead(stream, stream.Position);
        }

    }

    public class Sphere : GameMessage
    {
        public Vector3D Position;
        public float Radius;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Position = new Vector3D();
            Position.Parse(buffer);
            Radius = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Position.Encode(buffer);
            buffer.WriteFloat32(Radius);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Sphere {");
            pad += 4;
            Position.AsText(b, pad, "Position: ");
            b.Append(' ', pad); b.AppendLine("Radius:" + Radius.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Position = new Vector3D();
            Position.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Radius = stream.ReadValueF32();
        }

    }

    public class Cylinder : GameMessage
    {
        public Vector3D Field0;
        public Vector3D Field1;
        public float Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Cylinder {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = stream.ReadValueF32();
        }

    }

    public class Capsule : GameMessage
    {
        public Vector3D Field0;
        public Vector3D Field1;
        public float Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Capsule {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = stream.ReadValueF32();
        }

    }

    public class Octree : GameMessage
    {
        public int nMaxNodes;
        public int nMaxLeaves;
        public int nMaxPrimitives;
        public int nNodeCount;
        public int nLeafCount;
        public int nPrimitiveCount;
        public SerializeData serNodes;
        List<OctreeNode> _Nodes;
        public List<OctreeNode> Nodes { get { return _Nodes; } set { _Nodes = value; } }
        public SerializeData serLeaves;
        List<OctreeLeaf> _Leaves;
        public List<OctreeLeaf> Leaves { get { return _Leaves; } set { _Leaves = value; } }
        public SerializeData serPrimitives;
        List<OctreePrimitive> _Primitives;
        public List<OctreePrimitive> Primitives { get { return _Primitives; } set { _Primitives = value; } }
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            nMaxNodes = buffer.ReadInt(32);
            nMaxLeaves = buffer.ReadInt(32);
            nMaxPrimitives = buffer.ReadInt(32);
            nNodeCount = buffer.ReadInt(32);
            nLeafCount = buffer.ReadInt(32);
            nPrimitiveCount = buffer.ReadInt(32);
            serNodes = new SerializeData();
            serNodes.Parse(buffer);
            //still checking variablearrays
            this.Nodes = new List<OctreeNode>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12] = new OctreeNode();
                _Nodes[loop12].Parse(buffer);
            }
            serLeaves = new SerializeData();
            serLeaves.Parse(buffer);
            //still checking variablearrays
            this.Leaves = new List<OctreeLeaf>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Leaves.Count; loop12++)
            {
                _Leaves[loop12] = new OctreeLeaf();
                _Leaves[loop12].Parse(buffer);
            }
            serPrimitives = new SerializeData();
            serPrimitives.Parse(buffer);
            //still checking variablearrays
            this.Primitives = new List<OctreePrimitive>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Primitives.Count; loop12++)
            {
                _Primitives[loop12] = new OctreePrimitive();
                _Primitives[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, nMaxNodes);
            buffer.WriteInt(32, nMaxLeaves);
            buffer.WriteInt(32, nMaxPrimitives);
            buffer.WriteInt(32, nNodeCount);
            buffer.WriteInt(32, nLeafCount);
            buffer.WriteInt(32, nPrimitiveCount);
            serNodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Nodes.Count);
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].Encode(buffer);
            }
            serLeaves.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Leaves.Count);
            for (int loop12 = 0; loop12 < _Leaves.Count; loop12++)
            {
                _Leaves[loop12].Encode(buffer);
            }
            serPrimitives.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Primitives.Count);
            for (int loop12 = 0; loop12 < _Primitives.Count; loop12++)
            {
                _Primitives[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Octree {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("nMaxNodes:" + nMaxNodes.ToString());
            b.Append(' ', pad); b.AppendLine("nMaxLeaves:" + nMaxLeaves.ToString());
            b.Append(' ', pad); b.AppendLine("nMaxPrimitives:" + nMaxPrimitives.ToString());
            b.Append(' ', pad); b.AppendLine("nNodeCount:" + nNodeCount.ToString());
            b.Append(' ', pad); b.AppendLine("nLeafCount:" + nLeafCount.ToString());
            b.Append(' ', pad); b.AppendLine("nPrimitiveCount:" + nPrimitiveCount.ToString());
            serNodes.AsText(b, pad, "serNodes: ");
            for (int loop12 = 0; loop12 < _Nodes.Count; loop12++)
            {
                _Nodes[loop12].AsText(b, pad, "_Nodes[loop12]: ");
            }
            serLeaves.AsText(b, pad, "serLeaves: ");
            for (int loop12 = 0; loop12 < _Leaves.Count; loop12++)
            {
                _Leaves[loop12].AsText(b, pad, "_Leaves[loop12]: ");
            }
            serPrimitives.AsText(b, pad, "serPrimitives: ");
            for (int loop12 = 0; loop12 < _Primitives.Count; loop12++)
            {
                _Primitives[loop12].AsText(b, pad, "_Primitives[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            nMaxNodes = stream.ReadValueS32();
            stream.Position = offset + 4;
            nMaxLeaves = stream.ReadValueS32();
            stream.Position = offset + 8;
            nMaxPrimitives = stream.ReadValueS32();
            stream.Position = offset + 12;
            nNodeCount = stream.ReadValueS32();
            stream.Position = offset + 16;
            nLeafCount = stream.ReadValueS32();
            stream.Position = offset + 20;
            nPrimitiveCount = stream.ReadValueS32();
            stream.Position = offset + 24;
            serNodes = new SerializeData();
            serNodes.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking variablearrays
            Nodes = new List<OctreeNode>();
            for (int i = 0; i < (int)(serNodes.Field1 / 48); i++)
            {
                stream.Position = serNodes.Field0 + 16 + (48 * i);
                OctreeNode temp12_Nodes;
                temp12_Nodes = new OctreeNode();
                temp12_Nodes.FileRead(stream, stream.Position);
                _Nodes.Add(temp12_Nodes);
            }
            stream.Position = offset + 40;
            serLeaves = new SerializeData();
            serLeaves.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            //still checking variablearrays
            Leaves = new List<OctreeLeaf>();
            for (int i = 0; i < (int)(serLeaves.Field1 / 24); i++)
            {
                stream.Position = serLeaves.Field0 + 16 + (24 * i);
                OctreeLeaf temp12_Leaves;
                temp12_Leaves = new OctreeLeaf();
                temp12_Leaves.FileRead(stream, stream.Position);
                _Leaves.Add(temp12_Leaves);
            }
            stream.Position = offset + 56;
            serPrimitives = new SerializeData();
            serPrimitives.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            //still checking variablearrays
            Primitives = new List<OctreePrimitive>();
            for (int i = 0; i < (int)(serPrimitives.Field1 / 8); i++)
            {
                stream.Position = serPrimitives.Field0 + 16 + (8 * i);
                OctreePrimitive temp12_Primitives;
                temp12_Primitives = new OctreePrimitive();
                temp12_Primitives.FileRead(stream, stream.Position);
                _Primitives.Add(temp12_Primitives);
            }
        }

    }

    public class OctreeNode : GameMessage
    {
        public OctreeCube Field0;
        int[] _Field1;
        public int[] Field1 { get { return _Field1; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new OctreeCube();
            Field0.Parse(buffer);
            Field1 = new int[8];
            for (int i = 0; i < _Field1.Length; i++) _Field1[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            for (int i = 0; i < _Field1.Length; i++) buffer.WriteInt(32, _Field1[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "OctreeNode {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field1[loop12]:" + _Field1[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new OctreeCube();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field1 = new int[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                int temp12_Field1;
                temp12_Field1 = stream.ReadValueS32();
                _Field1[loop12] = temp12_Field1;
            }
        }

    }

    public class OctreeCube : GameMessage
    {
        public Vector3D Field0;
        public float Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "OctreeCube {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = stream.ReadValueF32();
        }

    }

    public class OctreeLeaf : GameMessage
    {
        public OctreeCube Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new OctreeCube();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "OctreeLeaf {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new OctreeCube();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
        }

    }

    public class OctreePrimitive : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "OctreePrimitive {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class ConstraintParameters : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public PRTransform Field5;
        public Vector3D Field6;
        public PRTransform Field7;
        public PRTransform Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public string _Field18;
        public string Field18 { get { return _Field18; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field18 = value; } }
        public override int StructSize() { return 276; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = new PRTransform();
            Field5.Parse(buffer);
            Field6 = new Vector3D();
            Field6.Parse(buffer);
            Field7 = new PRTransform();
            Field7.Parse(buffer);
            Field8 = new PRTransform();
            Field8.Parse(buffer);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            Field5.Encode(buffer);
            Field6.Encode(buffer);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteCharArray(64, Field18);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConstraintParameters {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            Field5.AsText(b, pad, "Field5: ");
            Field6.AsText(b, pad, "Field6: ");
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 80;
            Field5 = new PRTransform();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 108;
            Field6 = new Vector3D();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 120;
            Field7 = new PRTransform();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 148;
            Field8 = new PRTransform();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 176;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 180;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 184;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 188;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 192;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 196;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 200;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 204;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 208;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 212;
            Field18 = stream.ReadString(64);
        }

    }

    public class Matrix4x4 : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public override int StructSize() { return 64; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Matrix4x4 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field15 = stream.ReadValueF32();
        }

    }

    public class LineSeg3D : GameMessage
    {
        public Ray3D Field0;
        public float Field1;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Ray3D();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LineSeg3D {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Ray3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field1 = stream.ReadValueF32();
        }

    }

    public class Ray3D : GameMessage
    {
        public Vector3D Field0;
        public Vector3D Field1;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Ray3D {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class AxialCylinder : GameMessage
    {
        public Vector3D Position;
        public float Ax1;
        public float Ax2;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Position = new Vector3D();
            Position.Parse(buffer);
            Ax1 = buffer.ReadFloat32();
            Ax2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Position.Encode(buffer);
            buffer.WriteFloat32(Ax1);
            buffer.WriteFloat32(Ax2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AxialCylinder {");
            pad += 4;
            Position.AsText(b, pad, "Position: ");
            b.Append(' ', pad); b.AppendLine("Ax1:" + Ax1.ToString());
            b.Append(' ', pad); b.AppendLine("Ax2:" + Ax2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Position = new Vector3D();
            Position.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Ax1 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Ax2 = stream.ReadValueF32();
        }

    }

    public class Quaternion16 : GameMessage
    {
        public ushort Field0;
        public ushort Field1;
        public ushort Field2;
        public ushort Field3;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = (ushort)buffer.ReadInt(16);
            Field1 = (ushort)buffer.ReadInt(16);
            Field2 = (ushort)buffer.ReadInt(16);
            Field3 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(16, Field0);
            buffer.WriteInt(16, Field1);
            buffer.WriteInt(16, Field2);
            buffer.WriteInt(16, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Quaternion16 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueU16();
            stream.Position = offset + 2;
            Field1 = stream.ReadValueU16();
            stream.Position = offset + 4;
            Field2 = stream.ReadValueU16();
            stream.Position = offset + 6;
            Field3 = stream.ReadValueU16();
        }

    }

    public class Circle : GameMessage
    {
        public Vector2D Center;
        public float Radius;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Center = new Vector2D();
            Center.Parse(buffer);
            Radius = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Center.Encode(buffer);
            buffer.WriteFloat32(Radius);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Circle {");
            pad += 4;
            Center.AsText(b, pad, "Center: ");
            b.Append(' ', pad); b.AppendLine("Radius:" + Radius.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Center = new Vector2D();
            Center.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Radius = stream.ReadValueF32();
        }

    }

    public class Vector2D : GameMessage
    {
        public float X;
        public float Y;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            X = buffer.ReadFloat32();
            Y = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(X);
            buffer.WriteFloat32(Y);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Vector2D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("X:" + X.ToString());
            b.Append(' ', pad); b.AppendLine("Y:" + Y.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            X = stream.ReadValueF32();
            stream.Position = offset + 4;
            Y = stream.ReadValueF32();
        }

    }

    public class AABB : GameMessage
    {
        public Vector3D Min;
        public Vector3D Max;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Min = new Vector3D();
            Min.Parse(buffer);
            Max = new Vector3D();
            Max.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Min.Encode(buffer);
            Max.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AABB {");
            pad += 4;
            Min.AsText(b, pad, "Min: ");
            Max.AsText(b, pad, "Max: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Min = new Vector3D();
            Min.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Max = new Vector3D();
            Max.FileRead(stream, stream.Position);
        }

    }

    public class Vector4D : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Vector4D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
        }

    }

    public class IVector2D : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "IVector2D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class RGBAColorValue : GameMessage
    {
        public float Red;
        public float Green;
        public float Blue;
        public float Alpha;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Red = buffer.ReadFloat32();
            Green = buffer.ReadFloat32();
            Blue = buffer.ReadFloat32();
            Alpha = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Red);
            buffer.WriteFloat32(Green);
            buffer.WriteFloat32(Blue);
            buffer.WriteFloat32(Alpha);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RGBAColorValue {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Red:" + Red.ToString());
            b.Append(' ', pad); b.AppendLine("Green:" + Green.ToString());
            b.Append(' ', pad); b.AppendLine("Blue:" + Blue.ToString());
            b.Append(' ', pad); b.AppendLine("Alpha:" + Alpha.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Red = stream.ReadValueF32();
            stream.Position = offset + 4;
            Green = stream.ReadValueF32();
            stream.Position = offset + 8;
            Blue = stream.ReadValueF32();
            stream.Position = offset + 12;
            Alpha = stream.ReadValueF32();
        }

    }

    public class RGBAColor : GameMessage
    {
        public byte Red;
        public byte Green;
        public byte Blue;
        public byte Alpha;
        public override int StructSize() { return 4; }

        public override void Parse(GameBitBuffer buffer)
        {
            Red = (byte)buffer.ReadInt(8);
            Green = (byte)buffer.ReadInt(8);
            Blue = (byte)buffer.ReadInt(8);
            Alpha = (byte)buffer.ReadInt(8);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(8, Red);
            buffer.WriteInt(8, Green);
            buffer.WriteInt(8, Blue);
            buffer.WriteInt(8, Alpha);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RGBAColor {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Red:" + Red.ToString());
            b.Append(' ', pad); b.AppendLine("Green:" + Green.ToString());
            b.Append(' ', pad); b.AppendLine("Blue:" + Blue.ToString());
            b.Append(' ', pad); b.AppendLine("Alpha:" + Alpha.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Red = (byte)stream.ReadByte();
            stream.Position = offset + 1;
            Green = (byte)stream.ReadByte();
            stream.Position = offset + 2;
            Blue = (byte)stream.ReadByte();
            stream.Position = offset + 3;
            Alpha = (byte)stream.ReadByte();
        }

    }

    public class PRSTransform : GameMessage
    {
        public Quaternion Field0;
        public Vector3D Field1;
        public float Field2;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Quaternion();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PRSTransform {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Quaternion();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            Field2 = stream.ReadValueF32();
        }

    }

    public class InterpolationPathHeader : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public int Field3;
        public InterpolationScalar Field4;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = new InterpolationScalar();
            Field4.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            Field4.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InterpolationPathHeader {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = new InterpolationScalar();
            Field4.FileRead(stream, stream.Position);
        }

    }

    public class InterpolationScalar : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InterpolationScalar {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class AngularVelocityNode : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AngularVelocityNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class AccelVectorNode : GameMessage
    {
        public AccelVector3D Field0;
        public AccelVector3D Field1;
        public float Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new AccelVector3D();
            Field0.Parse(buffer);
            Field1 = new AccelVector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AccelVectorNode {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new AccelVector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new AccelVector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = stream.ReadValueF32();
        }

    }

    public class AccelVector3D : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AccelVector3D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class VelocityVectorNode : GameMessage
    {
        public VelocityVector3D Field0;
        public VelocityVector3D Field1;
        public float Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new VelocityVector3D();
            Field0.Parse(buffer);
            Field1 = new VelocityVector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VelocityVectorNode {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new VelocityVector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new VelocityVector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = stream.ReadValueF32();
        }

    }

    public class VelocityVector3D : GameMessage
    {
        public float X;
        public float Y;
        public float Z;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            X = buffer.ReadFloat32();
            Y = buffer.ReadFloat32();
            Z = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(X);
            buffer.WriteFloat32(Y);
            buffer.WriteFloat32(Z);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VelocityVector3D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("X:" + X.ToString());
            b.Append(' ', pad); b.AppendLine("Y:" + Y.ToString());
            b.Append(' ', pad); b.AppendLine("Z:" + Z.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            X = stream.ReadValueF32();
            stream.Position = offset + 4;
            Y = stream.ReadValueF32();
            stream.Position = offset + 8;
            Z = stream.ReadValueF32();
        }

    }

    public class AccelNode : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AccelNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class VelocityNode : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VelocityNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class TimeNode : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TimeNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class AngleNode : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AngleNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class ColorNode : GameMessage
    {
        public RGBAColor Field0;
        public RGBAColor Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RGBAColor();
            Field0.Parse(buffer);
            Field1 = new RGBAColor();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ColorNode {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RGBAColor();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 4;
            Field1 = new RGBAColor();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class VectorNode : GameMessage
    {
        public Vector3D Field0;
        public Vector3D Field1;
        public float Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VectorNode {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = stream.ReadValueF32();
        }

    }

    public class IntNode : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "IntNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class FloatNode : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FloatNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class dmFloat3 : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "dmFloat3 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class dmPlane : GameMessage
    {
        public dmFloat3 Field0;
        public float Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new dmFloat3();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "dmPlane {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new dmFloat3();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = stream.ReadValueF32();
        }

    }

    public class dmSubEdge : GameMessage
    {
        public byte Field0;
        public byte Field1;
        public byte Field2;
        public byte Field3;
        public override int StructSize() { return 4; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = (byte)buffer.ReadInt(8);
            Field1 = (byte)buffer.ReadInt(8);
            Field2 = (byte)buffer.ReadInt(8);
            Field3 = (byte)buffer.ReadInt(8);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(8, Field0);
            buffer.WriteInt(8, Field1);
            buffer.WriteInt(8, Field2);
            buffer.WriteInt(8, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "dmSubEdge {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = (byte)stream.ReadByte();
            stream.Position = offset + 1;
            Field1 = (byte)stream.ReadByte();
            stream.Position = offset + 2;
            Field2 = (byte)stream.ReadByte();
            stream.Position = offset + 3;
            Field3 = (byte)stream.ReadByte();
        }

    }

    public class PrefetchRunOnDisk : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PrefetchRunOnDisk {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class Material2 : GameMessage
    {
        public RGBAColorValue Field0;
        public RGBAColorValue Field1;
        public RGBAColorValue Field2;
        public RGBAColorValue Field3;
        public float Field4;
        public int Field5;
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RGBAColorValue();
            Field0.Parse(buffer);
            Field1 = new RGBAColorValue();
            Field1.Parse(buffer);
            Field2 = new RGBAColorValue();
            Field2.Parse(buffer);
            Field3 = new RGBAColorValue();
            Field3.Parse(buffer);
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
            Field3.Encode(buffer);
            buffer.WriteFloat32(Field4);
            buffer.WriteInt(32, Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Material2 {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RGBAColorValue();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field1 = new RGBAColorValue();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            Field2 = new RGBAColorValue();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            Field3 = new RGBAColorValue();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 68;
            Field5 = stream.ReadValueS32();
        }

    }

    public class MaterialTextureEntry : GameMessage
    {
        public int Field0;
        public MaterialTexture Field1;
        public override int StructSize() { return 184; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new MaterialTexture();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MaterialTextureEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new MaterialTexture();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class MaterialTexture : GameMessage
    {
        public int snoTex;
        public TexAnimParams Field1;
        public override int StructSize() { return 180; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoTex = buffer.ReadInt(32);
            Field1 = new TexAnimParams();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoTex);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MaterialTexture {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoTex:" + snoTex.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoTex = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new TexAnimParams();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class FrameAnim : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FrameAnim {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
        }

    }

    public class DisplayMode : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DisplayMode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueS32();
        }

    }

    public class TexFrame : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public override int StructSize() { return 80; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TexFrame {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 68;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field4 = stream.ReadValueF32();
        }

    }

    public class EndOfTickMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EndOfTickMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class ImageFileID : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public override int StructSize() { return 516; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(256);
            Field1 = buffer.ReadCharArray(256);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Field0);
            buffer.WriteCharArray(256, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ImageFileID {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(256);
            stream.Position = offset + 256;
            Field1 = stream.ReadString(256);
            stream.Position = offset + 512;
            Field2 = stream.ReadValueS32();
        }

    }

    public class ShaderMap : GameMessage
    {
        public int Field0;
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ShaderMap {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class AmbientSound : GameMessage
    {
        public int Field0;
        public int snoBackground;
        RandomAmbientSoundParams[] _Field2;
        public RandomAmbientSoundParams[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int snoFixedIntervalSound;
        public int Field4;
        public int Field5;
        public string _Field6;
        public string Field6 { get { return _Field6; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public override int StructSize() { return 156; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            snoBackground = buffer.ReadInt(32);
            Field2 = new RandomAmbientSoundParams[2];
            for (int i = 0; i < _Field2.Length; i++)
            {
                _Field2[i] = new RandomAmbientSoundParams();
                _Field2[i].Parse(buffer);
            }
            snoFixedIntervalSound = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadCharArray(64);
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, snoBackground);
            for (int i = 0; i < _Field2.Length; i++) _Field2[i].Encode(buffer);
            buffer.WriteInt(32, snoFixedIntervalSound);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteCharArray(64, Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AmbientSound {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("snoBackground:" + snoBackground.ToString());
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                _Field2[loop12].AsText(b, pad, "_Field2[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("snoFixedIntervalSound:" + snoFixedIntervalSound.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            snoBackground = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = new RandomAmbientSoundParams[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                RandomAmbientSoundParams temp12_Field2;
                temp12_Field2 = new RandomAmbientSoundParams();
                temp12_Field2.FileRead(stream, stream.Position);
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 60;
            snoFixedIntervalSound = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field6 = stream.ReadString(64);
            stream.Position = offset + 136;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 140;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 144;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 148;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 152;
            Field11 = stream.ReadValueF32();
        }

    }

    public class RandomAmbientSoundParams : GameMessage
    {
        public int snoSound;
        public float Field1;
        public float Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSound = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSound);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RandomAmbientSoundParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSound:" + snoSound.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSound = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
        }

    }

    public class Physics : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public ushort Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = (ushort)buffer.ReadInt(16);
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(16, Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Physics {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = stream.ReadValueU16();
            stream.Position = offset + 44;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 64;
            Field13 = stream.ReadValueF32();
        }

    }

    public class Explosion : GameMessage
    {
        public int Field0;
        public int Field1;
        public Vector3D Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public int Field8;
        public float Field9;
        public override int StructSize() { return 60; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = new Vector3D();
            Field2.Parse(buffer);
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteFloat32(Field9);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Explosion {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = new Vector3D();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field9 = stream.ReadValueF32();
        }

    }

    public class Surface : GameMessage
    {
        public int Field0;
        public int snoParticleSystem;
        public int Field2;
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            snoParticleSystem = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, snoParticleSystem);
            buffer.WriteInt(32, Field2);
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Surface {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("snoParticleSystem:" + snoParticleSystem.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            snoParticleSystem = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class EffectItem : GameMessage
    {
        public int Field0;
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public MsgTriggeredEvent TriggeredEvent;
        public override int StructSize() { return 480; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Name = buffer.ReadCharArray(64);
            TriggeredEvent = new MsgTriggeredEvent();
            TriggeredEvent.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteCharArray(64, Name);
            TriggeredEvent.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EffectItem {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            TriggeredEvent.AsText(b, pad, "TriggeredEvent: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Name = stream.ReadString(64);
            stream.Position = offset + 68;
            TriggeredEvent = new MsgTriggeredEvent();
            TriggeredEvent.FileRead(stream, stream.Position);
        }

    }

    public class MsgTriggeredEvent : GameMessage
    {
        public int Field0;
        public TriggerEvent TriggerEvent;
        public override int StructSize() { return 412; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            TriggerEvent = new TriggerEvent();
            TriggerEvent.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            TriggerEvent.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MsgTriggeredEvent {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            TriggerEvent.AsText(b, pad, "TriggerEvent: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            TriggerEvent = new TriggerEvent();
            TriggerEvent.FileRead(stream, stream.Position);
        }

    }

    public class TriggerConditions : GameMessage
    {
        public float Percent;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public float Field5;
        public float Field6;
        public int Field7;
        public int Field8;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Percent = buffer.ReadFloat(8);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat(Percent, 8);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TriggerConditions {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Percent:" + Percent.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Percent = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueS32();
        }

    }

    public class SNOName : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SNOName {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class HardpointLink : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(64);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Name);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HardpointLink {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Name = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
        }

    }

    public class LookLink : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 64; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LookLink {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
        }

    }

    public class ConstraintLink : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 64; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConstraintLink {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
        }

    }

    public class Cloth : GameMessage
    {
        public int Field0;
        public int Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        int[] _Field13;
        public int[] Field13 { get { return _Field13; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field13 = value; } }
        public int snoAmbientSound;
        public override int StructSize() { return 84; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = new int[4];
            for (int i = 0; i < _Field13.Length; i++) _Field13[i] = buffer.ReadInt(32);
            snoAmbientSound = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            for (int i = 0; i < _Field13.Length; i++) buffer.WriteInt(32, _Field13[i]);
            buffer.WriteInt(32, snoAmbientSound);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Cloth {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            for (int loop12 = 0; loop12 < _Field13.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field13[loop12]:" + _Field13[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("snoAmbientSound:" + snoAmbientSound.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 64;
            Field13 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field13;
                temp12_Field13 = stream.ReadValueS32();
                _Field13[loop12] = temp12_Field13;
            }
            stream.Position = offset + 80;
            snoAmbientSound = stream.ReadValueS32();
        }

    }

    public class Trail : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public ColorPath Field7;
        public ColorPath Field8;
        public FloatPath Field9;
        public FloatPath Field10;
        int _Field11;
        public int Field11 { get { return _Field11; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field11 = value; } }
        public int Field12;
        public UberMaterial Field13;
        public override int StructSize() { return 312; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = new ColorPath();
            Field7.Parse(buffer);
            Field8 = new ColorPath();
            Field8.Parse(buffer);
            Field9 = new FloatPath();
            Field9.Parse(buffer);
            Field10 = new FloatPath();
            Field10.Parse(buffer);
            Field11 = buffer.ReadInt(2);
            Field12 = buffer.ReadInt(32);
            Field13 = new UberMaterial();
            Field13.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            buffer.WriteInt(2, Field11);
            buffer.WriteInt(32, Field12);
            Field13.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Trail {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            Field13.AsText(b, pad, "Field13: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field7 = new ColorPath();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 80;
            Field8 = new ColorPath();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 120;
            Field9 = new FloatPath();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 160;
            Field10 = new FloatPath();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 200;
            _Field11 = stream.ReadValueS32();
            stream.Position = offset + 204;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 208;
            Field13 = new UberMaterial();
            Field13.FileRead(stream, stream.Position);
        }

    }

    public class EmitterParams : GameMessage
    {
        public int Field0;
        public FloatPath Field1;
        public FloatPath Field2;
        public VectorPath Field3;
        public string _Field4;
        public string Field4 { get { return _Field4; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 252; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new FloatPath();
            Field1.Parse(buffer);
            Field2 = new FloatPath();
            Field2.Parse(buffer);
            Field3 = new VectorPath();
            Field3.Parse(buffer);
            Field4 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
            Field3.Encode(buffer);
            buffer.WriteCharArray(128, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EmitterParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new FloatPath();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            Field2 = new FloatPath();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 84;
            Field3 = new VectorPath();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 124;
            Field4 = stream.ReadString(128);
        }

    }

    public class Font : GameMessage
    {
        public int Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int Field6;
        public float Field7;
        public float Field8;
        public SerializeData serTTFData;
        List<byte> _TTFData;
        public List<byte> TTFData { get { return _TTFData; } set { _TTFData = value; } }
        public int Field11;
        public override int StructSize() { return 188; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(64);
            Field2 = buffer.ReadCharArray(64);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(2);
            Field5 = buffer.ReadInt(2);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            serTTFData = new SerializeData();
            serTTFData.Parse(buffer);
            //still checking variablearrays
            this.TTFData = new List<byte>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _TTFData.Count; loop12++)
            {
                _TTFData[loop12] = (byte)buffer.ReadInt(0);
            }
            Field11 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteCharArray(64, Field1);
            buffer.WriteCharArray(64, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(2, Field4);
            buffer.WriteInt(2, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            serTTFData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _TTFData.Count);
            for (int loop12 = 0; loop12 < _TTFData.Count; loop12++)
            {
                buffer.WriteInt(0, _TTFData[loop12]);
            }
            buffer.WriteInt(32, Field11);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Font {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            serTTFData.AsText(b, pad, "serTTFData: ");
            for (int loop12 = 0; loop12 < _TTFData.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_TTFData[loop12]:" + _TTFData[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadString(64);
            stream.Position = offset + 80;
            Field2 = stream.ReadString(64);
            stream.Position = offset + 144;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 148;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 152;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 160;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 164;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 168;
            serTTFData = new SerializeData();
            serTTFData.FileRead(stream, stream.Position);
            stream.Position = offset + 176;
            //still checking variablearrays
            TTFData = new List<byte>();
            for (int i = 0; i < (int)(serTTFData.Field1 / 1); i++)
            {
                stream.Position = serTTFData.Field0 + 16 + (1 * i);
                byte temp12_TTFData;
                temp12_TTFData = (byte)stream.ReadByte();
                _TTFData.Add(temp12_TTFData);
            }
            stream.Position = offset + 180;
            Field11 = stream.ReadValueS32();
        }

    }

    public class Anim2D : GameMessage
    {
        public int Field0;
        public int Field1;
        public FrameAnim Field2;
        public int snoSound;
        public int Field4;
        public SerializeData serFrames;
        List<Anim2DFrame> _Frames;
        public List<Anim2DFrame> Frames { get { return _Frames; } set { _Frames = value; } }
        public override int StructSize() { return 60; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = new FrameAnim();
            Field2.Parse(buffer);
            snoSound = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            serFrames = new SerializeData();
            serFrames.Parse(buffer);
            //still checking variablearrays
            this.Frames = new List<Anim2DFrame>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Frames.Count; loop12++)
            {
                _Frames[loop12] = new Anim2DFrame();
                _Frames[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            buffer.WriteInt(32, snoSound);
            buffer.WriteInt(32, Field4);
            serFrames.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Frames.Count);
            for (int loop12 = 0; loop12 < _Frames.Count; loop12++)
            {
                _Frames[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Anim2D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("snoSound:" + snoSound.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            serFrames.AsText(b, pad, "serFrames: ");
            for (int loop12 = 0; loop12 < _Frames.Count; loop12++)
            {
                _Frames[loop12].AsText(b, pad, "_Frames[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = new FrameAnim();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            snoSound = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 48;
            serFrames = new SerializeData();
            serFrames.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            //still checking variablearrays
            Frames = new List<Anim2DFrame>();
            for (int i = 0; i < (int)(serFrames.Field1 / 68); i++)
            {
                stream.Position = serFrames.Field0 + 16 + (68 * i);
                Anim2DFrame temp12_Frames;
                temp12_Frames = new Anim2DFrame();
                temp12_Frames.FileRead(stream, stream.Position);
                _Frames.Add(temp12_Frames);
            }
        }

    }

    public class Anim2DFrame : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public RGBAColor Field1;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = new RGBAColor();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Anim2DFrame {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = new RGBAColor();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class Shaders : GameMessage
    {
        public int Field0;
        public int Field1;
        public SerializeData serPasses;
        List<RenderPass> _Passes;
        public List<RenderPass> Passes { get { return _Passes; } set { _Passes = value; } }
        public string _Field4;
        public string Field4 { get { return _Field4; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 288; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            serPasses = new SerializeData();
            serPasses.Parse(buffer);
            //still checking variablearrays
            this.Passes = new List<RenderPass>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Passes.Count; loop12++)
            {
                _Passes[loop12] = new RenderPass();
                _Passes[loop12].Parse(buffer);
            }
            Field4 = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            serPasses.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Passes.Count);
            for (int loop12 = 0; loop12 < _Passes.Count; loop12++)
            {
                _Passes[loop12].Encode(buffer);
            }
            buffer.WriteCharArray(256, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Shaders {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            serPasses.AsText(b, pad, "serPasses: ");
            for (int loop12 = 0; loop12 < _Passes.Count; loop12++)
            {
                _Passes[loop12].AsText(b, pad, "_Passes[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            serPasses = new SerializeData();
            serPasses.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Passes = new List<RenderPass>();
            for (int i = 0; i < (int)(serPasses.Field1 / 840); i++)
            {
                stream.Position = serPasses.Field0 + 16 + (840 * i);
                RenderPass temp12_Passes;
                temp12_Passes = new RenderPass();
                temp12_Passes.FileRead(stream, stream.Position);
                _Passes.Add(temp12_Passes);
            }
            stream.Position = offset + 32;
            Field4 = stream.ReadString(256);
        }

    }

    public class RenderPass : GameMessage
    {
        public int Field0;
        public int Field1;
        public RenderParams Field2;
        public int Field3;
        TextureStageParams[] _Field4;
        public TextureStageParams[] Field4 { get { return _Field4; } set { if (value != null && value.Length != 16) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public int Field5;
        public string _Field6;
        public string Field6 { get { return _Field6; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public string _Field7;
        public string Field7 { get { return _Field7; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        public string _Field8;
        public string Field8 { get { return _Field8; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public override int StructSize() { return 840; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = new RenderParams();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt(32);
            Field4 = new TextureStageParams[16];
            for (int i = 0; i < _Field4.Length; i++)
            {
                _Field4[i] = new TextureStageParams();
                _Field4[i].Parse(buffer);
            }
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadCharArray(256);
            Field7 = buffer.ReadCharArray(64);
            Field8 = buffer.ReadCharArray(64);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            buffer.WriteInt(32, Field3);
            for (int i = 0; i < _Field4.Length; i++) _Field4[i].Encode(buffer);
            buffer.WriteInt(32, Field5);
            buffer.WriteCharArray(256, Field6);
            buffer.WriteCharArray(64, Field7);
            buffer.WriteCharArray(64, Field8);
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RenderPass {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            for (int loop12 = 0; loop12 < _Field4.Length; loop12++)
            {
                _Field4[loop12].AsText(b, pad, "_Field4[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = new RenderParams();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 100;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 104;
            Field4 = new TextureStageParams[16];
            for (int loop12 = 0; loop12 < 16; loop12++)
            {
                TextureStageParams temp12_Field4;
                temp12_Field4 = new TextureStageParams();
                temp12_Field4.FileRead(stream, stream.Position);
                _Field4[loop12] = temp12_Field4;
            }
            stream.Position = offset + 424;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 428;
            Field6 = stream.ReadString(256);
            stream.Position = offset + 684;
            Field7 = stream.ReadString(64);
            stream.Position = offset + 748;
            Field8 = stream.ReadString(64);
            stream.Position = offset + 812;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 820;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class RenderParams : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public float Field3;
        public float Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public byte Field13;
        public int Field14;
        public int Field15;
        public int Field16;
        public int Field17;
        public int Field18;
        public int Field19;
        public int Field20;
        public int Field21;
        public RGBAColor Field22;
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = (byte)buffer.ReadInt(8);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadInt(32);
            Field22 = new RGBAColor();
            Field22.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(8, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteInt(32, Field21);
            Field22.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RenderParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            Field22.AsText(b, pad, "Field22: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field13 = (byte)stream.ReadByte();
            stream.Position = offset + 56;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 80;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 88;
            Field22 = new RGBAColor();
            Field22.FileRead(stream, stream.Position);
        }

    }

    public class TextureStageParams : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public float Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteFloat32(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TextureStageParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
        }

    }

    public class UI : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public int dwNumControls;
        public SerializeData serControlList;
        List<UIControlData> _ControlList;
        public List<UIControlData> ControlList { get { return _ControlList; } set { _ControlList = value; } }
        public int dwNumStyles;
        public SerializeData serStyleList;
        List<UIStyle> _StyleList;
        public List<UIStyle> StyleList { get { return _StyleList; } set { _StyleList = value; } }
        public DataElements Field9;
        public override int StructSize() { return 632; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(256);
            Field1 = buffer.ReadCharArray(256);
            Field2 = buffer.ReadInt(32);
            dwNumControls = buffer.ReadInt(32);
            serControlList = new SerializeData();
            serControlList.Parse(buffer);
            //still checking variablearrays
            this.ControlList = new List<UIControlData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ControlList.Count; loop12++)
            {
                _ControlList[loop12] = new UIControlData();
                _ControlList[loop12].Parse(buffer);
            }
            dwNumStyles = buffer.ReadInt(32);
            serStyleList = new SerializeData();
            serStyleList.Parse(buffer);
            //still checking variablearrays
            this.StyleList = new List<UIStyle>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StyleList.Count; loop12++)
            {
                _StyleList[loop12] = new UIStyle();
                _StyleList[loop12].Parse(buffer);
            }
            Field9 = new DataElements();
            Field9.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Field0);
            buffer.WriteCharArray(256, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, dwNumControls);
            serControlList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ControlList.Count);
            for (int loop12 = 0; loop12 < _ControlList.Count; loop12++)
            {
                _ControlList[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, dwNumStyles);
            serStyleList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StyleList.Count);
            for (int loop12 = 0; loop12 < _StyleList.Count; loop12++)
            {
                _StyleList[loop12].Encode(buffer);
            }
            Field9.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UI {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("dwNumControls:" + dwNumControls.ToString());
            serControlList.AsText(b, pad, "serControlList: ");
            for (int loop12 = 0; loop12 < _ControlList.Count; loop12++)
            {
                _ControlList[loop12].AsText(b, pad, "_ControlList[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("dwNumStyles:" + dwNumStyles.ToString());
            serStyleList.AsText(b, pad, "serStyleList: ");
            for (int loop12 = 0; loop12 < _StyleList.Count; loop12++)
            {
                _StyleList[loop12].AsText(b, pad, "_StyleList[loop12]: ");
            }
            Field9.AsText(b, pad, "Field9: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadString(256);
            stream.Position = offset + 268;
            Field1 = stream.ReadString(256);
            stream.Position = offset + 524;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 528;
            dwNumControls = stream.ReadValueS32();
            stream.Position = offset + 532;
            serControlList = new SerializeData();
            serControlList.FileRead(stream, stream.Position);
            stream.Position = offset + 540;
            //still checking variablearrays
            ControlList = new List<UIControlData>();
            for (int i = 0; i < (int)(serControlList.Field1 / 1760); i++)
            {
                stream.Position = serControlList.Field0 + 16 + (1760 * i);
                UIControlData temp12_ControlList;
                temp12_ControlList = new UIControlData();
                temp12_ControlList.FileRead(stream, stream.Position);
                _ControlList.Add(temp12_ControlList);
            }
            stream.Position = offset + 544;
            dwNumStyles = stream.ReadValueS32();
            stream.Position = offset + 548;
            serStyleList = new SerializeData();
            serStyleList.FileRead(stream, stream.Position);
            stream.Position = offset + 556;
            //still checking variablearrays
            StyleList = new List<UIStyle>();
            for (int i = 0; i < (int)(serStyleList.Field1 / 608); i++)
            {
                stream.Position = serStyleList.Field0 + 16 + (608 * i);
                UIStyle temp12_StyleList;
                temp12_StyleList = new UIStyle();
                temp12_StyleList.FileRead(stream, stream.Position);
                _StyleList.Add(temp12_StyleList);
            }
            stream.Position = offset + 560;
            Field9 = new DataElements();
            Field9.FileRead(stream, stream.Position);
        }

    }

    public class DataElements : GameMessage
    {
        public int Field0;
        public SerializeData serStringElements;
        List<UIControlElement> _StringElements;
        public List<UIControlElement> StringElements { get { return _StringElements; } set { _StringElements = value; } }
        public int Field3;
        public SerializeData serInt32Elements;
        List<UIDataElementInt32> _Int32Elements;
        public List<UIDataElementInt32> Int32Elements { get { return _Int32Elements; } set { _Int32Elements = value; } }
        public int Field6;
        public SerializeData serFloat32Elements;
        List<UIDataElementFloat32> _Float32Elements;
        public List<UIDataElementFloat32> Float32Elements { get { return _Float32Elements; } set { _Float32Elements = value; } }
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serStringElements = new SerializeData();
            serStringElements.Parse(buffer);
            //still checking variablearrays
            this.StringElements = new List<UIControlElement>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _StringElements.Count; loop12++)
            {
                _StringElements[loop12] = new UIControlElement();
                _StringElements[loop12].Parse(buffer);
            }
            Field3 = buffer.ReadInt(32);
            serInt32Elements = new SerializeData();
            serInt32Elements.Parse(buffer);
            //still checking variablearrays
            this.Int32Elements = new List<UIDataElementInt32>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Int32Elements.Count; loop12++)
            {
                _Int32Elements[loop12] = new UIDataElementInt32();
                _Int32Elements[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            serFloat32Elements = new SerializeData();
            serFloat32Elements.Parse(buffer);
            //still checking variablearrays
            this.Float32Elements = new List<UIDataElementFloat32>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Float32Elements.Count; loop12++)
            {
                _Float32Elements[loop12] = new UIDataElementFloat32();
                _Float32Elements[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serStringElements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _StringElements.Count);
            for (int loop12 = 0; loop12 < _StringElements.Count; loop12++)
            {
                _StringElements[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field3);
            serInt32Elements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Int32Elements.Count);
            for (int loop12 = 0; loop12 < _Int32Elements.Count; loop12++)
            {
                _Int32Elements[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field6);
            serFloat32Elements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Float32Elements.Count);
            for (int loop12 = 0; loop12 < _Float32Elements.Count; loop12++)
            {
                _Float32Elements[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DataElements {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serStringElements.AsText(b, pad, "serStringElements: ");
            for (int loop12 = 0; loop12 < _StringElements.Count; loop12++)
            {
                _StringElements[loop12].AsText(b, pad, "_StringElements[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serInt32Elements.AsText(b, pad, "serInt32Elements: ");
            for (int loop12 = 0; loop12 < _Int32Elements.Count; loop12++)
            {
                _Int32Elements[loop12].AsText(b, pad, "_Int32Elements[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serFloat32Elements.AsText(b, pad, "serFloat32Elements: ");
            for (int loop12 = 0; loop12 < _Float32Elements.Count; loop12++)
            {
                _Float32Elements[loop12].AsText(b, pad, "_Float32Elements[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serStringElements = new SerializeData();
            serStringElements.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            //still checking variablearrays
            StringElements = new List<UIControlElement>();
            for (int i = 0; i < (int)(serStringElements.Field1 / 264); i++)
            {
                stream.Position = serStringElements.Field0 + 16 + (264 * i);
                UIControlElement temp12_StringElements;
                temp12_StringElements = new UIControlElement();
                temp12_StringElements.FileRead(stream, stream.Position);
                _StringElements.Add(temp12_StringElements);
            }
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            serInt32Elements = new SerializeData();
            serInt32Elements.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Int32Elements = new List<UIDataElementInt32>();
            for (int i = 0; i < (int)(serInt32Elements.Field1 / 16); i++)
            {
                stream.Position = serInt32Elements.Field0 + 16 + (16 * i);
                UIDataElementInt32 temp12_Int32Elements;
                temp12_Int32Elements = new UIDataElementInt32();
                temp12_Int32Elements.FileRead(stream, stream.Position);
                _Int32Elements.Add(temp12_Int32Elements);
            }
            stream.Position = offset + 32;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 36;
            serFloat32Elements = new SerializeData();
            serFloat32Elements.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            //still checking variablearrays
            Float32Elements = new List<UIDataElementFloat32>();
            for (int i = 0; i < (int)(serFloat32Elements.Field1 / 16); i++)
            {
                stream.Position = serFloat32Elements.Field0 + 16 + (16 * i);
                UIDataElementFloat32 temp12_Float32Elements;
                temp12_Float32Elements = new UIDataElementFloat32();
                temp12_Float32Elements.FileRead(stream, stream.Position);
                _Float32Elements.Add(temp12_Float32Elements);
            }
        }

    }

    public class UIStyleChildSpec : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public DataElements Field1;
        public override int StructSize() { return 572; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(512);
            Field1 = new DataElements();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(512, Field0);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIStyleChildSpec {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(512);
            stream.Position = offset + 512;
            Field1 = new DataElements();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class UIAnimationElements : GameMessage
    {
        public int Field0;
        public SerializeData serInt32Elements;
        List<UIAnimationElementInt32> _Int32Elements;
        public List<UIAnimationElementInt32> Int32Elements { get { return _Int32Elements; } set { _Int32Elements = value; } }
        public int Field3;
        public SerializeData serFloatElements;
        List<UIAnimationElementFloat> _FloatElements;
        public List<UIAnimationElementFloat> FloatElements { get { return _FloatElements; } set { _FloatElements = value; } }
        public int Field6;
        public SerializeData serVector2DElements;
        List<UIAnimationElementVector2D> _Vector2DElements;
        public List<UIAnimationElementVector2D> Vector2DElements { get { return _Vector2DElements; } set { _Vector2DElements = value; } }
        public int Field9;
        public SerializeData serAnimationDescriptions;
        List<UIAnimationDescription> _AnimationDescriptions;
        public List<UIAnimationDescription> AnimationDescriptions { get { return _AnimationDescriptions; } set { _AnimationDescriptions = value; } }
        public int Field12;
        public SerializeData serAnimationBindings;
        List<UIControlAnimationBinding> _AnimationBindings;
        public List<UIControlAnimationBinding> AnimationBindings { get { return _AnimationBindings; } set { _AnimationBindings = value; } }
        public override int StructSize() { return 80; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serInt32Elements = new SerializeData();
            serInt32Elements.Parse(buffer);
            //still checking variablearrays
            this.Int32Elements = new List<UIAnimationElementInt32>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Int32Elements.Count; loop12++)
            {
                _Int32Elements[loop12] = new UIAnimationElementInt32();
                _Int32Elements[loop12].Parse(buffer);
            }
            Field3 = buffer.ReadInt(32);
            serFloatElements = new SerializeData();
            serFloatElements.Parse(buffer);
            //still checking variablearrays
            this.FloatElements = new List<UIAnimationElementFloat>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _FloatElements.Count; loop12++)
            {
                _FloatElements[loop12] = new UIAnimationElementFloat();
                _FloatElements[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            serVector2DElements = new SerializeData();
            serVector2DElements.Parse(buffer);
            //still checking variablearrays
            this.Vector2DElements = new List<UIAnimationElementVector2D>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Vector2DElements.Count; loop12++)
            {
                _Vector2DElements[loop12] = new UIAnimationElementVector2D();
                _Vector2DElements[loop12].Parse(buffer);
            }
            Field9 = buffer.ReadInt(32);
            serAnimationDescriptions = new SerializeData();
            serAnimationDescriptions.Parse(buffer);
            //still checking variablearrays
            this.AnimationDescriptions = new List<UIAnimationDescription>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _AnimationDescriptions.Count; loop12++)
            {
                _AnimationDescriptions[loop12] = new UIAnimationDescription();
                _AnimationDescriptions[loop12].Parse(buffer);
            }
            Field12 = buffer.ReadInt(32);
            serAnimationBindings = new SerializeData();
            serAnimationBindings.Parse(buffer);
            //still checking variablearrays
            this.AnimationBindings = new List<UIControlAnimationBinding>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _AnimationBindings.Count; loop12++)
            {
                _AnimationBindings[loop12] = new UIControlAnimationBinding();
                _AnimationBindings[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serInt32Elements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Int32Elements.Count);
            for (int loop12 = 0; loop12 < _Int32Elements.Count; loop12++)
            {
                _Int32Elements[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field3);
            serFloatElements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _FloatElements.Count);
            for (int loop12 = 0; loop12 < _FloatElements.Count; loop12++)
            {
                _FloatElements[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field6);
            serVector2DElements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Vector2DElements.Count);
            for (int loop12 = 0; loop12 < _Vector2DElements.Count; loop12++)
            {
                _Vector2DElements[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field9);
            serAnimationDescriptions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _AnimationDescriptions.Count);
            for (int loop12 = 0; loop12 < _AnimationDescriptions.Count; loop12++)
            {
                _AnimationDescriptions[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field12);
            serAnimationBindings.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _AnimationBindings.Count);
            for (int loop12 = 0; loop12 < _AnimationBindings.Count; loop12++)
            {
                _AnimationBindings[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIAnimationElements {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serInt32Elements.AsText(b, pad, "serInt32Elements: ");
            for (int loop12 = 0; loop12 < _Int32Elements.Count; loop12++)
            {
                _Int32Elements[loop12].AsText(b, pad, "_Int32Elements[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serFloatElements.AsText(b, pad, "serFloatElements: ");
            for (int loop12 = 0; loop12 < _FloatElements.Count; loop12++)
            {
                _FloatElements[loop12].AsText(b, pad, "_FloatElements[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serVector2DElements.AsText(b, pad, "serVector2DElements: ");
            for (int loop12 = 0; loop12 < _Vector2DElements.Count; loop12++)
            {
                _Vector2DElements[loop12].AsText(b, pad, "_Vector2DElements[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            serAnimationDescriptions.AsText(b, pad, "serAnimationDescriptions: ");
            for (int loop12 = 0; loop12 < _AnimationDescriptions.Count; loop12++)
            {
                _AnimationDescriptions[loop12].AsText(b, pad, "_AnimationDescriptions[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            serAnimationBindings.AsText(b, pad, "serAnimationBindings: ");
            for (int loop12 = 0; loop12 < _AnimationBindings.Count; loop12++)
            {
                _AnimationBindings[loop12].AsText(b, pad, "_AnimationBindings[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serInt32Elements = new SerializeData();
            serInt32Elements.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            //still checking variablearrays
            Int32Elements = new List<UIAnimationElementInt32>();
            for (int i = 0; i < (int)(serInt32Elements.Field1 / 8); i++)
            {
                stream.Position = serInt32Elements.Field0 + 16 + (8 * i);
                UIAnimationElementInt32 temp12_Int32Elements;
                temp12_Int32Elements = new UIAnimationElementInt32();
                temp12_Int32Elements.FileRead(stream, stream.Position);
                _Int32Elements.Add(temp12_Int32Elements);
            }
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            serFloatElements = new SerializeData();
            serFloatElements.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            FloatElements = new List<UIAnimationElementFloat>();
            for (int i = 0; i < (int)(serFloatElements.Field1 / 8); i++)
            {
                stream.Position = serFloatElements.Field0 + 16 + (8 * i);
                UIAnimationElementFloat temp12_FloatElements;
                temp12_FloatElements = new UIAnimationElementFloat();
                temp12_FloatElements.FileRead(stream, stream.Position);
                _FloatElements.Add(temp12_FloatElements);
            }
            stream.Position = offset + 32;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 36;
            serVector2DElements = new SerializeData();
            serVector2DElements.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            //still checking variablearrays
            Vector2DElements = new List<UIAnimationElementVector2D>();
            for (int i = 0; i < (int)(serVector2DElements.Field1 / 12); i++)
            {
                stream.Position = serVector2DElements.Field0 + 16 + (12 * i);
                UIAnimationElementVector2D temp12_Vector2DElements;
                temp12_Vector2DElements = new UIAnimationElementVector2D();
                temp12_Vector2DElements.FileRead(stream, stream.Position);
                _Vector2DElements.Add(temp12_Vector2DElements);
            }
            stream.Position = offset + 48;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 52;
            serAnimationDescriptions = new SerializeData();
            serAnimationDescriptions.FileRead(stream, stream.Position);
            stream.Position = offset + 60;
            //still checking variablearrays
            AnimationDescriptions = new List<UIAnimationDescription>();
            for (int i = 0; i < (int)(serAnimationDescriptions.Field1 / 536); i++)
            {
                stream.Position = serAnimationDescriptions.Field0 + 16 + (536 * i);
                UIAnimationDescription temp12_AnimationDescriptions;
                temp12_AnimationDescriptions = new UIAnimationDescription();
                temp12_AnimationDescriptions.FileRead(stream, stream.Position);
                _AnimationDescriptions.Add(temp12_AnimationDescriptions);
            }
            stream.Position = offset + 64;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 68;
            serAnimationBindings = new SerializeData();
            serAnimationBindings.FileRead(stream, stream.Position);
            stream.Position = offset + 76;
            //still checking variablearrays
            AnimationBindings = new List<UIControlAnimationBinding>();
            for (int i = 0; i < (int)(serAnimationBindings.Field1 / 516); i++)
            {
                stream.Position = serAnimationBindings.Field0 + 16 + (516 * i);
                UIControlAnimationBinding temp12_AnimationBindings;
                temp12_AnimationBindings = new UIControlAnimationBinding();
                temp12_AnimationBindings.FileRead(stream, stream.Position);
                _AnimationBindings.Add(temp12_AnimationBindings);
            }
        }

    }

    public class UIAnimationElementInt32 : GameMessage
    {
        public float Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIAnimationElementInt32 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class UIAnimationElementFloat : GameMessage
    {
        public float Field0;
        public float Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIAnimationElementFloat {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
        }

    }

    public class UIAnimationElementVector2D : GameMessage
    {
        public float Field0;
        float[] _Field1;
        public float[] Field1 { get { return _Field1; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            //still checking fixedarrays on basictypes
            Field1 = new float[2];
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                _Field1[loop12] = buffer.ReadFloat32();
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                buffer.WriteFloat32(_Field1[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIAnimationElementVector2D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field1[loop12]:" + _Field1[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = new float[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                float temp12_Field1;
                temp12_Field1 = stream.ReadValueF32();
                _Field1[loop12] = temp12_Field1;
            }
        }

    }

    public class UIControlAnimationBinding : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public override int StructSize() { return 516; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(512);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(512, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIControlAnimationBinding {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(512);
            stream.Position = offset + 512;
            Field1 = stream.ReadValueS32();
        }

    }

    public class Light : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public MaterialTexture Field3;
        public int Field4;
        public int Field5;
        public float Field6;
        public LightStateParams Field7;
        public LightStateParams Field8;
        public override int StructSize() { return 1256; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = new MaterialTexture();
            Field3.Parse(buffer);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadFloat32();
            Field7 = new LightStateParams();
            Field7.Parse(buffer);
            Field8 = new LightStateParams();
            Field8.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            Field3.Encode(buffer);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteFloat32(Field6);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Light {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = new MaterialTexture();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 204;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 208;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 212;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 216;
            Field7 = new LightStateParams();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 736;
            Field8 = new LightStateParams();
            Field8.FileRead(stream, stream.Position);
        }

    }

    public class LightStateParams : GameMessage
    {
        public FloatPath Field0;
        public FloatPath Field1;
        FloatPath[] _Field2;
        public FloatPath[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public AnglePath Field3;
        public AnglePath Field4;
        public ColorPath Field5;
        public FloatPath Field6;
        public ColorPath Field7;
        public FloatPath Field8;
        public ColorPath Field9;
        public FloatPath Field10;
        public override int StructSize() { return 520; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new FloatPath();
            Field0.Parse(buffer);
            Field1 = new FloatPath();
            Field1.Parse(buffer);
            Field2 = new FloatPath[3];
            for (int i = 0; i < _Field2.Length; i++)
            {
                _Field2[i] = new FloatPath();
                _Field2[i].Parse(buffer);
            }
            Field3 = new AnglePath();
            Field3.Parse(buffer);
            Field4 = new AnglePath();
            Field4.Parse(buffer);
            Field5 = new ColorPath();
            Field5.Parse(buffer);
            Field6 = new FloatPath();
            Field6.Parse(buffer);
            Field7 = new ColorPath();
            Field7.Parse(buffer);
            Field8 = new FloatPath();
            Field8.Parse(buffer);
            Field9 = new ColorPath();
            Field9.Parse(buffer);
            Field10 = new FloatPath();
            Field10.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            for (int i = 0; i < _Field2.Length; i++) _Field2[i].Encode(buffer);
            Field3.Encode(buffer);
            Field4.Encode(buffer);
            Field5.Encode(buffer);
            Field6.Encode(buffer);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            Field10.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LightStateParams {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                _Field2[loop12].AsText(b, pad, "_Field2[loop12]: ");
            }
            Field3.AsText(b, pad, "Field3: ");
            Field4.AsText(b, pad, "Field4: ");
            Field5.AsText(b, pad, "Field5: ");
            Field6.AsText(b, pad, "Field6: ");
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new FloatPath();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field1 = new FloatPath();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 80;
            Field2 = new FloatPath[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                FloatPath temp12_Field2;
                temp12_Field2 = new FloatPath();
                temp12_Field2.FileRead(stream, stream.Position);
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 200;
            Field3 = new AnglePath();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 240;
            Field4 = new AnglePath();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 280;
            Field5 = new ColorPath();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 320;
            Field6 = new FloatPath();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 360;
            Field7 = new ColorPath();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 400;
            Field8 = new FloatPath();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 440;
            Field9 = new ColorPath();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 480;
            Field10 = new FloatPath();
            Field10.FileRead(stream, stream.Position);
        }

    }

    public class SoundPermutation : GameMessage
    {
        public int snoSoundBank;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 129) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public int Field7;
        public int Field8;
        public override int StructSize() { return 172; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSoundBank = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(129);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSoundBank);
            buffer.WriteCharArray(129, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SoundPermutation {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSoundBank:" + snoSoundBank.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSoundBank = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(129);
            stream.Position = offset + 136;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 140;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 144;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 148;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 152;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 156;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 160;
            Field8 = stream.ReadValueS32();
        }

    }

    public class DspEffect : GameMessage
    {
        int _Field0;
        public int Field0 { get { return _Field0; } set { if (value < 0 || value > 9) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public DspParam Field1;
        public DspParam Field2;
        public DspParam Field3;
        public DspParam Field4;
        public DspParam Field5;
        public DspParam Field6;
        public DspParam Field7;
        public DspParam Field8;
        public DspParam Field9;
        public DspParam Field10;
        public DspParam Field11;
        public DspParam Field12;
        public DspParam Field13;
        public DspParam Field14;
        public DspParam Field15;
        public DspParam Field16;
        public DspParam Field17;
        public DspParam Field18;
        public DspParam Field19;
        public DspParam Field20;
        public DspParam Field21;
        public DspParam Field22;
        public DspParam Field23;
        public DspParam Field24;
        public DspParam Field25;
        public DspParam Field26;
        public DspParam Field27;
        public DspParam Field28;
        public DspParam Field29;
        public DspParam Field30;
        public DspParam Field31;
        public DspParam Field32;
        public DspParam Field33;
        public DspParam Field34;
        public DspParam Field35;
        public DspParam Field36;
        public override int StructSize() { return 136; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(4);
            Field1 = new DspParam();
            Field1.Parse(buffer);
            Field2 = new DspParam();
            Field2.Parse(buffer);
            Field3 = new DspParam();
            Field3.Parse(buffer);
            Field4 = new DspParam();
            Field4.Parse(buffer);
            Field5 = new DspParam();
            Field5.Parse(buffer);
            Field6 = new DspParam();
            Field6.Parse(buffer);
            Field7 = new DspParam();
            Field7.Parse(buffer);
            Field8 = new DspParam();
            Field8.Parse(buffer);
            Field9 = new DspParam();
            Field9.Parse(buffer);
            Field10 = new DspParam();
            Field10.Parse(buffer);
            Field11 = new DspParam();
            Field11.Parse(buffer);
            Field12 = new DspParam();
            Field12.Parse(buffer);
            Field13 = new DspParam();
            Field13.Parse(buffer);
            Field14 = new DspParam();
            Field14.Parse(buffer);
            Field15 = new DspParam();
            Field15.Parse(buffer);
            Field16 = new DspParam();
            Field16.Parse(buffer);
            Field17 = new DspParam();
            Field17.Parse(buffer);
            Field18 = new DspParam();
            Field18.Parse(buffer);
            Field19 = new DspParam();
            Field19.Parse(buffer);
            Field20 = new DspParam();
            Field20.Parse(buffer);
            Field21 = new DspParam();
            Field21.Parse(buffer);
            Field22 = new DspParam();
            Field22.Parse(buffer);
            Field23 = new DspParam();
            Field23.Parse(buffer);
            Field24 = new DspParam();
            Field24.Parse(buffer);
            Field25 = new DspParam();
            Field25.Parse(buffer);
            Field26 = new DspParam();
            Field26.Parse(buffer);
            Field27 = new DspParam();
            Field27.Parse(buffer);
            Field28 = new DspParam();
            Field28.Parse(buffer);
            Field29 = new DspParam();
            Field29.Parse(buffer);
            Field30 = new DspParam();
            Field30.Parse(buffer);
            Field31 = new DspParam();
            Field31.Parse(buffer);
            Field32 = new DspParam();
            Field32.Parse(buffer);
            Field33 = new DspParam();
            Field33.Parse(buffer);
            Field34 = new DspParam();
            Field34.Parse(buffer);
            Field35 = new DspParam();
            Field35.Parse(buffer);
            Field36 = new DspParam();
            Field36.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(4, Field0);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
            Field3.Encode(buffer);
            Field4.Encode(buffer);
            Field5.Encode(buffer);
            Field6.Encode(buffer);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            Field11.Encode(buffer);
            Field12.Encode(buffer);
            Field13.Encode(buffer);
            Field14.Encode(buffer);
            Field15.Encode(buffer);
            Field16.Encode(buffer);
            Field17.Encode(buffer);
            Field18.Encode(buffer);
            Field19.Encode(buffer);
            Field20.Encode(buffer);
            Field21.Encode(buffer);
            Field22.Encode(buffer);
            Field23.Encode(buffer);
            Field24.Encode(buffer);
            Field25.Encode(buffer);
            Field26.Encode(buffer);
            Field27.Encode(buffer);
            Field28.Encode(buffer);
            Field29.Encode(buffer);
            Field30.Encode(buffer);
            Field31.Encode(buffer);
            Field32.Encode(buffer);
            Field33.Encode(buffer);
            Field34.Encode(buffer);
            Field35.Encode(buffer);
            Field36.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DspEffect {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            Field3.AsText(b, pad, "Field3: ");
            Field4.AsText(b, pad, "Field4: ");
            Field5.AsText(b, pad, "Field5: ");
            Field6.AsText(b, pad, "Field6: ");
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            Field11.AsText(b, pad, "Field11: ");
            Field12.AsText(b, pad, "Field12: ");
            Field13.AsText(b, pad, "Field13: ");
            Field14.AsText(b, pad, "Field14: ");
            Field15.AsText(b, pad, "Field15: ");
            Field16.AsText(b, pad, "Field16: ");
            Field17.AsText(b, pad, "Field17: ");
            Field18.AsText(b, pad, "Field18: ");
            Field19.AsText(b, pad, "Field19: ");
            Field20.AsText(b, pad, "Field20: ");
            Field21.AsText(b, pad, "Field21: ");
            Field22.AsText(b, pad, "Field22: ");
            Field23.AsText(b, pad, "Field23: ");
            Field24.AsText(b, pad, "Field24: ");
            Field25.AsText(b, pad, "Field25: ");
            Field26.AsText(b, pad, "Field26: ");
            Field27.AsText(b, pad, "Field27: ");
            Field28.AsText(b, pad, "Field28: ");
            Field29.AsText(b, pad, "Field29: ");
            Field30.AsText(b, pad, "Field30: ");
            Field31.AsText(b, pad, "Field31: ");
            Field32.AsText(b, pad, "Field32: ");
            Field33.AsText(b, pad, "Field33: ");
            Field34.AsText(b, pad, "Field34: ");
            Field35.AsText(b, pad, "Field35: ");
            Field36.AsText(b, pad, "Field36: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Field0 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field1 = new DspParam();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = new DspParam();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field3 = new DspParam();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field4 = new DspParam();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 72;
            Field5 = new DspParam();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            Field6 = new DspParam();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 104;
            Field7 = new DspParam();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 120;
            Field8 = new DspParam();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field9 = new DspParam();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field10 = new DspParam();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field11 = new DspParam();
            Field11.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field12 = new DspParam();
            Field12.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field13 = new DspParam();
            Field13.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field14 = new DspParam();
            Field14.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field15 = new DspParam();
            Field15.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field16 = new DspParam();
            Field16.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field17 = new DspParam();
            Field17.FileRead(stream, stream.Position);
            stream.Position = offset + 72;
            Field18 = new DspParam();
            Field18.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field19 = new DspParam();
            Field19.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field20 = new DspParam();
            Field20.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field21 = new DspParam();
            Field21.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field22 = new DspParam();
            Field22.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field23 = new DspParam();
            Field23.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field24 = new DspParam();
            Field24.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field25 = new DspParam();
            Field25.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field26 = new DspParam();
            Field26.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field27 = new DspParam();
            Field27.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field28 = new DspParam();
            Field28.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field29 = new DspParam();
            Field29.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field30 = new DspParam();
            Field30.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field31 = new DspParam();
            Field31.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field32 = new DspParam();
            Field32.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field33 = new DspParam();
            Field33.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field34 = new DspParam();
            Field34.FileRead(stream, stream.Position);
            stream.Position = offset + 72;
            Field35 = new DspParam();
            Field35.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            Field36 = new DspParam();
            Field36.FileRead(stream, stream.Position);
        }

    }

    public class DspParam : GameMessage
    {
        public float Field0;
        public float Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DspParam {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class PlaylistEntry : GameMessage
    {
        public int snoSoundBank;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 129) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public float Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public override int StructSize() { return 188; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSoundBank = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(129);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSoundBank);
            buffer.WriteCharArray(129, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlaylistEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSoundBank:" + snoSoundBank.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSoundBank = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(129);
            stream.Position = offset + 136;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 140;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 144;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 148;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 152;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 160;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 164;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 168;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 172;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 176;
            Field12 = stream.ReadValueS32();
        }

    }

    public class RandomMusicSoundParams : GameMessage
    {
        public int snoSound;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSound = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSound);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RandomMusicSoundParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSound:" + snoSound.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSound = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class Weather : GameMessage
    {
        public int Field0;
        public int Field1;
        public VelocityVectorPath Field2;
        public VelocityVectorPath Field3;
        public int Field4;
        public FloatPath Field5;
        public int snoWeatherParticle;
        public int snoFogParticle;
        public int snoSound;
        public float Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public int snoLightning;
        public int snoLightningEffectGroup;
        public int snoThunder;
        public float Field16;
        public float Field17;
        public float Field18;
        public WeatherStateParams Field19;
        public WeatherStateParams Field20;
        public float Field21;
        public ColorCorrectionParams Field22;
        public override int StructSize() { return 324; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = new VelocityVectorPath();
            Field2.Parse(buffer);
            Field3 = new VelocityVectorPath();
            Field3.Parse(buffer);
            Field4 = buffer.ReadInt(32);
            Field5 = new FloatPath();
            Field5.Parse(buffer);
            snoWeatherParticle = buffer.ReadInt(32);
            snoFogParticle = buffer.ReadInt(32);
            snoSound = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            snoLightning = buffer.ReadInt(32);
            snoLightningEffectGroup = buffer.ReadInt(32);
            snoThunder = buffer.ReadInt(32);
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = new WeatherStateParams();
            Field19.Parse(buffer);
            Field20 = new WeatherStateParams();
            Field20.Parse(buffer);
            Field21 = buffer.ReadFloat32();
            Field22 = new ColorCorrectionParams();
            Field22.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            Field3.Encode(buffer);
            buffer.WriteInt(32, Field4);
            Field5.Encode(buffer);
            buffer.WriteInt(32, snoWeatherParticle);
            buffer.WriteInt(32, snoFogParticle);
            buffer.WriteInt(32, snoSound);
            buffer.WriteFloat32(Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, snoLightning);
            buffer.WriteInt(32, snoLightningEffectGroup);
            buffer.WriteInt(32, snoThunder);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            Field19.Encode(buffer);
            Field20.Encode(buffer);
            buffer.WriteFloat32(Field21);
            Field22.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Weather {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("snoWeatherParticle:" + snoWeatherParticle.ToString());
            b.Append(' ', pad); b.AppendLine("snoFogParticle:" + snoFogParticle.ToString());
            b.Append(' ', pad); b.AppendLine("snoSound:" + snoSound.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("snoLightning:" + snoLightning.ToString());
            b.Append(' ', pad); b.AppendLine("snoLightningEffectGroup:" + snoLightningEffectGroup.ToString());
            b.Append(' ', pad); b.AppendLine("snoThunder:" + snoThunder.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            Field19.AsText(b, pad, "Field19: ");
            Field20.AsText(b, pad, "Field20: ");
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            Field22.AsText(b, pad, "Field22: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = new VelocityVectorPath();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 60;
            Field3 = new VelocityVectorPath();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 100;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 104;
            Field5 = new FloatPath();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 144;
            snoWeatherParticle = stream.ReadValueS32();
            stream.Position = offset + 148;
            snoFogParticle = stream.ReadValueS32();
            stream.Position = offset + 152;
            snoSound = stream.ReadValueS32();
            stream.Position = offset + 156;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 160;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 164;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 168;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 172;
            snoLightning = stream.ReadValueS32();
            stream.Position = offset + 176;
            snoLightningEffectGroup = stream.ReadValueS32();
            stream.Position = offset + 180;
            snoThunder = stream.ReadValueS32();
            stream.Position = offset + 184;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 188;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 192;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 196;
            Field19 = new WeatherStateParams();
            Field19.FileRead(stream, stream.Position);
            stream.Position = offset + 252;
            Field20 = new WeatherStateParams();
            Field20.FileRead(stream, stream.Position);
            stream.Position = offset + 308;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 312;
            Field22 = new ColorCorrectionParams();
            Field22.FileRead(stream, stream.Position);
        }

    }

    public class WeatherStateParams : GameMessage
    {
        public int Field0;
        public RGBAColor Field1;
        public float Field2;
        public float Field3;
        public RGBAColor Field4;
        public float Field5;
        public float Field6;
        public int snoSunLightScene;
        public int snoSunLightActor;
        public float Field9;
        public float Field10;
        public int snoPlayerLightScene;
        public int snoPlayerLightActor;
        public int snoLocalPlayerHeadLight;
        public override int StructSize() { return 56; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new RGBAColor();
            Field1.Parse(buffer);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = new RGBAColor();
            Field4.Parse(buffer);
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            snoSunLightScene = buffer.ReadInt(32);
            snoSunLightActor = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            snoPlayerLightScene = buffer.ReadInt(32);
            snoPlayerLightActor = buffer.ReadInt(32);
            snoLocalPlayerHeadLight = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            Field1.Encode(buffer);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            Field4.Encode(buffer);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(32, snoSunLightScene);
            buffer.WriteInt(32, snoSunLightActor);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteInt(32, snoPlayerLightScene);
            buffer.WriteInt(32, snoPlayerLightActor);
            buffer.WriteInt(32, snoLocalPlayerHeadLight);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WeatherStateParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("snoSunLightScene:" + snoSunLightScene.ToString());
            b.Append(' ', pad); b.AppendLine("snoSunLightActor:" + snoSunLightActor.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("snoPlayerLightScene:" + snoPlayerLightScene.ToString());
            b.Append(' ', pad); b.AppendLine("snoPlayerLightActor:" + snoPlayerLightActor.ToString());
            b.Append(' ', pad); b.AppendLine("snoLocalPlayerHeadLight:" + snoLocalPlayerHeadLight.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new RGBAColor();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = new RGBAColor();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            snoSunLightScene = stream.ReadValueS32();
            stream.Position = offset + 32;
            snoSunLightActor = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 44;
            snoPlayerLightScene = stream.ReadValueS32();
            stream.Position = offset + 48;
            snoPlayerLightActor = stream.ReadValueS32();
            stream.Position = offset + 52;
            snoLocalPlayerHeadLight = stream.ReadValueS32();
        }

    }

    public class ColorCorrectionParams : GameMessage
    {
        public int snoTexSaturationVignette;
        public int snoTexCorrectionA;
        public int snoTexCorrectionB;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoTexSaturationVignette = buffer.ReadInt(32);
            snoTexCorrectionA = buffer.ReadInt(32);
            snoTexCorrectionB = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoTexSaturationVignette);
            buffer.WriteInt(32, snoTexCorrectionA);
            buffer.WriteInt(32, snoTexCorrectionB);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ColorCorrectionParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoTexSaturationVignette:" + snoTexSaturationVignette.ToString());
            b.Append(' ', pad); b.AppendLine("snoTexCorrectionA:" + snoTexCorrectionA.ToString());
            b.Append(' ', pad); b.AppendLine("snoTexCorrectionB:" + snoTexCorrectionB.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoTexSaturationVignette = stream.ReadValueS32();
            stream.Position = offset + 4;
            snoTexCorrectionA = stream.ReadValueS32();
            stream.Position = offset + 8;
            snoTexCorrectionB = stream.ReadValueS32();
        }

    }

    public class Shakes : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public float Field3;
        public float Field4;
        public VectorPath Field5;
        public VectorPath Field6;
        public AnglePath Field7;
        public FloatPath Field8;
        public AnglePath Field9;
        public FloatPath Field10;
        public AnglePath Field11;
        public FloatPath Field12;
        public override int StructSize() { return 352; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = new VectorPath();
            Field5.Parse(buffer);
            Field6 = new VectorPath();
            Field6.Parse(buffer);
            Field7 = new AnglePath();
            Field7.Parse(buffer);
            Field8 = new FloatPath();
            Field8.Parse(buffer);
            Field9 = new AnglePath();
            Field9.Parse(buffer);
            Field10 = new FloatPath();
            Field10.Parse(buffer);
            Field11 = new AnglePath();
            Field11.Parse(buffer);
            Field12 = new FloatPath();
            Field12.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            Field5.Encode(buffer);
            Field6.Encode(buffer);
            Field7.Encode(buffer);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            Field11.Encode(buffer);
            Field12.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Shakes {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            Field5.AsText(b, pad, "Field5: ");
            Field6.AsText(b, pad, "Field6: ");
            Field7.AsText(b, pad, "Field7: ");
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            Field11.AsText(b, pad, "Field11: ");
            Field12.AsText(b, pad, "Field12: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field5 = new VectorPath();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 72;
            Field6 = new VectorPath();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 112;
            Field7 = new AnglePath();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 152;
            Field8 = new FloatPath();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 192;
            Field9 = new AnglePath();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 232;
            Field10 = new FloatPath();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 272;
            Field11 = new AnglePath();
            Field11.FileRead(stream, stream.Position);
            stream.Position = offset + 312;
            Field12 = new FloatPath();
            Field12.FileRead(stream, stream.Position);
        }

    }

    public class Material : GameMessage
    {
        public int Field0;
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public UberMaterial Field3;
        public override int StructSize() { return 136; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
            Field3 = new UberMaterial();
            Field3.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
            Field3.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Material {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            Field3.AsText(b, pad, "Field3: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 32;
            Field3 = new UberMaterial();
            Field3.FileRead(stream, stream.Position);
        }

    }

    public class Reverb : GameMessage
    {
        public ReverbParams Field0;
        public override int StructSize() { return 100; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new ReverbParams();
            Field0.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Reverb {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = new ReverbParams();
            Field0.FileRead(stream, stream.Position);
        }

    }

    public class ReverbParams : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public int Field9;
        public float Field10;
        public int Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public int Field21;
        public override int StructSize() { return 88; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteInt(32, Field21);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ReverbParams {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 64;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 68;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 84;
            Field21 = stream.ReadValueS32();
        }

    }

    public class AppearanceMaterial : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public SerializeData serSOAs;
        List<SubObjectAppearance> _SOAs;
        public List<SubObjectAppearance> SOAs { get { return _SOAs; } set { _SOAs = value; } }
        public override int StructSize() { return 140; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(128);
            serSOAs = new SerializeData();
            serSOAs.Parse(buffer);
            //still checking variablearrays
            this.SOAs = new List<SubObjectAppearance>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SOAs.Count; loop12++)
            {
                _SOAs[loop12] = new SubObjectAppearance();
                _SOAs[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Field0);
            serSOAs.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SOAs.Count);
            for (int loop12 = 0; loop12 < _SOAs.Count; loop12++)
            {
                _SOAs[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AppearanceMaterial {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serSOAs.AsText(b, pad, "serSOAs: ");
            for (int loop12 = 0; loop12 < _SOAs.Count; loop12++)
            {
                _SOAs[loop12].AsText(b, pad, "_SOAs[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(128);
            stream.Position = offset + 128;
            serSOAs = new SerializeData();
            serSOAs.FileRead(stream, stream.Position);
            stream.Position = offset + 136;
            //still checking variablearrays
            SOAs = new List<SubObjectAppearance>();
            for (int i = 0; i < (int)(serSOAs.Field1 / 248); i++)
            {
                stream.Position = serSOAs.Field0 + 16 + (248 * i);
                SubObjectAppearance temp12_SOAs;
                temp12_SOAs = new SubObjectAppearance();
                temp12_SOAs.FileRead(stream, stream.Position);
                _SOAs.Add(temp12_SOAs);
            }
        }

    }

    public class SubObjectAppearance : GameMessage
    {
        public int Field0;
        public int snoCloth;
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public UberMaterial Field4;
        public int snoMaterial;
        public override int StructSize() { return 248; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            snoCloth = buffer.ReadInt(32);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
            Field4 = new UberMaterial();
            Field4.Parse(buffer);
            snoMaterial = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, snoCloth);
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
            Field4.Encode(buffer);
            buffer.WriteInt(32, snoMaterial);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SubObjectAppearance {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("snoCloth:" + snoCloth.ToString());
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            Field4.AsText(b, pad, "Field4: ");
            b.Append(' ', pad); b.AppendLine("snoMaterial:" + snoMaterial.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            snoCloth = stream.ReadValueS32();
            stream.Position = offset + 8;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 24;
            Field4 = new UberMaterial();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 128;
            snoMaterial = stream.ReadValueS32();
        }

    }

    public class AppearanceLook : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 64; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AppearanceLook {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
        }

    }

    public class BoneStructure : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public AABB Field2;
        public Sphere wsBounds;
        public PRSTransform Field4;
        public PRSTransform Field5;
        public PRSTransform Field6;
        public int Field7;
        public SerializeData serShapes;
        List<CollisionShape> _Shapes;
        public List<CollisionShape> Shapes { get { return _Shapes; } set { _Shapes = value; } }
        public SerializeData serConstraint;
        List<ConstraintParameters> _Constraint;
        public List<ConstraintParameters> Constraint { get { return _Constraint; } set { _Constraint = value; } }
        public int snoParticleSystem;
        public override int StructSize() { return 236; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadInt(32);
            Field2 = new AABB();
            Field2.Parse(buffer);
            wsBounds = new Sphere();
            wsBounds.Parse(buffer);
            Field4 = new PRSTransform();
            Field4.Parse(buffer);
            Field5 = new PRSTransform();
            Field5.Parse(buffer);
            Field6 = new PRSTransform();
            Field6.Parse(buffer);
            Field7 = buffer.ReadInt(32);
            serShapes = new SerializeData();
            serShapes.Parse(buffer);
            //still checking variablearrays
            this.Shapes = new List<CollisionShape>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Shapes.Count; loop12++)
            {
                _Shapes[loop12] = new CollisionShape();
                _Shapes[loop12].Parse(buffer);
            }
            serConstraint = new SerializeData();
            serConstraint.Parse(buffer);
            //still checking variablearrays
            this.Constraint = new List<ConstraintParameters>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Constraint.Count; loop12++)
            {
                _Constraint[loop12] = new ConstraintParameters();
                _Constraint[loop12].Parse(buffer);
            }
            snoParticleSystem = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            wsBounds.Encode(buffer);
            Field4.Encode(buffer);
            Field5.Encode(buffer);
            Field6.Encode(buffer);
            buffer.WriteInt(32, Field7);
            serShapes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Shapes.Count);
            for (int loop12 = 0; loop12 < _Shapes.Count; loop12++)
            {
                _Shapes[loop12].Encode(buffer);
            }
            serConstraint.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Constraint.Count);
            for (int loop12 = 0; loop12 < _Constraint.Count; loop12++)
            {
                _Constraint[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, snoParticleSystem);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BoneStructure {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            wsBounds.AsText(b, pad, "wsBounds: ");
            Field4.AsText(b, pad, "Field4: ");
            Field5.AsText(b, pad, "Field5: ");
            Field6.AsText(b, pad, "Field6: ");
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            serShapes.AsText(b, pad, "serShapes: ");
            for (int loop12 = 0; loop12 < _Shapes.Count; loop12++)
            {
                _Shapes[loop12].AsText(b, pad, "_Shapes[loop12]: ");
            }
            serConstraint.AsText(b, pad, "serConstraint: ");
            for (int loop12 = 0; loop12 < _Constraint.Count; loop12++)
            {
                _Constraint[loop12].AsText(b, pad, "_Constraint[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("snoParticleSystem:" + snoParticleSystem.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field2 = new AABB();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 92;
            wsBounds = new Sphere();
            wsBounds.FileRead(stream, stream.Position);
            stream.Position = offset + 108;
            Field4 = new PRSTransform();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 140;
            Field5 = new PRSTransform();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 172;
            Field6 = new PRSTransform();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 204;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 208;
            serShapes = new SerializeData();
            serShapes.FileRead(stream, stream.Position);
            stream.Position = offset + 216;
            //still checking variablearrays
            Shapes = new List<CollisionShape>();
            for (int i = 0; i < (int)(serShapes.Field1 / 68); i++)
            {
                stream.Position = serShapes.Field0 + 16 + (68 * i);
                CollisionShape temp12_Shapes;
                temp12_Shapes = new CollisionShape();
                temp12_Shapes.FileRead(stream, stream.Position);
                _Shapes.Add(temp12_Shapes);
            }
            stream.Position = offset + 220;
            serConstraint = new SerializeData();
            serConstraint.FileRead(stream, stream.Position);
            stream.Position = offset + 228;
            //still checking variablearrays
            Constraint = new List<ConstraintParameters>();
            for (int i = 0; i < (int)(serConstraint.Field1 / 276); i++)
            {
                stream.Position = serConstraint.Field0 + 16 + (276 * i);
                ConstraintParameters temp12_Constraint;
                temp12_Constraint = new ConstraintParameters();
                temp12_Constraint.FileRead(stream, stream.Position);
                _Constraint.Add(temp12_Constraint);
            }
            stream.Position = offset + 232;
            snoParticleSystem = stream.ReadValueS32();
        }

    }

    public class CollisionShape : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public SerializeData serPolytope;
        List<PolytopeData> _Polytope;
        public List<PolytopeData> Polytope { get { return _Polytope; } set { _Polytope = value; } }
        public Vector3D Field9;
        public Vector3D Field10;
        public float Field11;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            serPolytope = new SerializeData();
            serPolytope.Parse(buffer);
            //still checking variablearrays
            this.Polytope = new List<PolytopeData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Polytope.Count; loop12++)
            {
                _Polytope[loop12] = new PolytopeData();
                _Polytope[loop12].Parse(buffer);
            }
            Field9 = new Vector3D();
            Field9.Parse(buffer);
            Field10 = new Vector3D();
            Field10.Parse(buffer);
            Field11 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            serPolytope.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Polytope.Count);
            for (int loop12 = 0; loop12 < _Polytope.Count; loop12++)
            {
                _Polytope[loop12].Encode(buffer);
            }
            Field9.Encode(buffer);
            Field10.Encode(buffer);
            buffer.WriteFloat32(Field11);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CollisionShape {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serPolytope.AsText(b, pad, "serPolytope: ");
            for (int loop12 = 0; loop12 < _Polytope.Count; loop12++)
            {
                _Polytope[loop12].AsText(b, pad, "_Polytope[loop12]: ");
            }
            Field9.AsText(b, pad, "Field9: ");
            Field10.AsText(b, pad, "Field10: ");
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            serPolytope = new SerializeData();
            serPolytope.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            //still checking variablearrays
            Polytope = new List<PolytopeData>();
            for (int i = 0; i < (int)(serPolytope.Field1 / 96); i++)
            {
                stream.Position = serPolytope.Field0 + 16 + (96 * i);
                PolytopeData temp12_Polytope;
                temp12_Polytope = new PolytopeData();
                temp12_Polytope.FileRead(stream, stream.Position);
                _Polytope.Add(temp12_Polytope);
            }
            stream.Position = offset + 40;
            Field9 = new Vector3D();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 52;
            Field10 = new Vector3D();
            Field10.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            Field11 = stream.ReadValueF32();
        }

    }

    public class LookAtData : GameMessage
    {
        public int Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(64);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteCharArray(64, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LookAtData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(64);
            stream.Position = offset + 68;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 84;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 88;
            Field7 = stream.ReadValueF32();
        }

    }

    public class BonePulseData : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public float Field1;
        public float Field2;
        public float Field3;
        public override int StructSize() { return 76; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BonePulseData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 68;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field3 = stream.ReadValueF32();
        }

    }

    public class GeoSet : GameMessage
    {
        public int Field0;
        public SerializeData serSubObjects;
        List<SubObject> _SubObjects;
        public List<SubObject> SubObjects { get { return _SubObjects; } set { _SubObjects = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serSubObjects = new SerializeData();
            serSubObjects.Parse(buffer);
            //still checking variablearrays
            this.SubObjects = new List<SubObject>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SubObjects.Count; loop12++)
            {
                _SubObjects[loop12] = new SubObject();
                _SubObjects[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serSubObjects.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SubObjects.Count);
            for (int loop12 = 0; loop12 < _SubObjects.Count; loop12++)
            {
                _SubObjects[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GeoSet {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serSubObjects.AsText(b, pad, "serSubObjects: ");
            for (int loop12 = 0; loop12 < _SubObjects.Count; loop12++)
            {
                _SubObjects[loop12].AsText(b, pad, "_SubObjects[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serSubObjects = new SerializeData();
            serSubObjects.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            SubObjects = new List<SubObject>();
            for (int i = 0; i < (int)(serSubObjects.Field1 / 372); i++)
            {
                stream.Position = serSubObjects.Field0 + 16 + (372 * i);
                SubObject temp12_SubObjects;
                temp12_SubObjects = new SubObject();
                temp12_SubObjects.FileRead(stream, stream.Position);
                _SubObjects.Add(temp12_SubObjects);
            }
        }

    }

    public class SubObject : GameMessage
    {
        public int Field0;
        public int nVertCount;
        public SerializeData serVertList;
        List<FatVertex> _VertList;
        public List<FatVertex> VertList { get { return _VertList; } set { _VertList = value; } }
        public SerializeData serInfluenceList;
        List<VertInfluences> _InfluenceList;
        public List<VertInfluences> InfluenceList { get { return _InfluenceList; } set { _InfluenceList = value; } }
        public int nIndexCount;
        public SerializeData serIndexList;
        List<ushort> _IndexList;
        public List<ushort> IndexList { get { return _IndexList; } set { _IndexList = value; } }
        public SerializeData serClothStructure;
        List<ClothStructure> _ClothStructure;
        public List<ClothStructure> ClothStructure { get { return _ClothStructure; } set { _ClothStructure = value; } }
        public int snoSurface;
        public int Field12;
        public float Field13;
        public string _Field14;
        public string Field14 { get { return _Field14; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field14 = value; } }
        public string _Field15;
        public string Field15 { get { return _Field15; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field15 = value; } }
        public AABB aabbBounds;
        public int nShapeCount;
        public SerializeData serShapes;
        List<CollisionShape> _Shapes;
        public List<CollisionShape> Shapes { get { return _Shapes; } set { _Shapes = value; } }
        public override int StructSize() { return 372; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            nVertCount = buffer.ReadInt(32);
            serVertList = new SerializeData();
            serVertList.Parse(buffer);
            //still checking variablearrays
            this.VertList = new List<FatVertex>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _VertList.Count; loop12++)
            {
                _VertList[loop12] = new FatVertex();
                _VertList[loop12].Parse(buffer);
            }
            serInfluenceList = new SerializeData();
            serInfluenceList.Parse(buffer);
            //still checking variablearrays
            this.InfluenceList = new List<VertInfluences>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _InfluenceList.Count; loop12++)
            {
                _InfluenceList[loop12] = new VertInfluences();
                _InfluenceList[loop12].Parse(buffer);
            }
            nIndexCount = buffer.ReadInt(32);
            serIndexList = new SerializeData();
            serIndexList.Parse(buffer);
            //still checking variablearrays
            this.IndexList = new List<ushort>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _IndexList.Count; loop12++)
            {
                _IndexList[loop12] = (ushort)buffer.ReadInt(0);
            }
            serClothStructure = new SerializeData();
            serClothStructure.Parse(buffer);
            //still checking variablearrays
            this.ClothStructure = new List<ClothStructure>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ClothStructure.Count; loop12++)
            {
                _ClothStructure[loop12] = new ClothStructure();
                _ClothStructure[loop12].Parse(buffer);
            }
            snoSurface = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadCharArray(128);
            Field15 = buffer.ReadCharArray(128);
            aabbBounds = new AABB();
            aabbBounds.Parse(buffer);
            nShapeCount = buffer.ReadInt(32);
            serShapes = new SerializeData();
            serShapes.Parse(buffer);
            //still checking variablearrays
            this.Shapes = new List<CollisionShape>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Shapes.Count; loop12++)
            {
                _Shapes[loop12] = new CollisionShape();
                _Shapes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, nVertCount);
            serVertList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _VertList.Count);
            for (int loop12 = 0; loop12 < _VertList.Count; loop12++)
            {
                _VertList[loop12].Encode(buffer);
            }
            serInfluenceList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _InfluenceList.Count);
            for (int loop12 = 0; loop12 < _InfluenceList.Count; loop12++)
            {
                _InfluenceList[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, nIndexCount);
            serIndexList.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _IndexList.Count);
            for (int loop12 = 0; loop12 < _IndexList.Count; loop12++)
            {
                buffer.WriteInt(0, _IndexList[loop12]);
            }
            serClothStructure.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ClothStructure.Count);
            for (int loop12 = 0; loop12 < _ClothStructure.Count; loop12++)
            {
                _ClothStructure[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, snoSurface);
            buffer.WriteInt(32, Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteCharArray(128, Field14);
            buffer.WriteCharArray(128, Field15);
            aabbBounds.Encode(buffer);
            buffer.WriteInt(32, nShapeCount);
            serShapes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Shapes.Count);
            for (int loop12 = 0; loop12 < _Shapes.Count; loop12++)
            {
                _Shapes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SubObject {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("nVertCount:" + nVertCount.ToString());
            serVertList.AsText(b, pad, "serVertList: ");
            for (int loop12 = 0; loop12 < _VertList.Count; loop12++)
            {
                _VertList[loop12].AsText(b, pad, "_VertList[loop12]: ");
            }
            serInfluenceList.AsText(b, pad, "serInfluenceList: ");
            for (int loop12 = 0; loop12 < _InfluenceList.Count; loop12++)
            {
                _InfluenceList[loop12].AsText(b, pad, "_InfluenceList[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("nIndexCount:" + nIndexCount.ToString());
            serIndexList.AsText(b, pad, "serIndexList: ");
            for (int loop12 = 0; loop12 < _IndexList.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_IndexList[loop12]:" + _IndexList[loop12].ToString());
            }
            serClothStructure.AsText(b, pad, "serClothStructure: ");
            for (int loop12 = 0; loop12 < _ClothStructure.Count; loop12++)
            {
                _ClothStructure[loop12].AsText(b, pad, "_ClothStructure[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("snoSurface:" + snoSurface.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            aabbBounds.AsText(b, pad, "aabbBounds: ");
            b.Append(' ', pad); b.AppendLine("nShapeCount:" + nShapeCount.ToString());
            serShapes.AsText(b, pad, "serShapes: ");
            for (int loop12 = 0; loop12 < _Shapes.Count; loop12++)
            {
                _Shapes[loop12].AsText(b, pad, "_Shapes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            nVertCount = stream.ReadValueS32();
            stream.Position = offset + 8;
            serVertList = new SerializeData();
            serVertList.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            VertList = new List<FatVertex>();
            for (int i = 0; i < (int)(serVertList.Field1 / 44); i++)
            {
                stream.Position = serVertList.Field0 + 16 + (44 * i);
                FatVertex temp12_VertList;
                temp12_VertList = new FatVertex();
                temp12_VertList.FileRead(stream, stream.Position);
                _VertList.Add(temp12_VertList);
            }
            stream.Position = offset + 20;
            serInfluenceList = new SerializeData();
            serInfluenceList.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            InfluenceList = new List<VertInfluences>();
            for (int i = 0; i < (int)(serInfluenceList.Field1 / 24); i++)
            {
                stream.Position = serInfluenceList.Field0 + 16 + (24 * i);
                VertInfluences temp12_InfluenceList;
                temp12_InfluenceList = new VertInfluences();
                temp12_InfluenceList.FileRead(stream, stream.Position);
                _InfluenceList.Add(temp12_InfluenceList);
            }
            stream.Position = offset + 32;
            nIndexCount = stream.ReadValueS32();
            stream.Position = offset + 36;
            serIndexList = new SerializeData();
            serIndexList.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            //still checking variablearrays
            IndexList = new List<ushort>();
            for (int i = 0; i < (int)(serIndexList.Field1 / 2); i++)
            {
                stream.Position = serIndexList.Field0 + 16 + (2 * i);
                ushort temp12_IndexList;
                temp12_IndexList = stream.ReadValueU16();
                _IndexList.Add(temp12_IndexList);
            }
            stream.Position = offset + 48;
            serClothStructure = new SerializeData();
            serClothStructure.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            //still checking variablearrays
            ClothStructure = new List<ClothStructure>();
            for (int i = 0; i < (int)(serClothStructure.Field1 / 88); i++)
            {
                stream.Position = serClothStructure.Field0 + 16 + (88 * i);
                ClothStructure temp12_ClothStructure;
                temp12_ClothStructure = new ClothStructure();
                temp12_ClothStructure.FileRead(stream, stream.Position);
                _ClothStructure.Add(temp12_ClothStructure);
            }
            stream.Position = offset + 60;
            snoSurface = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field14 = stream.ReadString(128);
            stream.Position = offset + 200;
            Field15 = stream.ReadString(128);
            stream.Position = offset + 328;
            aabbBounds = new AABB();
            aabbBounds.FileRead(stream, stream.Position);
            stream.Position = offset + 352;
            nShapeCount = stream.ReadValueS32();
            stream.Position = offset + 356;
            serShapes = new SerializeData();
            serShapes.FileRead(stream, stream.Position);
            stream.Position = offset + 364;
            //still checking variablearrays
            Shapes = new List<CollisionShape>();
            for (int i = 0; i < (int)(serShapes.Field1 / 68); i++)
            {
                stream.Position = serShapes.Field0 + 16 + (68 * i);
                CollisionShape temp12_Shapes;
                temp12_Shapes = new CollisionShape();
                temp12_Shapes.FileRead(stream, stream.Position);
                _Shapes.Add(temp12_Shapes);
            }
        }

    }

    public class FatVertex : GameMessage
    {
        public Vector3D Field0;
        public RGBAColor Field1;
        RGBAColor[] _Field2;
        public RGBAColor[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        RGBAColor[] _Field3;
        public RGBAColor[] Field3 { get { return _Field3; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public RGBAColor Field4;
        public RGBAColor Field5;
        public ushort Field6;
        public override int StructSize() { return 44; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Vector3D();
            Field0.Parse(buffer);
            Field1 = new RGBAColor();
            Field1.Parse(buffer);
            Field2 = new RGBAColor[2];
            for (int i = 0; i < _Field2.Length; i++)
            {
                _Field2[i] = new RGBAColor();
                _Field2[i].Parse(buffer);
            }
            Field3 = new RGBAColor[2];
            for (int i = 0; i < _Field3.Length; i++)
            {
                _Field3[i] = new RGBAColor();
                _Field3[i].Parse(buffer);
            }
            Field4 = new RGBAColor();
            Field4.Parse(buffer);
            Field5 = new RGBAColor();
            Field5.Parse(buffer);
            Field6 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            for (int i = 0; i < _Field2.Length; i++) _Field2[i].Encode(buffer);
            for (int i = 0; i < _Field3.Length; i++) _Field3[i].Encode(buffer);
            Field4.Encode(buffer);
            Field5.Encode(buffer);
            buffer.WriteInt(16, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FatVertex {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                _Field2[loop12].AsText(b, pad, "_Field2[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _Field3.Length; loop12++)
            {
                _Field3[loop12].AsText(b, pad, "_Field3[loop12]: ");
            }
            Field4.AsText(b, pad, "Field4: ");
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Vector3D();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Field1 = new RGBAColor();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field2 = new RGBAColor[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                RGBAColor temp12_Field2;
                temp12_Field2 = new RGBAColor();
                temp12_Field2.FileRead(stream, stream.Position);
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 24;
            Field3 = new RGBAColor[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                RGBAColor temp12_Field3;
                temp12_Field3 = new RGBAColor();
                temp12_Field3.FileRead(stream, stream.Position);
                _Field3[loop12] = temp12_Field3;
            }
            stream.Position = offset + 32;
            Field4 = new RGBAColor();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            Field5 = new RGBAColor();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field6 = stream.ReadValueU16();
        }

    }

    public class VertInfluences : GameMessage
    {
        Influence[] _Field0;
        public Influence[] Field0 { get { return _Field0; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new Influence[3];
            for (int i = 0; i < _Field0.Length; i++)
            {
                _Field0[i] = new Influence();
                _Field0[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _Field0.Length; i++) _Field0[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VertInfluences {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                _Field0[loop12].AsText(b, pad, "_Field0[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new Influence[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                Influence temp12_Field0;
                temp12_Field0 = new Influence();
                temp12_Field0.FileRead(stream, stream.Position);
                _Field0[loop12] = temp12_Field0;
            }
        }

    }

    public class Influence : GameMessage
    {
        public int Field0;
        public float Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Influence {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
        }

    }

    public class ClothStructure : GameMessage
    {
        public int Field0;
        public SerializeData serVertices;
        List<ClothVertex> _Vertices;
        public List<ClothVertex> Vertices { get { return _Vertices; } set { _Vertices = value; } }
        public int Field3;
        public SerializeData serFaces;
        List<ClothFace> _Faces;
        public List<ClothFace> Faces { get { return _Faces; } set { _Faces = value; } }
        public int Field6;
        public SerializeData serStaples;
        List<ClothStaple> _Staples;
        public List<ClothStaple> Staples { get { return _Staples; } set { _Staples = value; } }
        public int Field9;
        public SerializeData serDistanceConstraints;
        List<ClothConstraint> _DistanceConstraints;
        public List<ClothConstraint> DistanceConstraints { get { return _DistanceConstraints; } set { _DistanceConstraints = value; } }
        public int Field12;
        public SerializeData serBendingConstraints;
        List<ClothConstraint> _BendingConstraints;
        public List<ClothConstraint> BendingConstraints { get { return _BendingConstraints; } set { _BendingConstraints = value; } }
        public int Field15;
        public float Field16;
        public override int StructSize() { return 88; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serVertices = new SerializeData();
            serVertices.Parse(buffer);
            //still checking variablearrays
            this.Vertices = new List<ClothVertex>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12] = new ClothVertex();
                _Vertices[loop12].Parse(buffer);
            }
            Field3 = buffer.ReadInt(32);
            serFaces = new SerializeData();
            serFaces.Parse(buffer);
            //still checking variablearrays
            this.Faces = new List<ClothFace>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Faces.Count; loop12++)
            {
                _Faces[loop12] = new ClothFace();
                _Faces[loop12].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            serStaples = new SerializeData();
            serStaples.Parse(buffer);
            //still checking variablearrays
            this.Staples = new List<ClothStaple>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Staples.Count; loop12++)
            {
                _Staples[loop12] = new ClothStaple();
                _Staples[loop12].Parse(buffer);
            }
            Field9 = buffer.ReadInt(32);
            serDistanceConstraints = new SerializeData();
            serDistanceConstraints.Parse(buffer);
            //still checking variablearrays
            this.DistanceConstraints = new List<ClothConstraint>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DistanceConstraints.Count; loop12++)
            {
                _DistanceConstraints[loop12] = new ClothConstraint();
                _DistanceConstraints[loop12].Parse(buffer);
            }
            Field12 = buffer.ReadInt(32);
            serBendingConstraints = new SerializeData();
            serBendingConstraints.Parse(buffer);
            //still checking variablearrays
            this.BendingConstraints = new List<ClothConstraint>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _BendingConstraints.Count; loop12++)
            {
                _BendingConstraints[loop12] = new ClothConstraint();
                _BendingConstraints[loop12].Parse(buffer);
            }
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serVertices.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Vertices.Count);
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field3);
            serFaces.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Faces.Count);
            for (int loop12 = 0; loop12 < _Faces.Count; loop12++)
            {
                _Faces[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field6);
            serStaples.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Staples.Count);
            for (int loop12 = 0; loop12 < _Staples.Count; loop12++)
            {
                _Staples[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field9);
            serDistanceConstraints.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DistanceConstraints.Count);
            for (int loop12 = 0; loop12 < _DistanceConstraints.Count; loop12++)
            {
                _DistanceConstraints[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field12);
            serBendingConstraints.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _BendingConstraints.Count);
            for (int loop12 = 0; loop12 < _BendingConstraints.Count; loop12++)
            {
                _BendingConstraints[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field15);
            buffer.WriteFloat32(Field16);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ClothStructure {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serVertices.AsText(b, pad, "serVertices: ");
            for (int loop12 = 0; loop12 < _Vertices.Count; loop12++)
            {
                _Vertices[loop12].AsText(b, pad, "_Vertices[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            serFaces.AsText(b, pad, "serFaces: ");
            for (int loop12 = 0; loop12 < _Faces.Count; loop12++)
            {
                _Faces[loop12].AsText(b, pad, "_Faces[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serStaples.AsText(b, pad, "serStaples: ");
            for (int loop12 = 0; loop12 < _Staples.Count; loop12++)
            {
                _Staples[loop12].AsText(b, pad, "_Staples[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            serDistanceConstraints.AsText(b, pad, "serDistanceConstraints: ");
            for (int loop12 = 0; loop12 < _DistanceConstraints.Count; loop12++)
            {
                _DistanceConstraints[loop12].AsText(b, pad, "_DistanceConstraints[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            serBendingConstraints.AsText(b, pad, "serBendingConstraints: ");
            for (int loop12 = 0; loop12 < _BendingConstraints.Count; loop12++)
            {
                _BendingConstraints[loop12].AsText(b, pad, "_BendingConstraints[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serVertices = new SerializeData();
            serVertices.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            //still checking variablearrays
            Vertices = new List<ClothVertex>();
            for (int i = 0; i < (int)(serVertices.Field1 / 84); i++)
            {
                stream.Position = serVertices.Field0 + 16 + (84 * i);
                ClothVertex temp12_Vertices;
                temp12_Vertices = new ClothVertex();
                temp12_Vertices.FileRead(stream, stream.Position);
                _Vertices.Add(temp12_Vertices);
            }
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            serFaces = new SerializeData();
            serFaces.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            //still checking variablearrays
            Faces = new List<ClothFace>();
            for (int i = 0; i < (int)(serFaces.Field1 / 28); i++)
            {
                stream.Position = serFaces.Field0 + 16 + (28 * i);
                ClothFace temp12_Faces;
                temp12_Faces = new ClothFace();
                temp12_Faces.FileRead(stream, stream.Position);
                _Faces.Add(temp12_Faces);
            }
            stream.Position = offset + 32;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 36;
            serStaples = new SerializeData();
            serStaples.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            //still checking variablearrays
            Staples = new List<ClothStaple>();
            for (int i = 0; i < (int)(serStaples.Field1 / 28); i++)
            {
                stream.Position = serStaples.Field0 + 16 + (28 * i);
                ClothStaple temp12_Staples;
                temp12_Staples = new ClothStaple();
                temp12_Staples.FileRead(stream, stream.Position);
                _Staples.Add(temp12_Staples);
            }
            stream.Position = offset + 48;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 52;
            serDistanceConstraints = new SerializeData();
            serDistanceConstraints.FileRead(stream, stream.Position);
            stream.Position = offset + 60;
            //still checking variablearrays
            DistanceConstraints = new List<ClothConstraint>();
            for (int i = 0; i < (int)(serDistanceConstraints.Field1 / 24); i++)
            {
                stream.Position = serDistanceConstraints.Field0 + 16 + (24 * i);
                ClothConstraint temp12_DistanceConstraints;
                temp12_DistanceConstraints = new ClothConstraint();
                temp12_DistanceConstraints.FileRead(stream, stream.Position);
                _DistanceConstraints.Add(temp12_DistanceConstraints);
            }
            stream.Position = offset + 64;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 68;
            serBendingConstraints = new SerializeData();
            serBendingConstraints.FileRead(stream, stream.Position);
            stream.Position = offset + 76;
            //still checking variablearrays
            BendingConstraints = new List<ClothConstraint>();
            for (int i = 0; i < (int)(serBendingConstraints.Field1 / 24); i++)
            {
                stream.Position = serBendingConstraints.Field0 + 16 + (24 * i);
                ClothConstraint temp12_BendingConstraints;
                temp12_BendingConstraints = new ClothConstraint();
                temp12_BendingConstraints.FileRead(stream, stream.Position);
                _BendingConstraints.Add(temp12_BendingConstraints);
            }
            stream.Position = offset + 80;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field16 = stream.ReadValueF32();
        }

    }

    public class ClothStaple : GameMessage
    {
        public int Field0;
        int[] _Field1;
        public int[] Field1 { get { return _Field1; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        float[] _Field2;
        public float[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new int[3];
            for (int i = 0; i < _Field1.Length; i++) _Field1[i] = buffer.ReadInt(32);
            //still checking fixedarrays on basictypes
            Field2 = new float[3];
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                _Field2[loop12] = buffer.ReadFloat32();
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            for (int i = 0; i < _Field1.Length; i++) buffer.WriteInt(32, _Field1[i]);
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                buffer.WriteFloat32(_Field2[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ClothStaple {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field1[loop12]:" + _Field1[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field2[loop12]:" + _Field2[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new int[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                int temp12_Field1;
                temp12_Field1 = stream.ReadValueS32();
                _Field1[loop12] = temp12_Field1;
            }
            stream.Position = offset + 16;
            Field2 = new float[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                float temp12_Field2;
                temp12_Field2 = stream.ReadValueF32();
                _Field2[loop12] = temp12_Field2;
            }
        }

    }

    public class CollisionCapsule : GameMessage
    {
        public float Field0;
        public float Field1;
        public Hardpoint Field2;
        public override int StructSize() { return 104; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = new Hardpoint();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CollisionCapsule {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = new Hardpoint();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class Hardpoint : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public PRTransform Field2;
        public override int StructSize() { return 96; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadInt(32);
            Field2 = new PRTransform();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Hardpoint {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field2 = new PRTransform();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class StaticLight : GameMessage
    {
        public int fCastsShadows;
        public int eType;
        public Vector3D wp;
        public Vector3D wv;
        public float wdRadius;
        public int eAttenType;
        float[] _Field6;
        public float[] Field6 { get { return _Field6; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public float flAttenNearStart;
        public float flAttenNearEnd;
        public float flAttenFarStart;
        public float flAttenFarEnd;
        public int aHotspot;
        public int aFalloff;
        public RGBAColorValue rgbavalDiffuse;
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            fCastsShadows = buffer.ReadInt(32);
            eType = buffer.ReadInt(32);
            wp = new Vector3D();
            wp.Parse(buffer);
            wv = new Vector3D();
            wv.Parse(buffer);
            wdRadius = buffer.ReadFloat32();
            eAttenType = buffer.ReadInt(32);
            //still checking fixedarrays on basictypes
            Field6 = new float[3];
            for (int loop12 = 0; loop12 < _Field6.Length; loop12++)
            {
                _Field6[loop12] = buffer.ReadFloat32();
            }
            flAttenNearStart = buffer.ReadFloat32();
            flAttenNearEnd = buffer.ReadFloat32();
            flAttenFarStart = buffer.ReadFloat32();
            flAttenFarEnd = buffer.ReadFloat32();
            aHotspot = buffer.ReadInt(32);
            aFalloff = buffer.ReadInt(32);
            rgbavalDiffuse = new RGBAColorValue();
            rgbavalDiffuse.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, fCastsShadows);
            buffer.WriteInt(32, eType);
            wp.Encode(buffer);
            wv.Encode(buffer);
            buffer.WriteFloat32(wdRadius);
            buffer.WriteInt(32, eAttenType);
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field6.Length; loop12++)
            {
                buffer.WriteFloat32(_Field6[loop12]);
            }
            buffer.WriteFloat32(flAttenNearStart);
            buffer.WriteFloat32(flAttenNearEnd);
            buffer.WriteFloat32(flAttenFarStart);
            buffer.WriteFloat32(flAttenFarEnd);
            buffer.WriteInt(32, aHotspot);
            buffer.WriteInt(32, aFalloff);
            rgbavalDiffuse.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "StaticLight {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("fCastsShadows:" + fCastsShadows.ToString());
            b.Append(' ', pad); b.AppendLine("eType:" + eType.ToString());
            wp.AsText(b, pad, "wp: ");
            wv.AsText(b, pad, "wv: ");
            b.Append(' ', pad); b.AppendLine("wdRadius:" + wdRadius.ToString());
            b.Append(' ', pad); b.AppendLine("eAttenType:" + eAttenType.ToString());
            for (int loop12 = 0; loop12 < _Field6.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field6[loop12]:" + _Field6[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("flAttenNearStart:" + flAttenNearStart.ToString());
            b.Append(' ', pad); b.AppendLine("flAttenNearEnd:" + flAttenNearEnd.ToString());
            b.Append(' ', pad); b.AppendLine("flAttenFarStart:" + flAttenFarStart.ToString());
            b.Append(' ', pad); b.AppendLine("flAttenFarEnd:" + flAttenFarEnd.ToString());
            b.Append(' ', pad); b.AppendLine("aHotspot:" + aHotspot.ToString());
            b.Append(' ', pad); b.AppendLine("aFalloff:" + aFalloff.ToString());
            rgbavalDiffuse.AsText(b, pad, "rgbavalDiffuse: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            fCastsShadows = stream.ReadValueS32();
            stream.Position = offset + 4;
            eType = stream.ReadValueS32();
            stream.Position = offset + 8;
            wp = new Vector3D();
            wp.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            wv = new Vector3D();
            wv.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            wdRadius = stream.ReadValueF32();
            stream.Position = offset + 36;
            eAttenType = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field6 = new float[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                float temp12_Field6;
                temp12_Field6 = stream.ReadValueF32();
                _Field6[loop12] = temp12_Field6;
            }
            stream.Position = offset + 52;
            flAttenNearStart = stream.ReadValueF32();
            stream.Position = offset + 56;
            flAttenNearEnd = stream.ReadValueF32();
            stream.Position = offset + 60;
            flAttenFarStart = stream.ReadValueF32();
            stream.Position = offset + 64;
            flAttenFarEnd = stream.ReadValueF32();
            stream.Position = offset + 68;
            aHotspot = stream.ReadValueS32();
            stream.Position = offset + 72;
            aFalloff = stream.ReadValueS32();
            stream.Position = offset + 76;
            rgbavalDiffuse = new RGBAColorValue();
            rgbavalDiffuse.FileRead(stream, stream.Position);
        }

    }

    public class CreateHeroResultMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 2) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public EntityId Field2;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(2) + (-1);
            Field2 = new EntityId();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(2, Field1 - (-1));
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CreateHeroResultMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field2 = new EntityId();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class EntityId : GameMessage
    {
        public long High;
        public long Low;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            High = buffer.ReadInt64(64);
            Low = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, High);
            buffer.WriteInt64(64, Low);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EntityId {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("High:" + High.ToString());
            b.Append(' ', pad); b.AppendLine("Low:" + Low.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            High = stream.ReadValueS64();
            stream.Position = offset + 8;
            Low = stream.ReadValueS64();
        }

    }

    public class CreateHeroMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 49) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field2;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 0x3FFFFFFF) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Name = buffer.ReadCharArray(49);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(30);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteCharArray(49, Name);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(30, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CreateHeroMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Name = stream.ReadString(49);
            stream.Position = offset + 60;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 64;
            _Field3 = stream.ReadValueS32();
        }

    }

    public class JoinBNetGameMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public EntityId ToonEntityId;
        public GameId Field2;
        public int GameId;
        public long Field4;
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < 2 || value > 17) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int ProtocolHash;
        public int SNOPackHash;
        public override int StructSize() { return 80; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ToonEntityId = new EntityId();
            ToonEntityId.Parse(buffer);
            Field2 = new GameId();
            Field2.Parse(buffer);
            GameId = buffer.ReadInt(32);
            Field4 = buffer.ReadInt64(64);
            Field5 = buffer.ReadInt(4) + (2);
            ProtocolHash = buffer.ReadInt(32);
            SNOPackHash = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            ToonEntityId.Encode(buffer);
            Field2.Encode(buffer);
            buffer.WriteInt(32, GameId);
            buffer.WriteInt64(64, Field4);
            buffer.WriteInt(4, Field5 - (2));
            buffer.WriteInt(32, ProtocolHash);
            buffer.WriteInt(32, SNOPackHash);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "JoinBNetGameMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            ToonEntityId.AsText(b, pad, "ToonEntityId: ");
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("GameId:" + GameId.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("ProtocolHash:" + ProtocolHash.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPackHash:" + SNOPackHash.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ToonEntityId = new EntityId();
            ToonEntityId.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = new GameId();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            GameId = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field4 = stream.ReadValueS64();
            stream.Position = offset + 64;
            _Field5 = stream.ReadValueS32();
            stream.Position = offset + 68;
            ProtocolHash = stream.ReadValueS32();
            stream.Position = offset + 72;
            SNOPackHash = stream.ReadValueS32();
        }

    }

    public class GameId : GameMessage
    {
        public long Field0;
        public long Field1;
        public long Field2;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadInt64(64);
            Field2 = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteInt64(64, Field1);
            buffer.WriteInt64(64, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameId {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS64();
            stream.Position = offset + 16;
            Field2 = stream.ReadValueS64();
        }

    }

    public class BNetJoinGameRequestResultMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 5) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public GameId Field2;
        public long Field3;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 5) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public int Field5;
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < 0 || value > 0xFFFF) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public int Field7;
        public ushort Field8;
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3) + (-1);
            Field2 = new GameId();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt64(64);
            Field4 = buffer.ReadInt(3) + (-1);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(16);
            Field7 = buffer.ReadInt(32);
            Field8 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1 - (-1));
            Field2.Encode(buffer);
            buffer.WriteInt64(64, Field3);
            buffer.WriteInt(3, Field4 - (-1));
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(16, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(16, Field8);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BNetJoinGameRequestResultMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field2 = new GameId();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            Field3 = stream.ReadValueS64();
            stream.Position = offset + 48;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 56;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field8 = stream.ReadValueU16();
        }

    }

    public class RequestJoinBNetGameMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public GameId Field1;
        public EntityId Field2;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < -1 || value > 22) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 56; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new GameId();
            Field1.Parse(buffer);
            Field2 = new EntityId();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt(5) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
            buffer.WriteInt(5, Field3 - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RequestJoinBNetGameMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new GameId();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            Field2 = new EntityId();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 48;
            _Field3 = stream.ReadValueS32();
        }

    }

    public class CreateBNetGameResultMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public GameId Field2;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(2);
            Field2 = new GameId();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(2, Field1);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CreateBNetGameResultMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field2 = new GameId();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class CreateBNetGameMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 33) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 5) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public int Field4;
        public int Field5;
        public bool Field6;
        public int Field7;
        int _Field8;
        public int Field8 { get { return _Field8; } set { if (value < 0 || value > 0xFFFF) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        int _Field9;
        public int Field9 { get { return _Field9; } set { if (value < 1 || value > 8) throw new ArgumentOutOfRangeException(); _Field9 = value; } }
        public int Field10;
        public int Field11;
        public ushort Field12;
        public override int StructSize() { return 88; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadCharArray(33);
            Field2 = buffer.ReadInt(3) + (-1);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadBool();
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(16);
            Field9 = buffer.ReadInt(3) + (1);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteCharArray(33, Field1);
            buffer.WriteInt(3, Field2 - (-1));
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteBool(Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(16, Field8);
            buffer.WriteInt(3, Field9 - (1));
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(16, Field12);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CreateBNetGameMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadString(33);
            stream.Position = offset + 44;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field6 = stream.ReadValueS32() == 1;
            stream.Position = offset + 64;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 68;
            _Field8 = stream.ReadValueS32();
            stream.Position = offset + 72;
            _Field9 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 80;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field12 = stream.ReadValueU16();
        }

    }

    public class EffectGroupACDToACDMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int EffectSNOId;
        public int ActorID;
        public int TargetID;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            EffectSNOId = buffer.ReadInt(32);
            ActorID = buffer.ReadInt(32);
            TargetID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, EffectSNOId);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(32, TargetID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EffectGroupACDToACDMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("EffectSNOId:" + EffectSNOId.ToString());
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("TargetID:" + TargetID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            EffectSNOId = stream.ReadValueS32();
            stream.Position = offset + 12;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 16;
            TargetID = stream.ReadValueS32();
        }

    }

    public class RopeEffectMessageACDToPlace : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 19) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public WorldPlace Field4;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(5);
            Field4 = new WorldPlace();
            Field4.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(5, Field3);
            Field4.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RopeEffectMessageACDToPlace {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = new WorldPlace();
            Field4.FileRead(stream, stream.Position);
        }

    }

    public class WorldPlace : GameMessage
    {
        public Vector3D Position;
        public int WorldID;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Position = new Vector3D();
            Position.Parse(buffer);
            WorldID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Position.Encode(buffer);
            buffer.WriteInt(32, WorldID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WorldPlace {");
            pad += 4;
            Position.AsText(b, pad, "Position: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Position = new Vector3D();
            Position.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            WorldID = stream.ReadValueS32();
        }

    }

    public class RopeEffectMessageACDToACD : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 19) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public int Field4;
        int _Field5;
        public int Field5 { get { return _Field5; } set { if (value < 0 || value > 19) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(5);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(5);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(5, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(5, Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RopeEffectMessageACDToACD {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            _Field5 = stream.ReadValueS32();
        }

    }

    public class PlayMusicMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoMusic;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoMusic = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoMusic);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayMusicMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoMusic:" + snoMusic.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoMusic = stream.ReadValueS32();
        }

    }

    public class PlayNonPositionalSoundMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayNonPositionalSoundMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class PlayHitEffectOverrideMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayHitEffectOverrideMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
        }

    }

    public class PlayHitEffectMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public int HitDealer;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < -1 || value > 6) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public bool Field4;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            HitDealer = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(3) + (-1);
            Field4 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(32, HitDealer);
            buffer.WriteInt(3, Field3 - (-1));
            buffer.WriteBool(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayHitEffectMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("HitDealer:" + HitDealer.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            HitDealer = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32() == 1;
        }

    }

    public class PlayEffectMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        int _Effect;
        public int Effect { get { return _Effect; } set { if (value < -1 || value > 70) throw new ArgumentOutOfRangeException(); _Effect = value; } }
        public int? OptionalParameter;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            Effect = buffer.ReadInt(7) + (-1);
            if (buffer.ReadBool())
                OptionalParameter = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            buffer.WriteInt(7, Effect - (-1));
            if (OptionalParameter.HasValue)
                buffer.WriteInt(32, OptionalParameter.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayEffectMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            b.Append(' ', pad); b.AppendLine("Effect:" + Effect.ToString());
            b.Append(' ', pad); b.AppendLine("OptionalParameter:" + OptionalParameter.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Effect = stream.ReadValueS32();
            stream.Position = offset + 16;
            // OptionalParameter: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class EndConversationMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int SNOConversation;
        public int ActorId;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOConversation = buffer.ReadInt(32);
            ActorId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, SNOConversation);
            buffer.WriteInt(32, ActorId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EndConversationMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SNOConversation:" + SNOConversation.ToString());
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOConversation = stream.ReadValueS32();
            stream.Position = offset + 12;
            ActorId = stream.ReadValueS32();
        }

    }

    public class StopConvLineMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int PlayLineParamsId;
        public bool Interrupt;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PlayLineParamsId = buffer.ReadInt(32);
            Interrupt = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, PlayLineParamsId);
            buffer.WriteBool(Interrupt);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "StopConvLineMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PlayLineParamsId:" + PlayLineParamsId.ToString());
            b.Append(' ', pad); b.AppendLine("Interrupt:" + Interrupt.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            PlayLineParamsId = stream.ReadValueS32();
            stream.Position = offset + 12;
            Interrupt = stream.ReadValueS32() == 1;
        }

    }

    public class UpdateConvAutoAdvanceMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int SNOConversation;
        public int PlayLineParamsId;
        public int EndTick;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOConversation = buffer.ReadInt(32);
            PlayLineParamsId = buffer.ReadInt(32);
            EndTick = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, SNOConversation);
            buffer.WriteInt(32, PlayLineParamsId);
            buffer.WriteInt(32, EndTick);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UpdateConvAutoAdvanceMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SNOConversation:" + SNOConversation.ToString());
            b.Append(' ', pad); b.AppendLine("PlayLineParamsId:" + PlayLineParamsId.ToString());
            b.Append(' ', pad); b.AppendLine("EndTick:" + EndTick.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOConversation = stream.ReadValueS32();
            stream.Position = offset + 12;
            PlayLineParamsId = stream.ReadValueS32();
            stream.Position = offset + 16;
            EndTick = stream.ReadValueS32();
        }

    }

    public class AdvanceConvMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int SNOConversation;
        public int PlayLineParamsId;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOConversation = buffer.ReadInt(32);
            PlayLineParamsId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, SNOConversation);
            buffer.WriteInt(32, PlayLineParamsId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AdvanceConvMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SNOConversation:" + SNOConversation.ToString());
            b.Append(' ', pad); b.AppendLine("PlayLineParamsId:" + PlayLineParamsId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOConversation = stream.ReadValueS32();
            stream.Position = offset + 12;
            PlayLineParamsId = stream.ReadValueS32();
        }

    }

    public class PlayConvLineMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        int[] _Field2;
        public int[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 9) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public PlayLineParams PlayLineParams;
        public int Duration;
        public override int StructSize() { return 176; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Field2 = new int[9];
            for (int i = 0; i < _Field2.Length; i++) _Field2[i] = buffer.ReadInt(32);
            PlayLineParams = new PlayLineParams();
            PlayLineParams.Parse(buffer);
            Duration = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            for (int i = 0; i < _Field2.Length; i++) buffer.WriteInt(32, _Field2[i]);
            PlayLineParams.Encode(buffer);
            buffer.WriteInt(32, Duration);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayConvLineMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field2[loop12]:" + _Field2[loop12].ToString());
            }
            PlayLineParams.AsText(b, pad, "PlayLineParams: ");
            b.Append(' ', pad); b.AppendLine("Duration:" + Duration.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new int[9];
            for (int loop12 = 0; loop12 < 9; loop12++)
            {
                int temp12_Field2;
                temp12_Field2 = stream.ReadValueS32();
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 48;
            PlayLineParams = new PlayLineParams();
            PlayLineParams.FileRead(stream, stream.Position);
            stream.Position = offset + 172;
            Duration = stream.ReadValueS32();
        }

    }

    public class TimedEventStartedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public ActiveEvent Field1;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new ActiveEvent();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TimedEventStartedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new ActiveEvent();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class ActiveEvent : GameMessage
    {
        public int snoTimedEvent;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoTimedEvent = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoTimedEvent);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActiveEvent {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoTimedEvent:" + snoTimedEvent.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoTimedEvent = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
        }

    }

    public class ActTransitionStartedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActTransitionStartedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class PortalSpecifierMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public ResolvedPortalDestination Destination;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Destination = new ResolvedPortalDestination();
            Destination.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            Destination.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PortalSpecifierMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            Destination.AsText(b, pad, "Destination: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Destination = new ResolvedPortalDestination();
            Destination.FileRead(stream, stream.Position);
        }

    }

    public class ResolvedPortalDestination : GameMessage
    {
        public int SNOWorld;
        public int Field1;
        public int SNODestLevelArea;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOWorld = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            SNODestLevelArea = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOWorld);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, SNODestLevelArea);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ResolvedPortalDestination {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOWorld:" + SNOWorld.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("SNODestLevelArea:" + SNODestLevelArea.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOWorld = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            SNODestLevelArea = stream.ReadValueS32();
        }

    }

    public class ACDTranslateFixedUpdateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public Vector3D Field2;
        public Vector3D Field3;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new Vector3D();
            Field2.Parse(buffer);
            Field3 = new Vector3D();
            Field3.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            Field3.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateFixedUpdateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            Field3.AsText(b, pad, "Field3: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new Vector3D();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field3 = new Vector3D();
            Field3.FileRead(stream, stream.Position);
        }

    }

    public class ACDTranslateDetPathSpiralMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public Vector3D Field2;
        public Vector3D Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public DPathSinData Field7;
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new Vector3D();
            Field2.Parse(buffer);
            Field3 = new Vector3D();
            Field3.Parse(buffer);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = new DPathSinData();
            Field7.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
            Field3.Encode(buffer);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            Field7.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateDetPathSpiralMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            Field7.AsText(b, pad, "Field7: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new Vector3D();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field3 = new Vector3D();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field7 = new DPathSinData();
            Field7.FileRead(stream, stream.Position);
        }

    }

    public class DPathSinData : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DPathSinData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
        }

    }

    public class ACDTranslateDetPathSinMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 8) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public int Field4;
        public Vector3D Field5;
        public float Field6;
        public Vector3D Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public float Field13;
        public float Field14;
        public DPathSinData Field15;
        public override int StructSize() { return 104; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(4);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = new Vector3D();
            Field5.Parse(buffer);
            Field6 = buffer.ReadFloat32();
            Field7 = new Vector3D();
            Field7.Parse(buffer);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = new DPathSinData();
            Field15.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(4, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            Field5.Encode(buffer);
            buffer.WriteFloat32(Field6);
            Field7.Encode(buffer);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            Field15.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateDetPathSinMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            Field7.AsText(b, pad, "Field7: ");
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            Field15.AsText(b, pad, "Field15: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field5 = new Vector3D();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = new Vector3D();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 52;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field15 = new DPathSinData();
            Field15.FileRead(stream, stream.Position);
        }

    }

    public class ACDTranslateDetPathMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 8) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public int Field4;
        public Vector3D Field5;
        public float Field6;
        public Vector3D Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public override int StructSize() { return 88; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(4);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = new Vector3D();
            Field5.Parse(buffer);
            Field6 = buffer.ReadFloat32();
            Field7 = new Vector3D();
            Field7.Parse(buffer);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(4, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            Field5.Encode(buffer);
            buffer.WriteFloat32(Field6);
            Field7.Encode(buffer);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateDetPathMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            Field7.AsText(b, pad, "Field7: ");
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field5 = new Vector3D();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = new Vector3D();
            Field7.FileRead(stream, stream.Position);
            stream.Position = offset + 52;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 84;
            Field16 = stream.ReadValueF32();
        }

    }

    public class ACDTranslateArcMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        public Vector3D Start;
        public Vector3D Velocity;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < 0 || value > 0x1FFFFFF) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        int _FlyingAnimationTagID;
        public int FlyingAnimationTagID { get { return _FlyingAnimationTagID; } set { if (value < -1 || value > 0xFFFFF) throw new ArgumentOutOfRangeException(); _FlyingAnimationTagID = value; } }
        int _LandingAnimationTagID;
        public int LandingAnimationTagID { get { return _LandingAnimationTagID; } set { if (value < -1 || value > 0xFFFFF) throw new ArgumentOutOfRangeException(); _LandingAnimationTagID = value; } }
        public float Field7;
        public int Field8;
        public float Field9;
        public float Field10;
        public override int StructSize() { return 64; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            Start = new Vector3D();
            Start.Parse(buffer);
            Velocity = new Vector3D();
            Velocity.Parse(buffer);
            Field4 = buffer.ReadInt(25);
            FlyingAnimationTagID = buffer.ReadInt(21) + (-1);
            LandingAnimationTagID = buffer.ReadInt(21) + (-1);
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            Start.Encode(buffer);
            Velocity.Encode(buffer);
            buffer.WriteInt(25, Field4);
            buffer.WriteInt(21, FlyingAnimationTagID - (-1));
            buffer.WriteInt(21, LandingAnimationTagID - (-1));
            buffer.WriteFloat32(Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateArcMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            Start.AsText(b, pad, "Start: ");
            Velocity.AsText(b, pad, "Velocity: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("FlyingAnimationTagID:" + FlyingAnimationTagID.ToString());
            b.Append(' ', pad); b.AppendLine("LandingAnimationTagID:" + LandingAnimationTagID.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            Start = new Vector3D();
            Start.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Velocity = new Vector3D();
            Velocity.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            _Field4 = stream.ReadValueS32();
            stream.Position = offset + 40;
            _FlyingAnimationTagID = stream.ReadValueS32();
            stream.Position = offset + 44;
            _LandingAnimationTagID = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field10 = stream.ReadValueF32();
        }

    }

    public class ACDTranslateFixedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        public Vector3D Velocity;
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 0x1FFFFFF) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _AnimationTag;
        public int AnimationTag { get { return _AnimationTag; } set { if (value < -1 || value > 0xFFFFF) throw new ArgumentOutOfRangeException(); _AnimationTag = value; } }
        public int Field5;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            Velocity = new Vector3D();
            Velocity.Parse(buffer);
            Field3 = buffer.ReadInt(25);
            AnimationTag = buffer.ReadInt(21) + (-1);
            Field5 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            Velocity.Encode(buffer);
            buffer.WriteInt(25, Field3);
            buffer.WriteInt(21, AnimationTag - (-1));
            buffer.WriteInt(32, Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateFixedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            Velocity.AsText(b, pad, "Velocity: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationTag:" + AnimationTag.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            Velocity = new Vector3D();
            Velocity.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            _AnimationTag = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
        }

    }

    public class ACDTranslateFacingMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        public float Angle;
        public bool TurnImmediately;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            Angle = buffer.ReadFloat32();
            TurnImmediately = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            buffer.WriteFloat32(Angle);
            buffer.WriteBool(TurnImmediately);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDTranslateFacingMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            b.Append(' ', pad); b.AppendLine("Angle:" + Angle.ToString());
            b.Append(' ', pad); b.AppendLine("TurnImmediately:" + TurnImmediately.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            Angle = stream.ReadValueF32();
            stream.Position = offset + 16;
            TurnImmediately = stream.ReadValueS32() == 1;
        }

    }

    public class SubSceneLabel : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SubSceneLabel {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class ImpulseVector3D : GameMessage
    {
        public float Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ImpulseVector3D {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
        }

    }

    public class ActorCollisionFlags : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActorCollisionFlags {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class BuffDef : GameMessage
    {
        public SerializeData serBuffFilterPowers;
        List<int> _BuffFilterPowers;
        public List<int> BuffFilterPowers { get { return _BuffFilterPowers; } set { _BuffFilterPowers = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serBuffFilterPowers = new SerializeData();
            serBuffFilterPowers.Parse(buffer);
            //still checking variablearrays
            this.BuffFilterPowers = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _BuffFilterPowers.Count; loop12++)
            {
                _BuffFilterPowers[loop12] = buffer.ReadInt(0);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serBuffFilterPowers.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _BuffFilterPowers.Count);
            for (int loop12 = 0; loop12 < _BuffFilterPowers.Count; loop12++)
            {
                buffer.WriteInt(0, _BuffFilterPowers[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BuffDef {");
            pad += 4;
            serBuffFilterPowers.AsText(b, pad, "serBuffFilterPowers: ");
            for (int loop12 = 0; loop12 < _BuffFilterPowers.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_BuffFilterPowers[loop12]:" + _BuffFilterPowers[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serBuffFilterPowers = new SerializeData();
            serBuffFilterPowers.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            BuffFilterPowers = new List<int>();
            for (int i = 0; i < (int)(serBuffFilterPowers.Field1 / 4); i++)
            {
                stream.Position = serBuffFilterPowers.Field0 + 16 + (4 * i);
                int temp12_BuffFilterPowers;
                temp12_BuffFilterPowers = stream.ReadValueS32();
                _BuffFilterPowers.Add(temp12_BuffFilterPowers);
            }
        }

    }

    public class GizmoLocSet : GameMessage
    {
        GizmoLocSpawnType[] _SpawnType;
        public GizmoLocSpawnType[] SpawnType { get { return _SpawnType; } set { if (value != null && value.Length != 26) throw new ArgumentOutOfRangeException(); _SpawnType = value; } }
        public override int StructSize() { return 9152; }

        public override void Parse(GameBitBuffer buffer)
        {
            SpawnType = new GizmoLocSpawnType[26];
            for (int i = 0; i < _SpawnType.Length; i++)
            {
                _SpawnType[i] = new GizmoLocSpawnType();
                _SpawnType[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _SpawnType.Length; i++) _SpawnType[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GizmoLocSet {");
            pad += 4;
            for (int loop12 = 0; loop12 < _SpawnType.Length; loop12++)
            {
                _SpawnType[loop12].AsText(b, pad, "_SpawnType[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SpawnType = new GizmoLocSpawnType[26];
            for (int loop12 = 0; loop12 < 26; loop12++)
            {
                GizmoLocSpawnType temp12_SpawnType;
                temp12_SpawnType = new GizmoLocSpawnType();
                temp12_SpawnType.FileRead(stream, stream.Position);
                _SpawnType[loop12] = temp12_SpawnType;
            }
        }

    }

    public class GizmoLocSpawnEntry : GameMessage
    {
        public int Min;
        public int Max;
        public SNOName Field2;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Min = buffer.ReadInt(32);
            Max = buffer.ReadInt(32);
            Field2 = new SNOName();
            Field2.Parse(buffer);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Min);
            buffer.WriteInt(32, Max);
            Field2.Encode(buffer);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GizmoLocSpawnEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Min:" + Min.ToString());
            b.Append(' ', pad); b.AppendLine("Max:" + Max.ToString());
            Field2.AsText(b, pad, "Field2: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Min = stream.ReadValueS32();
            stream.Position = offset + 4;
            Max = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = new SNOName();
            Field2.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
        }

    }

    public class NavMeshConnectedSquare : GameMessage
    {
        public NavMeshSquare Field0;
        int[] _Field1;
        public int[] Field1 { get { return _Field1; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public int Field3;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new NavMeshSquare();
            Field0.Parse(buffer);
            Field1 = new int[4];
            for (int i = 0; i < _Field1.Length; i++) _Field1[i] = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            for (int i = 0; i < _Field1.Length; i++) buffer.WriteInt(32, _Field1[i]);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavMeshConnectedSquare {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field1[loop12]:" + _Field1[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new NavMeshSquare();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field1;
                temp12_Field1 = stream.ReadValueS32();
                _Field1[loop12] = temp12_Field1;
            }
            stream.Position = offset + 24;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field3 = stream.ReadValueS32();
        }

    }

    public class NavMeshSquare : GameMessage
    {
        public float Z;
        public int Flags;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Z = buffer.ReadFloat32();
            Flags = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Z);
            buffer.WriteInt(32, Flags);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavMeshSquare {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Z:" + Z.ToString());
            b.Append(' ', pad); b.AppendLine("Flags:" + Flags.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Z = stream.ReadValueF32();
            stream.Position = offset + 4;
            Flags = stream.ReadValueS32();
        }

    }

    public class LabelCondition : GameMessage
    {
        int _Field0;
        public int Field0 { get { return _Field0; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        int[] _Field2;
        public int[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(2);
            Field1 = buffer.ReadInt(32);
            Field2 = new int[4];
            for (int i = 0; i < _Field2.Length; i++) _Field2[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(2, Field0);
            buffer.WriteInt(32, Field1);
            for (int i = 0; i < _Field2.Length; i++) buffer.WriteInt(32, _Field2[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LabelCondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field2[loop12]:" + _Field2[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field2;
                temp12_Field2 = stream.ReadValueS32();
                _Field2[loop12] = temp12_Field2;
            }
        }

    }

    public class LabelEntry : GameMessage
    {
        public int gbidLabel;
        public int Field1;
        public float Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            gbidLabel = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, gbidLabel);
            buffer.WriteInt(32, Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LabelEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("gbidLabel:" + gbidLabel.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            gbidLabel = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
        }

    }

    public class HirelingSwapMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int HirelingId;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            HirelingId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, HirelingId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HirelingSwapMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("HirelingId:" + HirelingId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            HirelingId = stream.ReadValueS32();
        }

    }

    public class AttributesSetValuesMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        NetAttributeKeyValue[] _atKeyVals;
        public NetAttributeKeyValue[] atKeyVals { get { return _atKeyVals; } set { if (value != null && value.Length > 15) throw new ArgumentOutOfRangeException(); _atKeyVals = value; } }
        public override int StructSize() { return 256; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            atKeyVals = new NetAttributeKeyValue[buffer.ReadInt(4)];
            for (int i = 0; i < _atKeyVals.Length; i++)
            {
                _atKeyVals[i] = new NetAttributeKeyValue();
                _atKeyVals[i].Parse(buffer);
            }
            for (int i = 0; i < atKeyVals.Length; i++) { atKeyVals[i].ParseValue(buffer); };
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(4, _atKeyVals.Length);
            for (int i = 0; i < _atKeyVals.Length; i++) _atKeyVals[i].Encode(buffer);
            for (int i = 0; i < atKeyVals.Length; i++) { atKeyVals[i].EncodeValue(buffer); };
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AttributesSetValuesMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            for (int loop12 = 0; loop12 < _atKeyVals.Length; loop12++)
            {
                _atKeyVals[loop12].AsText(b, pad, "_atKeyVals[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 16;
            atKeyVals = new NetAttributeKeyValue[15];
            for (int loop12 = 0; loop12 < 15; loop12++)
            {
                NetAttributeKeyValue temp12_atKeyVals;
                temp12_atKeyVals = new NetAttributeKeyValue();
                temp12_atKeyVals.FileRead(stream, stream.Position);
                _atKeyVals[loop12] = temp12_atKeyVals;
            }
        }

    }

    public class AttributeSetValueMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public NetAttributeKeyValue Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Field2 = new NetAttributeKeyValue();
            Field2.Parse(buffer);
            Field2.ParseValue(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            Field2.Encode(buffer);
            Field2.EncodeValue(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AttributeSetValueMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new NetAttributeKeyValue();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class NPCInteractOptionsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        NPCInteraction[] _tNPCInteraction;
        public NPCInteraction[] tNPCInteraction { get { return _tNPCInteraction; } set { if (value != null && value.Length > 20) throw new ArgumentOutOfRangeException(); _tNPCInteraction = value; } }
        int _Type;
        public int Type { get { return _Type; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public override int StructSize() { return 340; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            tNPCInteraction = new NPCInteraction[buffer.ReadInt(5)];
            for (int i = 0; i < _tNPCInteraction.Length; i++)
            {
                _tNPCInteraction[i] = new NPCInteraction();
                _tNPCInteraction[i].Parse(buffer);
            }
            Type = buffer.ReadInt(2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(5, _tNPCInteraction.Length);
            for (int i = 0; i < _tNPCInteraction.Length; i++) _tNPCInteraction[i].Encode(buffer);
            buffer.WriteInt(2, Type);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NPCInteractOptionsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            for (int loop12 = 0; loop12 < _tNPCInteraction.Length; loop12++)
            {
                _tNPCInteraction[loop12].AsText(b, pad, "_tNPCInteraction[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            tNPCInteraction = new NPCInteraction[20];
            for (int loop12 = 0; loop12 < 20; loop12++)
            {
                NPCInteraction temp12_tNPCInteraction;
                temp12_tNPCInteraction = new NPCInteraction();
                temp12_tNPCInteraction.FileRead(stream, stream.Position);
                _tNPCInteraction[loop12] = temp12_tNPCInteraction;
            }
            stream.Position = offset + 336;
            _Type = stream.ReadValueS32();
        }

    }

    public class NPCInteraction : GameMessage
    {
        int _Type;
        public int Type { get { return _Type; } set { if (value < 0 || value > 8) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public int ConversationSNO;
        public int Field2;
        int _State;
        public int State { get { return _State; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _State = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Type = buffer.ReadInt(4);
            ConversationSNO = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            State = buffer.ReadInt(2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(4, Type);
            buffer.WriteInt(32, ConversationSNO);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(2, State);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NPCInteraction {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            b.Append(' ', pad); b.AppendLine("ConversationSNO:" + ConversationSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("State:" + State.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Type = stream.ReadValueS32();
            stream.Position = offset + 4;
            ConversationSNO = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _State = stream.ReadValueS32();
        }

    }

    public class VisualInventoryMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public VisualEquipment EquipmentList;
        public override int StructSize() { return 140; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            EquipmentList = new VisualEquipment();
            EquipmentList.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            EquipmentList.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VisualInventoryMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            EquipmentList.AsText(b, pad, "EquipmentList: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            EquipmentList = new VisualEquipment();
            EquipmentList.FileRead(stream, stream.Position);
        }

    }

    public class VisualEquipment : GameMessage
    {
        VisualItem[] _Equipment;
        public VisualItem[] Equipment { get { return _Equipment; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Equipment = value; } }
        public override int StructSize() { return 128; }

        public override void Parse(GameBitBuffer buffer)
        {
            Equipment = new VisualItem[8];
            for (int i = 0; i < _Equipment.Length; i++)
            {
                _Equipment[i] = new VisualItem();
                _Equipment[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _Equipment.Length; i++) _Equipment[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VisualEquipment {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Equipment.Length; loop12++)
            {
                _Equipment[loop12].AsText(b, pad, "_Equipment[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Equipment = new VisualItem[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                VisualItem temp12_Equipment;
                temp12_Equipment = new VisualItem();
                temp12_Equipment.FileRead(stream, stream.Position);
                _Equipment[loop12] = temp12_Equipment;
            }
        }

    }

    public class VisualItem : GameMessage
    {
        public int GbId;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 21) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 14) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < -1 || value > 30) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            GbId = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(5);
            Field2 = buffer.ReadInt(4);
            Field3 = buffer.ReadInt(5) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, GbId);
            buffer.WriteInt(5, Field1);
            buffer.WriteInt(4, Field2);
            buffer.WriteInt(5, Field3 - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VisualItem {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("GbId:" + GbId.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            GbId = stream.ReadValueS32();
            stream.Position = offset + 4;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field3 = stream.ReadValueS32();
        }

    }

    public class VersionsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int SNOPackHash;
        public int ProtocolHash;
        public string _Version;
        public string Version { get { return _Version; } set { if (value != null && value.Length > 32) throw new ArgumentOutOfRangeException(); _Version = value; } }
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOPackHash = buffer.ReadInt(32);
            ProtocolHash = buffer.ReadInt(32);
            Version = buffer.ReadCharArray(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, SNOPackHash);
            buffer.WriteInt(32, ProtocolHash);
            buffer.WriteCharArray(32, Version);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VersionsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SNOPackHash:" + SNOPackHash.ToString());
            b.Append(' ', pad); b.AppendLine("ProtocolHash:" + ProtocolHash.ToString());
            b.Append(' ', pad); b.AppendLine("Version:" + Version.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOPackHash = stream.ReadValueS32();
            stream.Position = offset + 12;
            ProtocolHash = stream.ReadValueS32();
            stream.Position = offset + 16;
            Version = stream.ReadString(32);
        }

    }

    public class LogoutTickTimeMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public bool Field1;
        public int Ticks;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadBool();
            Ticks = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteBool(Field1);
            buffer.WriteInt(32, Ticks);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LogoutTickTimeMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Ticks:" + Ticks.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32() == 1;
            stream.Position = offset + 12;
            Ticks = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
        }

    }

    public class HirelingRequestLearnSkillMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int HirelingID;
        public int PowerSNOId;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            HirelingID = buffer.ReadInt(32);
            PowerSNOId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, HirelingID);
            buffer.WriteInt(32, PowerSNOId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HirelingRequestLearnSkillMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("HirelingID:" + HirelingID.ToString());
            b.Append(' ', pad); b.AppendLine("PowerSNOId:" + PowerSNOId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            HirelingID = stream.ReadValueS32();
            stream.Position = offset + 12;
            PowerSNOId = stream.ReadValueS32();
        }

    }

    public class PlayErrorSoundMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayErrorSoundMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class RequestBuffCancelMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int PowerSNOId;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PowerSNOId = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, PowerSNOId);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RequestBuffCancelMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PowerSNOId:" + PowerSNOId.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            PowerSNOId = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class GameTestingSamplingStartMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameTestingSamplingStartMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class SalvageResultsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int gbidOriginalItem;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 10) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        int[] _gbidNewItems;
        public int[] gbidNewItems { get { return _gbidNewItems; } set { if (value != null && value.Length != 10) throw new ArgumentOutOfRangeException(); _gbidNewItems = value; } }
        public override int StructSize() { return 60; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            gbidOriginalItem = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(4) + (-1);
            Field3 = buffer.ReadInt(32);
            gbidNewItems = new int[10];
            for (int i = 0; i < _gbidNewItems.Length; i++) _gbidNewItems[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, gbidOriginalItem);
            buffer.WriteInt(4, Field2 - (-1));
            buffer.WriteInt(32, Field3);
            for (int i = 0; i < _gbidNewItems.Length; i++) buffer.WriteInt(32, _gbidNewItems[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SalvageResultsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("gbidOriginalItem:" + gbidOriginalItem.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            for (int loop12 = 0; loop12 < _gbidNewItems.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_gbidNewItems[loop12]:" + _gbidNewItems[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            gbidOriginalItem = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            gbidNewItems = new int[10];
            for (int loop12 = 0; loop12 < 10; loop12++)
            {
                int temp12_gbidNewItems;
                temp12_gbidNewItems = stream.ReadValueS32();
                _gbidNewItems[loop12] = temp12_gbidNewItems;
            }
        }

    }

    public class DebugActorTooltipMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 524; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadCharArray(512);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteCharArray(512, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DebugActorTooltipMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadString(512);
        }

    }

    public class PlayerWarpedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public float Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(4);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerWarpedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueF32();
        }

    }

    public class PlayCutsceneMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayCutsceneMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class BossZoomMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public float Field1;
        public float Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BossZoomMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueF32();
        }

    }

    public class CameraYawMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public float Field1;
        public bool Field2;
        public float Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
            buffer.WriteBool(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CameraYawMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            Field3 = stream.ReadValueF32();
        }

    }

    public class CameraZoomMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public float Field1;
        public bool Field2;
        public float Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
            buffer.WriteBool(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CameraZoomMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            Field3 = stream.ReadValueF32();
        }

    }

    public class DebugDrawPrimMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public Vector3D Field4;
        public Vector3D Field5;
        public float Field6;
        public float Field7;
        public int Field8;
        public RGBAColor Field9;
        public string _Field10;
        public string Field10 { get { return _Field10; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field10 = value; } }
        public override int StructSize() { return 188; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = new Vector3D();
            Field4.Parse(buffer);
            Field5 = new Vector3D();
            Field5.Parse(buffer);
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadInt(32);
            Field9 = new RGBAColor();
            Field9.Parse(buffer);
            Field10 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            Field4.Encode(buffer);
            Field5.Encode(buffer);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteInt(32, Field8);
            Field9.Encode(buffer);
            buffer.WriteCharArray(128, Field10);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DebugDrawPrimMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            Field9.AsText(b, pad, "Field9: ");
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = new Vector3D();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            Field5 = new Vector3D();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field9 = new RGBAColor();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 60;
            Field10 = stream.ReadString(128);
        }

    }

    public class CameraFocusMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public bool Field2;
        public float Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteBool(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CameraFocusMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            Field3 = stream.ReadValueF32();
        }

    }

    public class InterstitialMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 5) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public bool Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3) + (-1);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1 - (-1));
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InterstitialMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class ActTransitionMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 1000) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public bool Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(10) + (-1);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(10, Field1 - (-1));
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActTransitionMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class EncounterInviteStateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EncounterInviteStateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 9;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 10;
            Field3 = stream.ReadValueS32();
        }

    }

    public class BossEncounterMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int snoEncounter;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            snoEncounter = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, snoEncounter);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BossEncounterMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("snoEncounter:" + snoEncounter.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            snoEncounter = stream.ReadValueS32();
        }

    }

    public class TradeMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 9) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public int Field3;
        public long Field4;
        public int Field5;
        int[] _Field6;
        public int[] Field6 { get { return _Field6; } set { if (value != null && value.Length != 5) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public override int StructSize() { return 56; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(4);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt64(64);
            Field5 = buffer.ReadInt(32);
            Field6 = new int[5];
            for (int i = 0; i < _Field6.Length; i++) _Field6[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt64(64, Field4);
            buffer.WriteInt(32, Field5);
            for (int i = 0; i < _Field6.Length; i++) buffer.WriteInt(32, _Field6[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TradeMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            for (int loop12 = 0; loop12 < _Field6.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field6[loop12]:" + _Field6[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field4 = stream.ReadValueS64();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field6 = new int[5];
            for (int loop12 = 0; loop12 < 5; loop12++)
            {
                int temp12_Field6;
                temp12_Field6 = stream.ReadValueS32();
                _Field6[loop12] = temp12_Field6;
            }
        }

    }

    public class PlayerDeSyncSnapMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public WorldPlace Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new WorldPlace();
            Field1.Parse(buffer);
            Field2 = buffer.ReadInt(2);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteInt(2, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerDeSyncSnapMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new WorldPlace();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field3 = stream.ReadValueS32();
        }

    }

    public class PlayerQuestMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(4) + (-1);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, Field1 - (-1));
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerQuestMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class PRTransformMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public PRTransform Field1;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new PRTransform();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PRTransformMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new PRTransform();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class LoreMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int LoreSNOId;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            LoreSNOId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, LoreSNOId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LoreMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("LoreSNOId:" + LoreSNOId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            LoreSNOId = stream.ReadValueS32();
        }

    }

    public class TryWaypointMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 25) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(5) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(5, Field2 - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TryWaypointMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
        }

    }

    public class WaypointActivatedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public bool Field4;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteBool(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WaypointActivatedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32() == 1;
        }

    }

    public class WeatherOverrideMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int SNOWorld;
        public float Field2;
        public float Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            SNOWorld = buffer.ReadInt(32);
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, SNOWorld);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WeatherOverrideMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("SNOWorld:" + SNOWorld.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            SNOWorld = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueF32();
        }

    }

    public class BlizzconCVarsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public bool Field1;
        public bool Field2;
        public bool Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadBool();
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteBool(Field1);
            buffer.WriteBool(Field2);
            buffer.WriteBool(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BlizzconCVarsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32() == 1;
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32() == 1;
        }

    }

    public class WorldDeletedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int WorldID;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            WorldID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, WorldID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WorldDeletedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            WorldID = stream.ReadValueS32();
        }

    }

    public class WorldStatusMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int WorldID;
        public bool Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            WorldID = buffer.ReadInt(32);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, WorldID);
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WorldStatusMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            WorldID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class RemoveRagdollMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RemoveRagdollMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class FloatingAmountMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public WorldPlace Place;
        public int Amount;
        public int? OptionalGoldAmount;
        int _Type;
        public int Type { get { return _Type; } set { if (value < 0 || value > 32) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Place = new WorldPlace();
            Place.Parse(buffer);
            Amount = buffer.ReadInt(32);
            if (buffer.ReadBool())
                OptionalGoldAmount = buffer.ReadInt(32);
            Type = buffer.ReadInt(6);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Place.Encode(buffer);
            buffer.WriteInt(32, Amount);
            if (OptionalGoldAmount.HasValue)
                buffer.WriteInt(32, OptionalGoldAmount.Value);
            buffer.WriteInt(6, Type);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FloatingAmountMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Place.AsText(b, pad, "Place: ");
            b.Append(' ', pad); b.AppendLine("Amount:" + Amount.ToString());
            b.Append(' ', pad); b.AppendLine("OptionalGoldAmount:" + OptionalGoldAmount.ToString());
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Place = new WorldPlace();
            Place.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Amount = stream.ReadValueS32();
            stream.Position = offset + 28;
            // OptionalGoldAmount: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 36;
            _Type = stream.ReadValueS32();
        }

    }

    public class FloatingNumberMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public float Number;
        int _Type;
        public int Type { get { return _Type; } set { if (value < 0 || value > 32) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Number = buffer.ReadFloat32();
            Type = buffer.ReadInt(6);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteFloat32(Number);
            buffer.WriteInt(6, Type);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FloatingNumberMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("Number:" + Number.ToString());
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Number = stream.ReadValueF32();
            stream.Position = offset + 16;
            _Type = stream.ReadValueS32();
        }

    }

    public class SaviorMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SaviorMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class LowHealthCombatMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public float Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LowHealthCombatMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class KillCounterUpdateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public int Field3;
        public bool Field4;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(2);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(2, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteBool(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "KillCounterUpdateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32() == 1;
        }

    }

    public class ACDLookAtMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDLookAtMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class ReturnPointInfoMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoLevelArea;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoLevelArea = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoLevelArea);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ReturnPointInfoMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoLevelArea:" + snoLevelArea.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoLevelArea = stream.ReadValueS32();
        }

    }

    public class HearthPortalInfoMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoLevelArea;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoLevelArea = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoLevelArea);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HearthPortalInfoMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoLevelArea:" + snoLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoLevelArea = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class SavePointInfoMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoLevelArea;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoLevelArea = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoLevelArea);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SavePointInfoMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoLevelArea:" + snoLevelArea.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoLevelArea = stream.ReadValueS32();
        }

    }

    public class MapRevealSceneMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ChunkID;
        public int SceneSNO;
        public PRTransform Transform;
        public int WorldID;
        public bool MiniMapVisibility;
        public override int StructSize() { return 52; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ChunkID = buffer.ReadInt(32);
            SceneSNO = buffer.ReadInt(32);
            Transform = new PRTransform();
            Transform.Parse(buffer);
            WorldID = buffer.ReadInt(32);
            MiniMapVisibility = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ChunkID);
            buffer.WriteInt(32, SceneSNO);
            Transform.Encode(buffer);
            buffer.WriteInt(32, WorldID);
            buffer.WriteBool(MiniMapVisibility);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MapRevealSceneMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ChunkID:" + ChunkID.ToString());
            b.Append(' ', pad); b.AppendLine("SceneSNO:" + SceneSNO.ToString());
            Transform.AsText(b, pad, "Transform: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            b.Append(' ', pad); b.AppendLine("MiniMapVisibility:" + MiniMapVisibility.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ChunkID = stream.ReadValueS32();
            stream.Position = offset + 12;
            SceneSNO = stream.ReadValueS32();
            stream.Position = offset + 16;
            Transform = new PRTransform();
            Transform.FileRead(stream, stream.Position);
            stream.Position = offset + 44;
            WorldID = stream.ReadValueS32();
            stream.Position = offset + 48;
            MiniMapVisibility = stream.ReadValueS32() == 1;
        }

    }

    public class DeathFadeTimeMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 0x708) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < 0 || value > 0x708) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public bool Field4;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(11) + (-1);
            Field3 = buffer.ReadInt(11);
            Field4 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(11, Field2 - (-1));
            buffer.WriteInt(11, Field3);
            buffer.WriteBool(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DeathFadeTimeMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32() == 1;
        }

    }

    public class RevealTeamMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 22) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int _Field3;
        public int Field3 { get { return _Field3; } set { if (value < -1 || value > 1) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(5) + (-1);
            Field2 = buffer.ReadInt(2);
            Field3 = buffer.ReadInt(2) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(5, Field1 - (-1));
            buffer.WriteInt(2, Field2);
            buffer.WriteInt(2, Field3 - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RevealTeamMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            _Field3 = stream.ReadValueS32();
        }

    }

    public class HirelingInfoUpdateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _HirelingIndex;
        public int HirelingIndex { get { return _HirelingIndex; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _HirelingIndex = value; } }
        public bool Field2;
        public int Field3;
        int _Level;
        public int Level { get { return _Level; } set { if (value < 0 || value > 127) throw new ArgumentOutOfRangeException(); _Level = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            HirelingIndex = buffer.ReadInt(2);
            Field2 = buffer.ReadBool();
            Field3 = buffer.ReadInt(32);
            Level = buffer.ReadInt(7);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(2, HirelingIndex);
            buffer.WriteBool(Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(7, Level);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HirelingInfoUpdateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("HirelingIndex:" + HirelingIndex.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Level:" + Level.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _HirelingIndex = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            _Level = stream.ReadValueS32();
        }

    }

    public class RitualTetherEffectMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public WorldPlace Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new WorldPlace();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RitualTetherEffectMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new WorldPlace();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class PlasmaAttachMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlasmaAttachMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class UIElementMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 12) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public bool Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(4) + (-1);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, Field1 - (-1));
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UIElementMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class PlayerIntValMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerIntValMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class TrickleMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        public int ActorSNO;
        public WorldPlace WorldLocation;
        int? _PlayerIndex;
        public int? PlayerIndex { get { return _PlayerIndex; } set { if (value.HasValue && (value.Value < -1 || value.Value > 7)) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        public int LevelAreaSNO;
        public float? Field6;
        int _Field7;
        public int Field7 { get { return _Field7; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        int _Field8;
        public int Field8 { get { return _Field8; } set { if (value < 0 || value > 63) throw new ArgumentOutOfRangeException(); _Field8 = value; } }
        public int? Field9;
        public int? MinimapTextureSNO;
        public int? Field11;
        public int? Field12;
        public int? StringListSNO;
        public float? Field14;
        public float? Field15;
        public bool? Field16;
        public override int StructSize() { return 124; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            ActorSNO = buffer.ReadInt(32);
            WorldLocation = new WorldPlace();
            WorldLocation.Parse(buffer);
            if (buffer.ReadBool())
                PlayerIndex = buffer.ReadInt(4) + (-1);
            LevelAreaSNO = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadInt(4);
            Field8 = buffer.ReadInt(6);
            if (buffer.ReadBool())
                Field9 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                MinimapTextureSNO = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field11 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field12 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                StringListSNO = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field14 = buffer.ReadFloat32();
            if (buffer.ReadBool())
                Field15 = buffer.ReadFloat32();
            if (buffer.ReadBool())
                Field16 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            buffer.WriteInt(32, ActorSNO);
            WorldLocation.Encode(buffer);
            if (PlayerIndex.HasValue)
                buffer.WriteInt(4, PlayerIndex.Value - (-1));
            buffer.WriteInt(32, LevelAreaSNO);
            if (Field6.HasValue)
                buffer.WriteFloat32(Field6);
            buffer.WriteInt(4, Field7);
            buffer.WriteInt(6, Field8);
            if (Field9.HasValue)
                buffer.WriteInt(32, Field9.Value);
            if (MinimapTextureSNO.HasValue)
                buffer.WriteInt(32, MinimapTextureSNO.Value);
            if (Field11.HasValue)
                buffer.WriteInt(32, Field11.Value);
            if (Field12.HasValue)
                buffer.WriteInt(32, Field12.Value);
            if (StringListSNO.HasValue)
                buffer.WriteInt(32, StringListSNO.Value);
            if (Field14.HasValue)
                buffer.WriteFloat32(Field14);
            if (Field15.HasValue)
                buffer.WriteFloat32(Field15);
            if (Field16.HasValue)
                buffer.WriteBool(Field16.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TrickleMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            b.Append(' ', pad); b.AppendLine("ActorSNO:" + ActorSNO.ToString());
            WorldLocation.AsText(b, pad, "WorldLocation: ");
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            b.Append(' ', pad); b.AppendLine("LevelAreaSNO:" + LevelAreaSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("MinimapTextureSNO:" + MinimapTextureSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("StringListSNO:" + StringListSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            ActorSNO = stream.ReadValueS32();
            stream.Position = offset + 16;
            WorldLocation = new WorldPlace();
            WorldLocation.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            // PlayerIndex: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 40;
            LevelAreaSNO = stream.ReadValueS32();
            stream.Position = offset + 44;
            // : type DT_OPTIONAL[float] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 52;
            _Field7 = stream.ReadValueS32();
            stream.Position = offset + 56;
            _Field8 = stream.ReadValueS32();
            stream.Position = offset + 60;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 68;
            // MinimapTextureSNO: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 76;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 84;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 92;
            // StringListSNO: type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 100;
            // : type DT_OPTIONAL[float] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 108;
            // : type DT_OPTIONAL[float] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 116;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class ACDChangeGBHandleMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public GBHandle Field2;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new GBHandle();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDChangeGBHandleMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new GBHandle();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class GBHandle : GameMessage
    {
        int _Type;
        public int Type { get { return _Type; } set { if (value < -2 || value > 37) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public int GBID;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Type = buffer.ReadInt(6) + (-2);
            GBID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(6, Type - (-2));
            buffer.WriteInt(32, GBID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GBHandle {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            b.Append(' ', pad); b.AppendLine("GBID:" + GBID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Type = stream.ReadValueS32();
            stream.Position = offset + 4;
            GBID = stream.ReadValueS32();
        }

    }

    public class AimTargetMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public WorldPlace Field4;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(3) + (-1);
            Field3 = buffer.ReadInt(32);
            Field4 = new WorldPlace();
            Field4.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(3, Field2 - (-1));
            buffer.WriteInt(32, Field3);
            Field4.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AimTargetMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = new WorldPlace();
            Field4.FileRead(stream, stream.Position);
        }

    }

    public class PlayerLevel : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _PlayerIndex;
        public int PlayerIndex { get { return _PlayerIndex; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        int _Level;
        public int Level { get { return _Level; } set { if (value < 0 || value > 127) throw new ArgumentOutOfRangeException(); _Level = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PlayerIndex = buffer.ReadInt(3);
            Level = buffer.ReadInt(7);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, PlayerIndex);
            buffer.WriteInt(7, Level);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerLevel {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            b.Append(' ', pad); b.AppendLine("Level:" + Level.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _PlayerIndex = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Level = stream.ReadValueS32();
        }

    }

    public class ComplexEffectAddMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ComplexEffectAddMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field7 = stream.ReadValueS32();
        }

    }

    public class FlippyMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public int SNOParticleEffect;
        public int SNOFlippyActor;
        public Vector3D Destination;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            SNOParticleEffect = buffer.ReadInt(32);
            SNOFlippyActor = buffer.ReadInt(32);
            Destination = new Vector3D();
            Destination.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(32, SNOParticleEffect);
            buffer.WriteInt(32, SNOFlippyActor);
            Destination.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FlippyMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("SNOParticleEffect:" + SNOParticleEffect.ToString());
            b.Append(' ', pad); b.AppendLine("SNOFlippyActor:" + SNOFlippyActor.ToString());
            Destination.AsText(b, pad, "Destination: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            SNOParticleEffect = stream.ReadValueS32();
            stream.Position = offset + 16;
            SNOFlippyActor = stream.ReadValueS32();
            stream.Position = offset + 20;
            Destination = new Vector3D();
            Destination.FileRead(stream, stream.Position);
        }

    }

    public class PetDetachMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public bool Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PetDetachMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class PetMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 31) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int PetId;
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < -1 || value > 23) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(5);
            PetId = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(5) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1);
            buffer.WriteInt(5, Field2);
            buffer.WriteInt(32, PetId);
            buffer.WriteInt(5, Field4 - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PetMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("PetId:" + PetId.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            PetId = stream.ReadValueS32();
            stream.Position = offset + 20;
            _Field4 = stream.ReadValueS32();
        }

    }

    public class HelperDetachMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HelperDetachMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class InventoryRequestSocketMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryRequestSocketMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class InventoryRequestUseMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int UsedItem;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int UsedOnItem;
        public WorldPlace Location;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            UsedItem = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(3) + (-1);
            UsedOnItem = buffer.ReadInt(32);
            Location = new WorldPlace();
            Location.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, UsedItem);
            buffer.WriteInt(3, Field2 - (-1));
            buffer.WriteInt(32, UsedOnItem);
            Location.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryRequestUseMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("UsedItem:" + UsedItem.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("UsedOnItem:" + UsedOnItem.ToString());
            Location.AsText(b, pad, "Location: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            UsedItem = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            UsedOnItem = stream.ReadValueS32();
            stream.Position = offset + 20;
            Location = new WorldPlace();
            Location.FileRead(stream, stream.Position);
        }

    }

    public class InventoryStackTransferMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int FromID;
        public int ToID;
        public long Amount;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            FromID = buffer.ReadInt(32);
            ToID = buffer.ReadInt(32);
            Amount = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, FromID);
            buffer.WriteInt(32, ToID);
            buffer.WriteInt64(64, Amount);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryStackTransferMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("FromID:" + FromID.ToString());
            b.Append(' ', pad); b.AppendLine("ToID:" + ToID.ToString());
            b.Append(' ', pad); b.AppendLine("Amount:" + Amount.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            FromID = stream.ReadValueS32();
            stream.Position = offset + 12;
            ToID = stream.ReadValueS32();
            stream.Position = offset + 16;
            Amount = stream.ReadValueS64();
        }

    }

    public class InventorySplitStackMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int FromID;
        public long Amount;
        public InvLoc InvLoc;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            FromID = buffer.ReadInt(32);
            Amount = buffer.ReadInt64(64);
            InvLoc = new InvLoc();
            InvLoc.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, FromID);
            buffer.WriteInt64(64, Amount);
            InvLoc.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventorySplitStackMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("FromID:" + FromID.ToString());
            b.Append(' ', pad); b.AppendLine("Amount:" + Amount.ToString());
            InvLoc.AsText(b, pad, "InvLoc: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            FromID = stream.ReadValueS32();
            stream.Position = offset + 16;
            Amount = stream.ReadValueS64();
            stream.Position = offset + 24;
            InvLoc = new InvLoc();
            InvLoc.FileRead(stream, stream.Position);
        }

    }

    public class InventoryDropStackPortionMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public long Field2;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt64(64, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryDropStackPortionMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field2 = stream.ReadValueS64();
        }

    }

    public class InventoryRequestMoveMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ItemID;
        public InvLoc Location;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ItemID = buffer.ReadInt(32);
            Location = new InvLoc();
            Location.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ItemID);
            Location.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryRequestMoveMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ItemID:" + ItemID.ToString());
            Location.AsText(b, pad, "Location: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ItemID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Location = new InvLoc();
            Location.FileRead(stream, stream.Position);
        }

    }

    public class KillCountMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "KillCountMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
        }

    }

    public class VoteKickMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public string _Field3;
        public string Field3 { get { return _Field3; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 528; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(4) + (-1);
            Field2 = buffer.ReadInt(4) + (-1);
            Field3 = buffer.ReadCharArray(512);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, Field1 - (-1));
            buffer.WriteInt(4, Field2 - (-1));
            buffer.WriteCharArray(512, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "VoteKickMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadString(512);
        }

    }

    public class TryChatMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 6) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public string _Field3;
        public string Field3 { get { return _Field3; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 528; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(4) + (-1);
            Field3 = buffer.ReadCharArray(512);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1);
            buffer.WriteInt(4, Field2 - (-1));
            buffer.WriteCharArray(512, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TryChatMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadString(512);
        }

    }

    public class LoopingAnimationPowerMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoPower;
        public int snoData0;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoPower = buffer.ReadInt(32);
            snoData0 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoPower);
            buffer.WriteInt(32, snoData0);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LoopingAnimationPowerMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoPower:" + snoPower.ToString());
            b.Append(' ', pad); b.AppendLine("snoData0:" + snoData0.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoPower = stream.ReadValueS32();
            stream.Position = offset + 12;
            snoData0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
        }

    }

    public class SecondaryAnimationPowerMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int PowerSNO;
        public AnimPreplayData Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PowerSNO = buffer.ReadInt(32);
            if (buffer.ReadBool())
            {
                Field2 = new AnimPreplayData();
                Field2.Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, PowerSNO);
            if (Field2 != null)
                Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SecondaryAnimationPowerMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PowerSNO:" + PowerSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            PowerSNO = stream.ReadValueS32();
            stream.Position = offset + 12;
            // : type DT_OPTIONAL[AnimPreplayData] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class AnimPreplayData : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AnimPreplayData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
        }

    }

    public class TargetMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 3) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int TargetID;
        public WorldPlace Field3;
        public int PowerSNO;
        public int Field5;
        int _Field6;
        public int Field6 { get { return _Field6; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field6 = value; } }
        public AnimPreplayData Field7;
        public override int StructSize() { return 60; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3) + (-1);
            TargetID = buffer.ReadInt(32);
            Field3 = new WorldPlace();
            Field3.Parse(buffer);
            PowerSNO = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(2);
            if (buffer.ReadBool())
            {
                Field7 = new AnimPreplayData();
                Field7.Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1 - (-1));
            buffer.WriteInt(32, TargetID);
            Field3.Encode(buffer);
            buffer.WriteInt(32, PowerSNO);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(2, Field6);
            if (Field7 != null)
                Field7.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TargetMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("TargetID:" + TargetID.ToString());
            Field3.AsText(b, pad, "Field3: ");
            b.Append(' ', pad); b.AppendLine("PowerSNO:" + PowerSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            TargetID = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = new WorldPlace();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            PowerSNO = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 40;
            _Field6 = stream.ReadValueS32();
            stream.Position = offset + 44;
            // : type DT_OPTIONAL[AnimPreplayData] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class PlayerActorSetInitialMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        int _PlayerIndex;
        public int PlayerIndex { get { return _PlayerIndex; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            PlayerIndex = buffer.ReadInt(3);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            buffer.WriteInt(3, PlayerIndex);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerActorSetInitialMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            _PlayerIndex = stream.ReadValueS32();
        }

    }

    public class ProjectileStickMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public Vector3D Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ProjectileStickMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
        }

    }

    public class AttributeDeleteMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AttributeDeleteMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class AttributeCreateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AttributeCreateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
        }

    }

    public class AffixMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int[] _aAffixGBIDs;
        public int[] aAffixGBIDs { get { return _aAffixGBIDs; } set { if (value != null && value.Length > 32) throw new ArgumentOutOfRangeException(); _aAffixGBIDs = value; } }
        public override int StructSize() { return 148; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(2);
            aAffixGBIDs = new int[buffer.ReadInt(6)];
            for (int i = 0; i < _aAffixGBIDs.Length; i++) _aAffixGBIDs[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(2, Field2);
            buffer.WriteInt(6, aAffixGBIDs.Length);
            for (int i = 0; i < _aAffixGBIDs.Length; i++) buffer.WriteInt(32, _aAffixGBIDs[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AffixMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            for (int loop12 = 0; loop12 < _aAffixGBIDs.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_aAffixGBIDs[loop12]:" + _aAffixGBIDs[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            aAffixGBIDs = new int[32];
            for (int loop12 = 0; loop12 < 32; loop12++)
            {
                int temp12_aAffixGBIDs;
                temp12_aAffixGBIDs = stream.ReadValueS32();
                _aAffixGBIDs[loop12] = temp12_aAffixGBIDs;
            }
        }

    }

    public class ACDPickupFailedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ItemID;
        int _Reason;
        public int Reason { get { return _Reason; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _Reason = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ItemID = buffer.ReadInt(32);
            Reason = buffer.ReadInt(3);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ItemID);
            buffer.WriteInt(3, Reason);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDPickupFailedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ItemID:" + ItemID.ToString());
            b.Append(' ', pad); b.AppendLine("Reason:" + Reason.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ItemID = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Reason = stream.ReadValueS32();
        }

    }

    public class ACDChangeActorMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDChangeActorMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class ACDGroupMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public int Group1Hash;
        public int Group2Hash;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Group1Hash = buffer.ReadInt(32);
            Group2Hash = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(32, Group1Hash);
            buffer.WriteInt(32, Group2Hash);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDGroupMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("Group1Hash:" + Group1Hash.ToString());
            b.Append(' ', pad); b.AppendLine("Group2Hash:" + Group2Hash.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Group1Hash = stream.ReadValueS32();
            stream.Position = offset + 16;
            Group2Hash = stream.ReadValueS32();
        }

    }

    public class ACDShearMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public float Amount;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Amount = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteFloat32(Amount);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDShearMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("Amount:" + Amount.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            Amount = stream.ReadValueF32();
        }

    }

    public class ACDWorldPositionMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public WorldLocationMessageData WorldLocation;
        public override int StructSize() { return 48; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            WorldLocation = new WorldLocationMessageData();
            WorldLocation.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            WorldLocation.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDWorldPositionMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            WorldLocation.AsText(b, pad, "WorldLocation: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            WorldLocation = new WorldLocationMessageData();
            WorldLocation.FileRead(stream, stream.Position);
        }

    }

    public class WorldLocationMessageData : GameMessage
    {
        public float Scale;
        public PRTransform Transform;
        public int WorldID;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Scale = buffer.ReadFloat32();
            Transform = new PRTransform();
            Transform.Parse(buffer);
            WorldID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Scale);
            Transform.Encode(buffer);
            buffer.WriteInt(32, WorldID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WorldLocationMessageData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Scale:" + Scale.ToString());
            Transform.AsText(b, pad, "Transform: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Scale = stream.ReadValueF32();
            stream.Position = offset + 4;
            Transform = new PRTransform();
            Transform.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            WorldID = stream.ReadValueS32();
        }

    }

    public class ACDInventoryUpdateActorSNO : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ItemID;
        public int ItemSNO;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ItemID = buffer.ReadInt(32);
            ItemSNO = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ItemID);
            buffer.WriteInt(32, ItemSNO);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDInventoryUpdateActorSNO {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ItemID:" + ItemID.ToString());
            b.Append(' ', pad); b.AppendLine("ItemSNO:" + ItemSNO.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ItemID = stream.ReadValueS32();
            stream.Position = offset + 12;
            ItemSNO = stream.ReadValueS32();
        }

    }

    public class ACDInventoryPositionMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ItemId;
        public InventoryLocationMessageData InventoryLocation;
        public int Field3;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ItemId = buffer.ReadInt(32);
            InventoryLocation = new InventoryLocationMessageData();
            InventoryLocation.Parse(buffer);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ItemId);
            InventoryLocation.Encode(buffer);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDInventoryPositionMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ItemId:" + ItemId.ToString());
            InventoryLocation.AsText(b, pad, "InventoryLocation: ");
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ItemId = stream.ReadValueS32();
            stream.Position = offset + 12;
            InventoryLocation = new InventoryLocationMessageData();
            InventoryLocation.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            Field3 = stream.ReadValueS32();
        }

    }

    public class PlayerEnterKnownMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _PlayerIndex;
        public int PlayerIndex { get { return _PlayerIndex; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        public int ActorId;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PlayerIndex = buffer.ReadInt(3);
            ActorId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, PlayerIndex);
            buffer.WriteInt(32, ActorId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerEnterKnownMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _PlayerIndex = stream.ReadValueS32();
            stream.Position = offset + 12;
            ActorId = stream.ReadValueS32();
        }

    }

    public class RevealWorldMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int WorldID;
        public int WorldSNO;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            WorldID = buffer.ReadInt(32);
            WorldSNO = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, WorldID);
            buffer.WriteInt(32, WorldSNO);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RevealWorldMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            b.Append(' ', pad); b.AppendLine("WorldSNO:" + WorldSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            WorldID = stream.ReadValueS32();
            stream.Position = offset + 12;
            WorldSNO = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field8 = stream.ReadValueS32();
        }

    }

    public class EnterWorldMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public Vector3D EnterPosition;
        public int WorldID;
        public int WorldSNO;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            EnterPosition = new Vector3D();
            EnterPosition.Parse(buffer);
            WorldID = buffer.ReadInt(32);
            WorldSNO = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            EnterPosition.Encode(buffer);
            buffer.WriteInt(32, WorldID);
            buffer.WriteInt(32, WorldSNO);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EnterWorldMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            EnterPosition.AsText(b, pad, "EnterPosition: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            b.Append(' ', pad); b.AppendLine("WorldSNO:" + WorldSNO.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            EnterPosition = new Vector3D();
            EnterPosition.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            WorldID = stream.ReadValueS32();
            stream.Position = offset + 24;
            WorldSNO = stream.ReadValueS32();
        }

    }

    public class GameSetupMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameSetupMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class ConnectionEstablishedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _PlayerIndex;
        public int PlayerIndex { get { return _PlayerIndex; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _PlayerIndex = value; } }
        public int Field2;
        public int SNOPackHash;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            PlayerIndex = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(32);
            SNOPackHash = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, PlayerIndex);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, SNOPackHash);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConnectionEstablishedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("PlayerIndex:" + PlayerIndex.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPackHash:" + SNOPackHash.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _PlayerIndex = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            SNOPackHash = stream.ReadValueS32();
        }

    }

    public class JoinLANGameMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public string _Field3;
        public string Field3 { get { return _Field3; } set { if (value != null && value.Length > 49) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        int _Field4;
        public int Field4 { get { return _Field4; } set { if (value < 2 || value > 17) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 196; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadCharArray(128);
            Field3 = buffer.ReadCharArray(49);
            Field4 = buffer.ReadInt(4) + (2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteCharArray(128, Field2);
            buffer.WriteCharArray(49, Field3);
            buffer.WriteInt(4, Field4 - (2));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "JoinLANGameMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadString(128);
            stream.Position = offset + 140;
            Field3 = stream.ReadString(49);
            stream.Position = offset + 192;
            _Field4 = stream.ReadValueS32();
        }

    }

    public class ANNDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ANNDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
        }

    }

    public class BroadcastTextMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 520; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadCharArray(512);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteCharArray(512, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BroadcastTextMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadString(512);
        }

    }

    public class DisplayGameTextMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int? Field2;
        public int? Field3;
        public override int StructSize() { return 536; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadCharArray(512);
            if (buffer.ReadBool())
                Field2 = buffer.ReadInt(32);
            if (buffer.ReadBool())
                Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteCharArray(512, Field1);
            if (Field2.HasValue)
                buffer.WriteInt(32, Field2.Value);
            if (Field3.HasValue)
                buffer.WriteInt(32, Field3.Value);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DisplayGameTextMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadString(512);
            stream.Position = offset + 520;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 528;
            // : type DT_OPTIONAL[int] hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class GBIDDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GBIDDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class SNONameDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public SNOName Name;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Name = new SNOName();
            Name.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Name.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SNONameDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Name.AsText(b, pad, "Name: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Name = new SNOName();
            Name.FileRead(stream, stream.Position);
        }

    }

    public class SNODataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SNODataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class FloatDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public float Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FloatDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueF32();
        }

    }

    public class UInt64DataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public long Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt64(64, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "UInt64DataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS64();
        }

    }

    public class Int64DataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public long Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt64(64, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Int64DataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS64();
        }

    }

    public class IntDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "IntDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class NetworkAddressMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public ushort Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(16, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NetworkAddressMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueU16();
        }

    }

    public class DWordDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DWordDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class DataIDDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DataIDDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
        }

    }

    public class PlayerIndexMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < -1 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(4) + (-1);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(4, Field1 - (-1));
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerIndexMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
        }

    }

    public class ByteDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public byte Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = (byte)buffer.ReadInt(8);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(8, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ByteDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = (byte)stream.ReadByte();
        }

    }

    public class BoolDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public bool Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteBool(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BoolDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32() == 1;
        }

    }

    public class GenericBlobMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Size;
        public override int StructSize() { return 12; }

        public byte[] Data;
        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Size = buffer.ReadInt(32);
            Data = buffer.ReadBlob(Size);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Size);
            buffer.WriteBlob(Size, Data);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GenericBlobMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Size:" + Size.ToString());
            //blob text (?)
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Size = stream.ReadValueS32();
        }

    }

    public class SimpleMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SimpleMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
        }

    }

    public class SetIdleAnimationMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        public int AnimationSNO;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            AnimationSNO = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(32, AnimationSNO);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SetIdleAnimationMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationSNO:" + AnimationSNO.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            AnimationSNO = stream.ReadValueS32();
        }

    }

    public class PlayAnimationMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorID;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 12) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public float Field3;
        PlayAnimationMessageSpec[] _tAnim;
        public PlayAnimationMessageSpec[] tAnim { get { return _tAnim; } set { if (value != null && value.Length > 3) throw new ArgumentOutOfRangeException(); _tAnim = value; } }
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorID = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(4);
            Field3 = buffer.ReadFloat32();
            tAnim = new PlayAnimationMessageSpec[buffer.ReadInt(2)];
            for (int i = 0; i < _tAnim.Length; i++)
            {
                _tAnim[i] = new PlayAnimationMessageSpec();
                _tAnim[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorID);
            buffer.WriteInt(4, Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteInt(2, _tAnim.Length);
            for (int i = 0; i < _tAnim.Length; i++) _tAnim[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayAnimationMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorID:" + ActorID.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            for (int loop12 = 0; loop12 < _tAnim.Length; loop12++)
            {
                _tAnim[loop12].AsText(b, pad, "_tAnim[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorID = stream.ReadValueS32();
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 24;
            tAnim = new PlayAnimationMessageSpec[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                PlayAnimationMessageSpec temp12_tAnim;
                temp12_tAnim = new PlayAnimationMessageSpec();
                temp12_tAnim.FileRead(stream, stream.Position);
                _tAnim[loop12] = temp12_tAnim;
            }
        }

    }

    public class PlayAnimationMessageSpec : GameMessage
    {
        public int Duration;
        public int AnimationSNO;
        public int PermutationIndex;
        public float Speed;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Duration = buffer.ReadInt(32);
            AnimationSNO = buffer.ReadInt(32);
            PermutationIndex = buffer.ReadInt(32);
            Speed = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Duration);
            buffer.WriteInt(32, AnimationSNO);
            buffer.WriteInt(32, PermutationIndex);
            buffer.WriteFloat32(Speed);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayAnimationMessageSpec {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Duration:" + Duration.ToString());
            b.Append(' ', pad); b.AppendLine("AnimationSNO:" + AnimationSNO.ToString());
            b.Append(' ', pad); b.AppendLine("PermutationIndex:" + PermutationIndex.ToString());
            b.Append(' ', pad); b.AppendLine("Speed:" + Speed.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Duration = stream.ReadValueS32();
            stream.Position = offset + 4;
            AnimationSNO = stream.ReadValueS32();
            stream.Position = offset + 8;
            PermutationIndex = stream.ReadValueS32();
            stream.Position = offset + 12;
            Speed = stream.ReadValueF32();
        }

    }

    public class Message : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public float Field5;
        public float Field6;
        public int Field7;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(32, Field7);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Message {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field7 = stream.ReadValueS32();
        }

    }

    public class GoldModifiedMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public bool Modified;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Modified = buffer.ReadBool();
            Field2 = buffer.ReadInt(2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteBool(Modified);
            buffer.WriteInt(2, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GoldModifiedMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Modified:" + Modified.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Modified = stream.ReadValueS32() == 1;
            stream.Position = offset + 12;
            _Field2 = stream.ReadValueS32();
        }

    }

    public class ACDCollFlagsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int ActorId;
        int _CollFlags;
        public int CollFlags { get { return _CollFlags; } set { if (value < 0 || value > 0xFFF) throw new ArgumentOutOfRangeException(); _CollFlags = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            ActorId = buffer.ReadInt(32);
            CollFlags = buffer.ReadInt(12);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, ActorId);
            buffer.WriteInt(12, CollFlags);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ACDCollFlagsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("ActorId:" + ActorId.ToString());
            b.Append(' ', pad); b.AppendLine("CollFlags:" + CollFlags.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            ActorId = stream.ReadValueS32();
            stream.Position = offset + 12;
            _CollFlags = stream.ReadValueS32();
        }

    }

    public class RareItemNameMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public RareItemName Field2;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new RareItemName();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareItemNameMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new RareItemName();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class RareItemName : GameMessage
    {
        public bool Field0;
        public int snoAffixStringList;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadBool();
            snoAffixStringList = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteBool(Field0);
            buffer.WriteInt(32, snoAffixStringList);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareItemName {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("snoAffixStringList:" + snoAffixStringList.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32() == 1;
            stream.Position = offset + 4;
            snoAffixStringList = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class RareMonsterNamesMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        int[] _Field2;
        public int[] Field2 { get { return _Field2; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        int[] _Field3;
        public int[] Field3 { get { return _Field3; } set { if (value != null && value.Length != 8) throw new ArgumentOutOfRangeException(); _Field3 = value; } }
        public override int StructSize() { return 52; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = new int[2];
            for (int i = 0; i < _Field2.Length; i++) _Field2[i] = buffer.ReadInt(32);
            Field3 = new int[8];
            for (int i = 0; i < _Field3.Length; i++) _Field3[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            for (int i = 0; i < _Field2.Length; i++) buffer.WriteInt(32, _Field2[i]);
            for (int i = 0; i < _Field3.Length; i++) buffer.WriteInt(32, _Field3[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareMonsterNamesMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            for (int loop12 = 0; loop12 < _Field2.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field2[loop12]:" + _Field2[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field3.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field3[loop12]:" + _Field3[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = new int[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                int temp12_Field2;
                temp12_Field2 = stream.ReadValueS32();
                _Field2[loop12] = temp12_Field2;
            }
            stream.Position = offset + 20;
            Field3 = new int[8];
            for (int loop12 = 0; loop12 < 8; loop12++)
            {
                int temp12_Field3;
                temp12_Field3 = stream.ReadValueS32();
                _Field3[loop12] = temp12_Field3;
            }
        }

    }

    public class LogoutContextMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public bool Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteBool(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LogoutContextMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32() == 1;
        }

    }

    public class HeroStateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public HeroStateData State;
        public override int StructSize() { return 17060; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            State = new HeroStateData();
            State.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            State.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HeroStateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            State.AsText(b, pad, "State: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            State = new HeroStateData();
            State.FileRead(stream, stream.Position);
        }

    }

    public class HirelingSavedData : GameMessage
    {
        HirelingInfo[] _HirelingInfos;
        public HirelingInfo[] HirelingInfos { get { return _HirelingInfos; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _HirelingInfos = value; } }
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public override int StructSize() { return 152; }

        public override void Parse(GameBitBuffer buffer)
        {
            HirelingInfos = new HirelingInfo[4];
            for (int i = 0; i < _HirelingInfos.Length; i++)
            {
                _HirelingInfos[i] = new HirelingInfo();
                _HirelingInfos[i].Parse(buffer);
            }
            Field1 = buffer.ReadInt(2);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _HirelingInfos.Length; i++) _HirelingInfos[i].Encode(buffer);
            buffer.WriteInt(2, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HirelingSavedData {");
            pad += 4;
            for (int loop12 = 0; loop12 < _HirelingInfos.Length; loop12++)
            {
                _HirelingInfos[loop12].AsText(b, pad, "_HirelingInfos[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            HirelingInfos = new HirelingInfo[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                HirelingInfo temp12_HirelingInfos;
                temp12_HirelingInfos = new HirelingInfo();
                temp12_HirelingInfos.FileRead(stream, stream.Position);
                _HirelingInfos[loop12] = temp12_HirelingInfos;
            }
            stream.Position = offset + 144;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 148;
            Field2 = stream.ReadValueS32();
        }

    }

    public class HirelingInfo : GameMessage
    {
        int _HirelingIndex;
        public int HirelingIndex { get { return _HirelingIndex; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _HirelingIndex = value; } }
        public int Field1;
        int _Level;
        public int Level { get { return _Level; } set { if (value < 0 || value > 127) throw new ArgumentOutOfRangeException(); _Level = value; } }
        public int Field3;
        public bool Field4;
        public int Skill1SNOId;
        public int Skill2SNOId;
        public int Skill3SNOId;
        public int Skill4SNOId;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            HirelingIndex = buffer.ReadInt(2);
            Field1 = buffer.ReadInt(32);
            Level = buffer.ReadInt(7);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadBool();
            Skill1SNOId = buffer.ReadInt(32);
            Skill2SNOId = buffer.ReadInt(32);
            Skill3SNOId = buffer.ReadInt(32);
            Skill4SNOId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(2, HirelingIndex);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(7, Level);
            buffer.WriteInt(32, Field3);
            buffer.WriteBool(Field4);
            buffer.WriteInt(32, Skill1SNOId);
            buffer.WriteInt(32, Skill2SNOId);
            buffer.WriteInt(32, Skill3SNOId);
            buffer.WriteInt(32, Skill4SNOId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HirelingInfo {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("HirelingIndex:" + HirelingIndex.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Level:" + Level.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Skill1SNOId:" + Skill1SNOId.ToString());
            b.Append(' ', pad); b.AppendLine("Skill2SNOId:" + Skill2SNOId.ToString());
            b.Append(' ', pad); b.AppendLine("Skill3SNOId:" + Skill3SNOId.ToString());
            b.Append(' ', pad); b.AppendLine("Skill4SNOId:" + Skill4SNOId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _HirelingIndex = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            _Level = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32() == 1;
            stream.Position = offset + 20;
            Skill1SNOId = stream.ReadValueS32();
            stream.Position = offset + 24;
            Skill2SNOId = stream.ReadValueS32();
            stream.Position = offset + 28;
            Skill3SNOId = stream.ReadValueS32();
            stream.Position = offset + 32;
            Skill4SNOId = stream.ReadValueS32();
        }

    }

    public class LearnedLore : GameMessage
    {
        public int Count;
        int[] _m_snoLoreLearned;
        public int[] m_snoLoreLearned { get { return _m_snoLoreLearned; } set { if (value != null && value.Length != 256) throw new ArgumentOutOfRangeException(); _m_snoLoreLearned = value; } }
        public override int StructSize() { return 1028; }

        public override void Parse(GameBitBuffer buffer)
        {
            Count = buffer.ReadInt(32);
            m_snoLoreLearned = new int[256];
            for (int i = 0; i < _m_snoLoreLearned.Length; i++) _m_snoLoreLearned[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Count);
            for (int i = 0; i < _m_snoLoreLearned.Length; i++) buffer.WriteInt(32, _m_snoLoreLearned[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LearnedLore {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Count:" + Count.ToString());
            for (int loop12 = 0; loop12 < _m_snoLoreLearned.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_m_snoLoreLearned[loop12]:" + _m_snoLoreLearned[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Count = stream.ReadValueS32();
            stream.Position = offset + 4;
            m_snoLoreLearned = new int[256];
            for (int loop12 = 0; loop12 < 256; loop12++)
            {
                int temp12_m_snoLoreLearned;
                temp12_m_snoLoreLearned = stream.ReadValueS32();
                _m_snoLoreLearned[loop12] = temp12_m_snoLoreLearned;
            }
        }

    }

    public class SavePointData : GameMessage
    {
        public int snoWorld;
        public int SavepointId;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoWorld = buffer.ReadInt(32);
            SavepointId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoWorld);
            buffer.WriteInt(32, SavepointId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SavePointData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoWorld:" + snoWorld.ToString());
            b.Append(' ', pad); b.AppendLine("SavepointId:" + SavepointId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoWorld = stream.ReadValueS32();
            stream.Position = offset + 4;
            SavepointId = stream.ReadValueS32();
        }

    }

    public class PlayerQuestRewardHistoryEntry : GameMessage
    {
        public int snoQuest;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoQuest = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoQuest);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(2, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerQuestRewardHistoryEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoQuest:" + snoQuest.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoQuest = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            _Field2 = stream.ReadValueS32();
        }

    }

    public class Marker : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Type;
        public PRTransform PRTransform;
        public SNOName Field3;
        public SerializeData serTagMap;
        public DT_TAGMAP TagMap;
        public int Field6;
        public SerializeData serMarkerLinks;
        List<MarkerLink> _MarkerLinks;
        public List<MarkerLink> MarkerLinks { get { return _MarkerLinks; } set { _MarkerLinks = value; } }
        public override int StructSize() { return 208; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(128);
            Type = buffer.ReadInt(32);
            PRTransform = new PRTransform();
            PRTransform.Parse(buffer);
            Field3 = new SNOName();
            Field3.Parse(buffer);
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            TagMap = new DT_TAGMAP();
            TagMap.Parse(buffer);
            Field6 = buffer.ReadInt(32);
            serMarkerLinks = new SerializeData();
            serMarkerLinks.Parse(buffer);
            //still checking variablearrays
            this.MarkerLinks = new List<MarkerLink>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MarkerLinks.Count; loop12++)
            {
                _MarkerLinks[loop12] = new MarkerLink();
                _MarkerLinks[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Name);
            buffer.WriteInt(32, Type);
            PRTransform.Encode(buffer);
            Field3.Encode(buffer);
            serTagMap.Encode(buffer);
            TagMap.Encode(buffer);
            buffer.WriteInt(32, Field6);
            serMarkerLinks.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MarkerLinks.Count);
            for (int loop12 = 0; loop12 < _MarkerLinks.Count; loop12++)
            {
                _MarkerLinks[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Marker {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            PRTransform.AsText(b, pad, "PRTransform: ");
            Field3.AsText(b, pad, "Field3: ");
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("TagMap:" + TagMap.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            serMarkerLinks.AsText(b, pad, "serMarkerLinks: ");
            for (int loop12 = 0; loop12 < _MarkerLinks.Count; loop12++)
            {
                _MarkerLinks[loop12].AsText(b, pad, "_MarkerLinks[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Name = stream.ReadString(128);
            stream.Position = offset + 128;
            Type = stream.ReadValueS32();
            stream.Position = offset + 132;
            PRTransform = new PRTransform();
            PRTransform.FileRead(stream, stream.Position);
            stream.Position = offset + 160;
            Field3 = new SNOName();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 168;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 176;
            // TagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 184;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 188;
            serMarkerLinks = new SerializeData();
            serMarkerLinks.FileRead(stream, stream.Position);
            stream.Position = offset + 200;
            //still checking variablearrays
            MarkerLinks = new List<MarkerLink>();
            for (int i = 0; i < (int)(serMarkerLinks.Field1 / 256); i++)
            {
                stream.Position = serMarkerLinks.Field0 + 16 + (256 * i);
                MarkerLink temp12_MarkerLinks;
                temp12_MarkerLinks = new MarkerLink();
                temp12_MarkerLinks.FileRead(stream, stream.Position);
                _MarkerLinks.Add(temp12_MarkerLinks);
            }
        }

    }

    public class MarkerLink : GameMessage
    {
        public string _String1;
        public string String1 { get { return _String1; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _String1 = value; } }
        public string _String2;
        public string String2 { get { return _String2; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _String2 = value; } }
        public override int StructSize() { return 256; }

        public override void Parse(GameBitBuffer buffer)
        {
            String1 = buffer.ReadCharArray(128);
            String2 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, String1);
            buffer.WriteCharArray(128, String2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MarkerLink {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("String1:" + String1.ToString());
            b.Append(' ', pad); b.AppendLine("String2:" + String2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            String1 = stream.ReadString(128);
            stream.Position = offset + 128;
            String2 = stream.ReadString(128);
        }

    }

    public class dmMeshTriangle : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public ushort Field6;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(16, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "dmMeshTriangle {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueU16();
        }

    }

    public class dmMeshEdge : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "dmMeshEdge {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
        }

    }

    public class dmMeshNode : GameMessage
    {
        public int Field0;
        public ushort Field1;
        public ushort Field2;
        public byte Field3;
        public byte Field4;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = (ushort)buffer.ReadInt(16);
            Field2 = (ushort)buffer.ReadInt(16);
            Field3 = (byte)buffer.ReadInt(8);
            Field4 = (byte)buffer.ReadInt(8);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(16, Field1);
            buffer.WriteInt(16, Field2);
            buffer.WriteInt(8, Field3);
            buffer.WriteInt(8, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "dmMeshNode {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueU16();
            stream.Position = offset + 6;
            Field2 = stream.ReadValueU16();
            stream.Position = offset + 8;
            Field3 = (byte)stream.ReadByte();
            stream.Position = offset + 9;
            Field4 = (byte)stream.ReadByte();
        }

    }

    public class ActorGroup : GameMessage
    {
        public int UHash;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            UHash = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, UHash);
            buffer.WriteCharArray(64, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActorGroup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("UHash:" + UHash.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            UHash = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(64);
        }

    }

    public class GlobalScriptVariable : GameMessage
    {
        public int UHash;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 32) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public float Field2;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            UHash = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(32);
            Field2 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, UHash);
            buffer.WriteCharArray(32, Field1);
            buffer.WriteFloat32(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GlobalScriptVariable {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("UHash:" + UHash.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            UHash = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(32);
            stream.Position = offset + 36;
            Field2 = stream.ReadValueF32();
        }

    }

    public class StartLocationName : GameMessage
    {
        public int Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteCharArray(64, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "StartLocationName {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(64);
        }

    }

    public class BannerTexturePair : GameMessage
    {
        public int SNOTexture;
        public int Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOTexture = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOTexture);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BannerTexturePair {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOTexture:" + SNOTexture.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOTexture = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class BannerColorSet : GameMessage
    {
        RGBAColor[] _Color;
        public RGBAColor[] Color { get { return _Color; } set { if (value != null && value.Length != 2) throw new ArgumentOutOfRangeException(); _Color = value; } }
        public string _String1;
        public string String1 { get { return _String1; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _String1 = value; } }
        public int Field2;
        public int Field3;
        public override int StructSize() { return 84; }

        public override void Parse(GameBitBuffer buffer)
        {
            Color = new RGBAColor[2];
            for (int i = 0; i < _Color.Length; i++)
            {
                _Color[i] = new RGBAColor();
                _Color[i].Parse(buffer);
            }
            String1 = buffer.ReadCharArray(64);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _Color.Length; i++) _Color[i].Encode(buffer);
            buffer.WriteCharArray(64, String1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BannerColorSet {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Color.Length; loop12++)
            {
                _Color[loop12].AsText(b, pad, "_Color[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("String1:" + String1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Color = new RGBAColor[2];
            for (int loop12 = 0; loop12 < 2; loop12++)
            {
                RGBAColor temp12_Color;
                temp12_Color = new RGBAColor();
                temp12_Color.FileRead(stream, stream.Position);
                _Color[loop12] = temp12_Color;
            }
            stream.Position = offset + 8;
            String1 = stream.ReadString(64);
            stream.Position = offset + 72;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field3 = stream.ReadValueS32();
        }

    }

    public class BannerSigilPlacement : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BannerSigilPlacement {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
        }

    }

    public class EpicBannerDescription : GameMessage
    {
        public int SNOBannerShape;
        public int SNOBannerBase;
        public int SNOBannerPole;
        public int Field3;
        public string _Field4;
        public string Field4 { get { return _Field4; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field4 = value; } }
        public override int StructSize() { return 148; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOBannerShape = buffer.ReadInt(32);
            SNOBannerBase = buffer.ReadInt(32);
            SNOBannerPole = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOBannerShape);
            buffer.WriteInt(32, SNOBannerBase);
            buffer.WriteInt(32, SNOBannerPole);
            buffer.WriteInt(32, Field3);
            buffer.WriteCharArray(128, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EpicBannerDescription {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOBannerShape:" + SNOBannerShape.ToString());
            b.Append(' ', pad); b.AppendLine("SNOBannerBase:" + SNOBannerBase.ToString());
            b.Append(' ', pad); b.AppendLine("SNOBannerPole:" + SNOBannerPole.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOBannerShape = stream.ReadValueS32();
            stream.Position = offset + 4;
            SNOBannerBase = stream.ReadValueS32();
            stream.Position = offset + 8;
            SNOBannerPole = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadString(128);
        }

    }

    public class Observer : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Velocity;
        public float Field5;
        public float Field6;
        public float Field7;
        public Vector3D Field8;
        public Vector3D Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public override int StructSize() { return 84; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Velocity = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = new Vector3D();
            Field8.Parse(buffer);
            Field9 = new Vector3D();
            Field9.Parse(buffer);
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Velocity);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            Field8.Encode(buffer);
            Field9.Encode(buffer);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Observer {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Velocity:" + Velocity.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            Field8.AsText(b, pad, "Field8: ");
            Field9.AsText(b, pad, "Field9: ");
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Velocity = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field8 = new Vector3D();
            Field8.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field9 = new Vector3D();
            Field9.FileRead(stream, stream.Position);
            stream.Position = offset + 68;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field13 = stream.ReadValueF32();
        }

    }

    public class NavMeshDef : GameMessage
    {
        public int SquaresCountX;
        public int SquaresCountY;
        public int Field2;
        public int NavMeshSquareCount;
        public float Field4;
        public SerializeData serNavMeshArraySquares;
        List<NavMeshSquare> _Squares;
        public List<NavMeshSquare> Squares { get { return _Squares; } set { _Squares = value; } }
        public string _Filename;
        public string Filename { get { return _Filename; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Filename = value; } }
        public override int StructSize() { return 296; }

        public override void Parse(GameBitBuffer buffer)
        {
            SquaresCountX = buffer.ReadInt(32);
            SquaresCountY = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            NavMeshSquareCount = buffer.ReadInt(32);
            Field4 = buffer.ReadFloat32();
            serNavMeshArraySquares = new SerializeData();
            serNavMeshArraySquares.Parse(buffer);
            //still checking variablearrays
            this.Squares = new List<NavMeshSquare>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Squares.Count; loop12++)
            {
                _Squares[loop12] = new NavMeshSquare();
                _Squares[loop12].Parse(buffer);
            }
            Filename = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SquaresCountX);
            buffer.WriteInt(32, SquaresCountY);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, NavMeshSquareCount);
            buffer.WriteFloat32(Field4);
            serNavMeshArraySquares.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Squares.Count);
            for (int loop12 = 0; loop12 < _Squares.Count; loop12++)
            {
                _Squares[loop12].Encode(buffer);
            }
            buffer.WriteCharArray(256, Filename);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavMeshDef {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SquaresCountX:" + SquaresCountX.ToString());
            b.Append(' ', pad); b.AppendLine("SquaresCountY:" + SquaresCountY.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("NavMeshSquareCount:" + NavMeshSquareCount.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            serNavMeshArraySquares.AsText(b, pad, "serNavMeshArraySquares: ");
            for (int loop12 = 0; loop12 < _Squares.Count; loop12++)
            {
                _Squares[loop12].AsText(b, pad, "_Squares[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Filename:" + Filename.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SquaresCountX = stream.ReadValueS32();
            stream.Position = offset + 4;
            SquaresCountY = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            NavMeshSquareCount = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            serNavMeshArraySquares = new SerializeData();
            serNavMeshArraySquares.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking variablearrays
            Squares = new List<NavMeshSquare>();
            for (int i = 0; i < (int)(serNavMeshArraySquares.Field1 / 8); i++)
            {
                stream.Position = serNavMeshArraySquares.Field0 + 16 + (8 * i);
                NavMeshSquare temp12_Squares;
                temp12_Squares = new NavMeshSquare();
                temp12_Squares.FileRead(stream, stream.Position);
                _Squares.Add(temp12_Squares);
            }
            stream.Position = offset + 40;
            Filename = stream.ReadString(256);
        }

    }

    public class NavCell : GameMessage
    {
        public Vector3D Min;
        public Vector3D Max;
        public ushort Field2;
        public ushort Field3;
        public int Field4;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Min = new Vector3D();
            Min.Parse(buffer);
            Max = new Vector3D();
            Max.Parse(buffer);
            Field2 = (ushort)buffer.ReadInt(16);
            Field3 = (ushort)buffer.ReadInt(16);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Min.Encode(buffer);
            Max.Encode(buffer);
            buffer.WriteInt(16, Field2);
            buffer.WriteInt(16, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavCell {");
            pad += 4;
            Min.AsText(b, pad, "Min: ");
            Max.AsText(b, pad, "Max: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Min = new Vector3D();
            Min.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            Max = new Vector3D();
            Max.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            Field2 = stream.ReadValueU16();
            stream.Position = offset + 26;
            Field3 = stream.ReadValueU16();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32();
        }

    }

    public class NavCellLookup : GameMessage
    {
        public ushort Flags;
        public ushort WCell;
        public override int StructSize() { return 4; }

        public override void Parse(GameBitBuffer buffer)
        {
            Flags = (ushort)buffer.ReadInt(16);
            WCell = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(16, Flags);
            buffer.WriteInt(16, WCell);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavCellLookup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Flags:" + Flags.ToString());
            b.Append(' ', pad); b.AppendLine("WCell:" + WCell.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Flags = stream.ReadValueU16();
            stream.Position = offset + 2;
            WCell = stream.ReadValueU16();
        }

    }

    public class NavGridSquare : GameMessage
    {
        public ushort Flags;
        public ushort W1;
        public ushort W2;
        public override int StructSize() { return 6; }

        public override void Parse(GameBitBuffer buffer)
        {
            Flags = (ushort)buffer.ReadInt(16);
            W1 = (ushort)buffer.ReadInt(16);
            W2 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(16, Flags);
            buffer.WriteInt(16, W1);
            buffer.WriteInt(16, W2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavGridSquare {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Flags:" + Flags.ToString());
            b.Append(' ', pad); b.AppendLine("W1:" + W1.ToString());
            b.Append(' ', pad); b.AppendLine("W2:" + W2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Flags = stream.ReadValueU16();
            stream.Position = offset + 2;
            W1 = stream.ReadValueU16();
            stream.Position = offset + 4;
            W2 = stream.ReadValueU16();
        }

    }

    public class NavCellBorderData : GameMessage
    {
        public ushort Field0;
        public ushort Field1;
        public override int StructSize() { return 4; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = (ushort)buffer.ReadInt(16);
            Field1 = (ushort)buffer.ReadInt(16);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(16, Field0);
            buffer.WriteInt(16, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "NavCellBorderData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueU16();
            stream.Position = offset + 2;
            Field1 = stream.ReadValueU16();
        }

    }

    public class SwapSceneMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SwapSceneMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class DestroySceneMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int WorldID;
        public int SceneID;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            WorldID = buffer.ReadInt(32);
            SceneID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, WorldID);
            buffer.WriteInt(32, SceneID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DestroySceneMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            b.Append(' ', pad); b.AppendLine("SceneID:" + SceneID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            WorldID = stream.ReadValueS32();
            stream.Position = offset + 12;
            SceneID = stream.ReadValueS32();
        }

    }

    public class RevealSceneMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int WorldID;
        public SceneSpecification SceneSpec;
        public int ChunkID;
        public int SceneSNO;
        public PRTransform Transform;
        public int ParentChunkID;
        public int SceneGroupSNO;
        int[] _arAppliedLabels;
        public int[] arAppliedLabels { get { return _arAppliedLabels; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _arAppliedLabels = value; } }
        public override int StructSize() { return 1292; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            WorldID = buffer.ReadInt(32);
            SceneSpec = new SceneSpecification();
            SceneSpec.Parse(buffer);
            ChunkID = buffer.ReadInt(32);
            SceneSNO = buffer.ReadInt(32);
            Transform = new PRTransform();
            Transform.Parse(buffer);
            ParentChunkID = buffer.ReadInt(32);
            SceneGroupSNO = buffer.ReadInt(32);
            arAppliedLabels = new int[buffer.ReadInt(9)];
            for (int i = 0; i < _arAppliedLabels.Length; i++) _arAppliedLabels[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, WorldID);
            SceneSpec.Encode(buffer);
            buffer.WriteInt(32, ChunkID);
            buffer.WriteInt(32, SceneSNO);
            Transform.Encode(buffer);
            buffer.WriteInt(32, ParentChunkID);
            buffer.WriteInt(32, SceneGroupSNO);
            buffer.WriteInt(9, arAppliedLabels.Length);
            for (int i = 0; i < _arAppliedLabels.Length; i++) buffer.WriteInt(32, _arAppliedLabels[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RevealSceneMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("WorldID:" + WorldID.ToString());
            SceneSpec.AsText(b, pad, "SceneSpec: ");
            b.Append(' ', pad); b.AppendLine("ChunkID:" + ChunkID.ToString());
            b.Append(' ', pad); b.AppendLine("SceneSNO:" + SceneSNO.ToString());
            Transform.AsText(b, pad, "Transform: ");
            b.Append(' ', pad); b.AppendLine("ParentChunkID:" + ParentChunkID.ToString());
            b.Append(' ', pad); b.AppendLine("SceneGroupSNO:" + SceneGroupSNO.ToString());
            for (int loop12 = 0; loop12 < _arAppliedLabels.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_arAppliedLabels[loop12]:" + _arAppliedLabels[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            WorldID = stream.ReadValueS32();
            stream.Position = offset + 12;
            SceneSpec = new SceneSpecification();
            SceneSpec.FileRead(stream, stream.Position);
            stream.Position = offset + 220;
            ChunkID = stream.ReadValueS32();
            stream.Position = offset + 224;
            SceneSNO = stream.ReadValueS32();
            stream.Position = offset + 228;
            Transform = new PRTransform();
            Transform.FileRead(stream, stream.Position);
            stream.Position = offset + 256;
            ParentChunkID = stream.ReadValueS32();
            stream.Position = offset + 260;
            SceneGroupSNO = stream.ReadValueS32();
            stream.Position = offset + 268;
            arAppliedLabels = new int[256];
            for (int loop12 = 0; loop12 < 256; loop12++)
            {
                int temp12_arAppliedLabels;
                temp12_arAppliedLabels = stream.ReadValueS32();
                _arAppliedLabels[loop12] = temp12_arAppliedLabels;
            }
        }

    }

    public class SceneSpecification : GameMessage
    {
        public int Cellz;
        public IVector2D Cell;
        int[] _SNOLevelAreas;
        public int[] SNOLevelAreas { get { return _SNOLevelAreas; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _SNOLevelAreas = value; } }
        public int SNOPrevWorld;
        public int Field4;
        public int SNOPrevLevelArea;
        public int SNONextWorld;
        public int Field7;
        public int SNONextLevelArea;
        public int SNOMusic;
        public int SNOCombatMusic;
        public int SNOAmbient;
        public int SNOReverb;
        public int SNOWeather;
        public int SNOPresetWorld;
        public int Field15;
        public int Field16;
        public int Field17;
        public int ClusterID;
        public SceneCachedValues SceneCachedValues;
        public override int StructSize() { return 208; }

        public override void Parse(GameBitBuffer buffer)
        {
            Cellz = buffer.ReadInt(32);
            Cell = new IVector2D();
            Cell.Parse(buffer);
            SNOLevelAreas = new int[4];
            for (int i = 0; i < _SNOLevelAreas.Length; i++) _SNOLevelAreas[i] = buffer.ReadInt(32);
            SNOPrevWorld = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            SNOPrevLevelArea = buffer.ReadInt(32);
            SNONextWorld = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            SNONextLevelArea = buffer.ReadInt(32);
            SNOMusic = buffer.ReadInt(32);
            SNOCombatMusic = buffer.ReadInt(32);
            SNOAmbient = buffer.ReadInt(32);
            SNOReverb = buffer.ReadInt(32);
            SNOWeather = buffer.ReadInt(32);
            SNOPresetWorld = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            ClusterID = buffer.ReadInt(32);
            SceneCachedValues = new SceneCachedValues();
            SceneCachedValues.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Cellz);
            Cell.Encode(buffer);
            for (int i = 0; i < _SNOLevelAreas.Length; i++) buffer.WriteInt(32, _SNOLevelAreas[i]);
            buffer.WriteInt(32, SNOPrevWorld);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, SNOPrevLevelArea);
            buffer.WriteInt(32, SNONextWorld);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, SNONextLevelArea);
            buffer.WriteInt(32, SNOMusic);
            buffer.WriteInt(32, SNOCombatMusic);
            buffer.WriteInt(32, SNOAmbient);
            buffer.WriteInt(32, SNOReverb);
            buffer.WriteInt(32, SNOWeather);
            buffer.WriteInt(32, SNOPresetWorld);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, ClusterID);
            SceneCachedValues.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneSpecification {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Cellz:" + Cellz.ToString());
            Cell.AsText(b, pad, "Cell: ");
            for (int loop12 = 0; loop12 < _SNOLevelAreas.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_SNOLevelAreas[loop12]:" + _SNOLevelAreas[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("SNOPrevWorld:" + SNOPrevWorld.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPrevLevelArea:" + SNOPrevLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("SNONextWorld:" + SNONextWorld.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("SNONextLevelArea:" + SNONextLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("SNOMusic:" + SNOMusic.ToString());
            b.Append(' ', pad); b.AppendLine("SNOCombatMusic:" + SNOCombatMusic.ToString());
            b.Append(' ', pad); b.AppendLine("SNOAmbient:" + SNOAmbient.ToString());
            b.Append(' ', pad); b.AppendLine("SNOReverb:" + SNOReverb.ToString());
            b.Append(' ', pad); b.AppendLine("SNOWeather:" + SNOWeather.ToString());
            b.Append(' ', pad); b.AppendLine("SNOPresetWorld:" + SNOPresetWorld.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("ClusterID:" + ClusterID.ToString());
            SceneCachedValues.AsText(b, pad, "SceneCachedValues: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Cellz = stream.ReadValueS32();
            stream.Position = offset + 4;
            Cell = new IVector2D();
            Cell.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            SNOLevelAreas = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_SNOLevelAreas;
                temp12_SNOLevelAreas = stream.ReadValueS32();
                _SNOLevelAreas[loop12] = temp12_SNOLevelAreas;
            }
            stream.Position = offset + 28;
            SNOPrevWorld = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 36;
            SNOPrevLevelArea = stream.ReadValueS32();
            stream.Position = offset + 40;
            SNONextWorld = stream.ReadValueS32();
            stream.Position = offset + 44;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 48;
            SNONextLevelArea = stream.ReadValueS32();
            stream.Position = offset + 52;
            SNOMusic = stream.ReadValueS32();
            stream.Position = offset + 56;
            SNOCombatMusic = stream.ReadValueS32();
            stream.Position = offset + 60;
            SNOAmbient = stream.ReadValueS32();
            stream.Position = offset + 64;
            SNOReverb = stream.ReadValueS32();
            stream.Position = offset + 68;
            SNOWeather = stream.ReadValueS32();
            stream.Position = offset + 72;
            SNOPresetWorld = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 80;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 124;
            ClusterID = stream.ReadValueS32();
            stream.Position = offset + 128;
            SceneCachedValues = new SceneCachedValues();
            SceneCachedValues.FileRead(stream, stream.Position);
        }

    }

    public class SceneCachedValues : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public AABB AABB1;
        public AABB AABB2;
        int[] _Field5;
        public int[] Field5 { get { return _Field5; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int Field6;
        public override int StructSize() { return 80; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            AABB1 = new AABB();
            AABB1.Parse(buffer);
            AABB2 = new AABB();
            AABB2.Parse(buffer);
            Field5 = new int[4];
            for (int i = 0; i < _Field5.Length; i++) _Field5[i] = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            AABB1.Encode(buffer);
            AABB2.Encode(buffer);
            for (int i = 0; i < _Field5.Length; i++) buffer.WriteInt(32, _Field5[i]);
            buffer.WriteInt(32, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneCachedValues {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            AABB1.AsText(b, pad, "AABB1: ");
            AABB2.AsText(b, pad, "AABB2: ");
            for (int loop12 = 0; loop12 < _Field5.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field5[loop12]:" + _Field5[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            AABB1 = new AABB();
            AABB1.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            AABB2 = new AABB();
            AABB2.FileRead(stream, stream.Position);
            stream.Position = offset + 60;
            Field5 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field5;
                temp12_Field5 = stream.ReadValueS32();
                _Field5[loop12] = temp12_Field5;
            }
            stream.Position = offset + 76;
            Field6 = stream.ReadValueS32();
        }

    }

    public class Worlds : GameMessage
    {
        public bool Field0;
        public SerializeData serServerData;
        List<WorldServerData> _ServerData;
        public List<WorldServerData> ServerData { get { return _ServerData; } set { _ServerData = value; } }
        public SerializeData serMarkerSets;
        List<int> _MarkerSets;
        public List<int> MarkerSets { get { return _MarkerSets; } set { _MarkerSets = value; } }
        public Environment Field5;
        public float Field6;
        public int Field7;
        public override int StructSize() { return 288; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadBool();
            serServerData = new SerializeData();
            serServerData.Parse(buffer);
            //still checking variablearrays
            this.ServerData = new List<WorldServerData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12] = new WorldServerData();
                _ServerData[loop12].Parse(buffer);
            }
            serMarkerSets = new SerializeData();
            serMarkerSets.Parse(buffer);
            //still checking variablearrays
            this.MarkerSets = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MarkerSets.Count; loop12++)
            {
                _MarkerSets[loop12] = buffer.ReadInt(0);
            }
            Field5 = new Environment();
            Field5.Parse(buffer);
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteBool(Field0);
            serServerData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ServerData.Count);
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12].Encode(buffer);
            }
            serMarkerSets.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MarkerSets.Count);
            for (int loop12 = 0; loop12 < _MarkerSets.Count; loop12++)
            {
                buffer.WriteInt(0, _MarkerSets[loop12]);
            }
            Field5.Encode(buffer);
            buffer.WriteFloat32(Field6);
            buffer.WriteInt(32, Field7);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Worlds {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serServerData.AsText(b, pad, "serServerData: ");
            for (int loop12 = 0; loop12 < _ServerData.Count; loop12++)
            {
                _ServerData[loop12].AsText(b, pad, "_ServerData[loop12]: ");
            }
            serMarkerSets.AsText(b, pad, "serMarkerSets: ");
            for (int loop12 = 0; loop12 < _MarkerSets.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_MarkerSets[loop12]:" + _MarkerSets[loop12].ToString());
            }
            Field5.AsText(b, pad, "Field5: ");
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32() == 1;
            stream.Position = offset + 16;
            serServerData = new SerializeData();
            serServerData.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            ServerData = new List<WorldServerData>();
            for (int i = 0; i < (int)(serServerData.Field1 / 112); i++)
            {
                stream.Position = serServerData.Field0 + 16 + (112 * i);
                WorldServerData temp12_ServerData;
                temp12_ServerData = new WorldServerData();
                temp12_ServerData.FileRead(stream, stream.Position);
                _ServerData.Add(temp12_ServerData);
            }
            stream.Position = offset + 32;
            serMarkerSets = new SerializeData();
            serMarkerSets.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            //still checking variablearrays
            MarkerSets = new List<int>();
            for (int i = 0; i < (int)(serMarkerSets.Field1 / 4); i++)
            {
                stream.Position = serMarkerSets.Field0 + 16 + (4 * i);
                int temp12_MarkerSets;
                temp12_MarkerSets = stream.ReadValueS32();
                _MarkerSets.Add(temp12_MarkerSets);
            }
            stream.Position = offset + 96;
            Field5 = new Environment();
            Field5.FileRead(stream, stream.Position);
            stream.Position = offset + 280;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 284;
            Field7 = stream.ReadValueS32();
        }

    }

    public class WorldServerData : GameMessage
    {
        public SerializeData serDRLGParams;
        List<DRLGParams> _DRLGParams;
        public List<DRLGParams> DRLGParams { get { return _DRLGParams; } set { _DRLGParams = value; } }
        public SerializeData serSceneParams;
        List<SceneParams> _SceneParams;
        public List<SceneParams> SceneParams { get { return _SceneParams; } set { _SceneParams = value; } }
        public LabelRuleSet Field4;
        public int Field5;
        public SceneClusterSet Field6;
        int[] _arNavMeshFuncs;
        public int[] arNavMeshFuncs { get { return _arNavMeshFuncs; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _arNavMeshFuncs = value; } }
        public int snoScript;
        public int Field9;
        public override int StructSize() { return 112; }

        public override void Parse(GameBitBuffer buffer)
        {
            serDRLGParams = new SerializeData();
            serDRLGParams.Parse(buffer);
            //still checking variablearrays
            this.DRLGParams = new List<DRLGParams>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _DRLGParams.Count; loop12++)
            {
                _DRLGParams[loop12] = new DRLGParams();
                _DRLGParams[loop12].Parse(buffer);
            }
            serSceneParams = new SerializeData();
            serSceneParams.Parse(buffer);
            //still checking variablearrays
            this.SceneParams = new List<SceneParams>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SceneParams.Count; loop12++)
            {
                _SceneParams[loop12] = new SceneParams();
                _SceneParams[loop12].Parse(buffer);
            }
            Field4 = new LabelRuleSet();
            Field4.Parse(buffer);
            Field5 = buffer.ReadInt(32);
            Field6 = new SceneClusterSet();
            Field6.Parse(buffer);
            arNavMeshFuncs = new int[4];
            for (int i = 0; i < _arNavMeshFuncs.Length; i++) _arNavMeshFuncs[i] = buffer.ReadInt(32);
            snoScript = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serDRLGParams.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _DRLGParams.Count);
            for (int loop12 = 0; loop12 < _DRLGParams.Count; loop12++)
            {
                _DRLGParams[loop12].Encode(buffer);
            }
            serSceneParams.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SceneParams.Count);
            for (int loop12 = 0; loop12 < _SceneParams.Count; loop12++)
            {
                _SceneParams[loop12].Encode(buffer);
            }
            Field4.Encode(buffer);
            buffer.WriteInt(32, Field5);
            Field6.Encode(buffer);
            for (int i = 0; i < _arNavMeshFuncs.Length; i++) buffer.WriteInt(32, _arNavMeshFuncs[i]);
            buffer.WriteInt(32, snoScript);
            buffer.WriteInt(32, Field9);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WorldServerData {");
            pad += 4;
            serDRLGParams.AsText(b, pad, "serDRLGParams: ");
            for (int loop12 = 0; loop12 < _DRLGParams.Count; loop12++)
            {
                _DRLGParams[loop12].AsText(b, pad, "_DRLGParams[loop12]: ");
            }
            serSceneParams.AsText(b, pad, "serSceneParams: ");
            for (int loop12 = 0; loop12 < _SceneParams.Count; loop12++)
            {
                _SceneParams[loop12].AsText(b, pad, "_SceneParams[loop12]: ");
            }
            Field4.AsText(b, pad, "Field4: ");
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            Field6.AsText(b, pad, "Field6: ");
            for (int loop12 = 0; loop12 < _arNavMeshFuncs.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_arNavMeshFuncs[loop12]:" + _arNavMeshFuncs[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("snoScript:" + snoScript.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serDRLGParams = new SerializeData();
            serDRLGParams.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            DRLGParams = new List<DRLGParams>();
            for (int i = 0; i < (int)(serDRLGParams.Field1 / 120); i++)
            {
                stream.Position = serDRLGParams.Field0 + 16 + (120 * i);
                DRLGParams temp12_DRLGParams;
                temp12_DRLGParams = new DRLGParams();
                temp12_DRLGParams.FileRead(stream, stream.Position);
                _DRLGParams.Add(temp12_DRLGParams);
            }
            stream.Position = offset + 16;
            serSceneParams = new SerializeData();
            serSceneParams.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            SceneParams = new List<SceneParams>();
            for (int i = 0; i < (int)(serSceneParams.Field1 / 24); i++)
            {
                stream.Position = serSceneParams.Field0 + 16 + (24 * i);
                SceneParams temp12_SceneParams;
                temp12_SceneParams = new SceneParams();
                temp12_SceneParams.FileRead(stream, stream.Position);
                _SceneParams.Add(temp12_SceneParams);
            }
            stream.Position = offset + 32;
            Field4 = new LabelRuleSet();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 56;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field6 = new SceneClusterSet();
            Field6.FileRead(stream, stream.Position);
            stream.Position = offset + 88;
            arNavMeshFuncs = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_arNavMeshFuncs;
                temp12_arNavMeshFuncs = stream.ReadValueS32();
                _arNavMeshFuncs[loop12] = temp12_arNavMeshFuncs;
            }
            stream.Position = offset + 104;
            snoScript = stream.ReadValueS32();
            stream.Position = offset + 108;
            Field9 = stream.ReadValueS32();
        }

    }

    public class DRLGParams : GameMessage
    {
        public SerializeData serTiles;
        List<TileInfo> _Tiles;
        public List<TileInfo> Tiles { get { return _Tiles; } set { _Tiles = value; } }
        public int Field2;
        public SerializeData serCommands;
        List<DRLGCommand> _Commands;
        public List<DRLGCommand> Commands { get { return _Commands; } set { _Commands = value; } }
        public SerializeData serParentIndices;
        List<int> _ParentIndices;
        public List<int> ParentIndices { get { return _ParentIndices; } set { _ParentIndices = value; } }
        public SerializeData serDRLGTagMap;
        public DT_TAGMAP hDRLGTagMap;
        public override int StructSize() { return 120; }

        public override void Parse(GameBitBuffer buffer)
        {
            serTiles = new SerializeData();
            serTiles.Parse(buffer);
            //still checking variablearrays
            this.Tiles = new List<TileInfo>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Tiles.Count; loop12++)
            {
                _Tiles[loop12] = new TileInfo();
                _Tiles[loop12].Parse(buffer);
            }
            Field2 = buffer.ReadInt(32);
            serCommands = new SerializeData();
            serCommands.Parse(buffer);
            //still checking variablearrays
            this.Commands = new List<DRLGCommand>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Commands.Count; loop12++)
            {
                _Commands[loop12] = new DRLGCommand();
                _Commands[loop12].Parse(buffer);
            }
            serParentIndices = new SerializeData();
            serParentIndices.Parse(buffer);
            //still checking variablearrays
            this.ParentIndices = new List<int>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ParentIndices.Count; loop12++)
            {
                _ParentIndices[loop12] = buffer.ReadInt(0);
            }
            serDRLGTagMap = new SerializeData();
            serDRLGTagMap.Parse(buffer);
            hDRLGTagMap = new DT_TAGMAP();
            hDRLGTagMap.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serTiles.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Tiles.Count);
            for (int loop12 = 0; loop12 < _Tiles.Count; loop12++)
            {
                _Tiles[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field2);
            serCommands.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Commands.Count);
            for (int loop12 = 0; loop12 < _Commands.Count; loop12++)
            {
                _Commands[loop12].Encode(buffer);
            }
            serParentIndices.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ParentIndices.Count);
            for (int loop12 = 0; loop12 < _ParentIndices.Count; loop12++)
            {
                buffer.WriteInt(0, _ParentIndices[loop12]);
            }
            serDRLGTagMap.Encode(buffer);
            hDRLGTagMap.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DRLGParams {");
            pad += 4;
            serTiles.AsText(b, pad, "serTiles: ");
            for (int loop12 = 0; loop12 < _Tiles.Count; loop12++)
            {
                _Tiles[loop12].AsText(b, pad, "_Tiles[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            serCommands.AsText(b, pad, "serCommands: ");
            for (int loop12 = 0; loop12 < _Commands.Count; loop12++)
            {
                _Commands[loop12].AsText(b, pad, "_Commands[loop12]: ");
            }
            serParentIndices.AsText(b, pad, "serParentIndices: ");
            for (int loop12 = 0; loop12 < _ParentIndices.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ParentIndices[loop12]:" + _ParentIndices[loop12].ToString());
            }
            serDRLGTagMap.AsText(b, pad, "serDRLGTagMap: ");
            b.Append(' ', pad); b.AppendLine("hDRLGTagMap:" + hDRLGTagMap.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serTiles = new SerializeData();
            serTiles.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Tiles = new List<TileInfo>();
            for (int i = 0; i < (int)(serTiles.Field1 / 72); i++)
            {
                stream.Position = serTiles.Field0 + 16 + (72 * i);
                TileInfo temp12_Tiles;
                temp12_Tiles = new TileInfo();
                temp12_Tiles.FileRead(stream, stream.Position);
                _Tiles.Add(temp12_Tiles);
            }
            stream.Position = offset + 64;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 68;
            serCommands = new SerializeData();
            serCommands.FileRead(stream, stream.Position);
            stream.Position = offset + 80;
            //still checking variablearrays
            Commands = new List<DRLGCommand>();
            for (int i = 0; i < (int)(serCommands.Field1 / 152); i++)
            {
                stream.Position = serCommands.Field0 + 16 + (152 * i);
                DRLGCommand temp12_Commands;
                temp12_Commands = new DRLGCommand();
                temp12_Commands.FileRead(stream, stream.Position);
                _Commands.Add(temp12_Commands);
            }
            stream.Position = offset + 88;
            serParentIndices = new SerializeData();
            serParentIndices.FileRead(stream, stream.Position);
            stream.Position = offset + 96;
            //still checking variablearrays
            ParentIndices = new List<int>();
            for (int i = 0; i < (int)(serParentIndices.Field1 / 4); i++)
            {
                stream.Position = serParentIndices.Field0 + 16 + (4 * i);
                int temp12_ParentIndices;
                temp12_ParentIndices = stream.ReadValueS32();
                _ParentIndices.Add(temp12_ParentIndices);
            }
            stream.Position = offset + 104;
            serDRLGTagMap = new SerializeData();
            serDRLGTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 112;
            // hDRLGTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class CustomTileInfo : GameMessage
    {
        int _Field0;
        public int Field0 { get { return _Field0; } set { if (value < 0 || value > 2) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public int Field2;
        public IVector2D Field3;
        public SerializeData serTiles;
        List<CustomTileCell> _Tiles;
        public List<CustomTileCell> Tiles { get { return _Tiles; } set { _Tiles = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(2);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = new IVector2D();
            Field3.Parse(buffer);
            serTiles = new SerializeData();
            serTiles.Parse(buffer);
            //still checking variablearrays
            this.Tiles = new List<CustomTileCell>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Tiles.Count; loop12++)
            {
                _Tiles[loop12] = new CustomTileCell();
                _Tiles[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(2, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            Field3.Encode(buffer);
            serTiles.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Tiles.Count);
            for (int loop12 = 0; loop12 < _Tiles.Count; loop12++)
            {
                _Tiles[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CustomTileInfo {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            Field3.AsText(b, pad, "Field3: ");
            serTiles.AsText(b, pad, "serTiles: ");
            for (int loop12 = 0; loop12 < _Tiles.Count; loop12++)
            {
                _Tiles[loop12].AsText(b, pad, "_Tiles[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = new IVector2D();
            Field3.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            serTiles = new SerializeData();
            serTiles.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            //still checking variablearrays
            Tiles = new List<CustomTileCell>();
            for (int i = 0; i < (int)(serTiles.Field1 / 36); i++)
            {
                stream.Position = serTiles.Field0 + 16 + (36 * i);
                CustomTileCell temp12_Tiles;
                temp12_Tiles = new CustomTileCell();
                temp12_Tiles.FileRead(stream, stream.Position);
                _Tiles.Add(temp12_Tiles);
            }
        }

    }

    public class CustomTileCell : GameMessage
    {
        public bool Field0;
        public int Field1;
        public int Field2;
        public int snoScene;
        public int Field4;
        int[] _Field5;
        public int[] Field5 { get { return _Field5; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadBool();
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            snoScene = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = new int[4];
            for (int i = 0; i < _Field5.Length; i++) _Field5[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteBool(Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, snoScene);
            buffer.WriteInt(32, Field4);
            for (int i = 0; i < _Field5.Length; i++) buffer.WriteInt(32, _Field5[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CustomTileCell {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("snoScene:" + snoScene.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            for (int loop12 = 0; loop12 < _Field5.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field5[loop12]:" + _Field5[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32() == 1;
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            snoScene = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Field5;
                temp12_Field5 = stream.ReadValueS32();
                _Field5[loop12] = temp12_Field5;
            }
        }

    }

    public class DRLGCommand : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public int Field1;
        public SerializeData serCommandTagMap;
        public DT_TAGMAP hCommandTagMap;
        public override int StructSize() { return 152; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(128);
            Field1 = buffer.ReadInt(32);
            serCommandTagMap = new SerializeData();
            serCommandTagMap.Parse(buffer);
            hCommandTagMap = new DT_TAGMAP();
            hCommandTagMap.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Field0);
            buffer.WriteInt(32, Field1);
            serCommandTagMap.Encode(buffer);
            hCommandTagMap.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "DRLGCommand {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            serCommandTagMap.AsText(b, pad, "serCommandTagMap: ");
            b.Append(' ', pad); b.AppendLine("hCommandTagMap:" + hCommandTagMap.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(128);
            stream.Position = offset + 128;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 132;
            serCommandTagMap = new SerializeData();
            serCommandTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 144;
            // hCommandTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class SceneChunk : GameMessage
    {
        public SNOName Field0;
        public PRTransform Field1;
        public SceneSpecification Field2;
        public override int StructSize() { return 244; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new SNOName();
            Field0.Parse(buffer);
            Field1 = new PRTransform();
            Field1.Parse(buffer);
            Field2 = new SceneSpecification();
            Field2.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            Field2.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneChunk {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            Field2.AsText(b, pad, "Field2: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new SNOName();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new PRTransform();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            Field2 = new SceneSpecification();
            Field2.FileRead(stream, stream.Position);
        }

    }

    public class Environment : GameMessage
    {
        public RGBAColor Field0;
        public PostFXParams Field1;
        public int Field2;
        public int Field3;
        public UberMaterial Field4;
        public int snoMusic;
        public int snoCombatMusic;
        public int snoAmbient;
        public int snoReverb;
        public int snoWeather;
        public int snoIrradianceTex;
        public int snoIrradianceTexDead;
        public override int StructSize() { return 184; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RGBAColor();
            Field0.Parse(buffer);
            Field1 = new PostFXParams();
            Field1.Parse(buffer);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = new UberMaterial();
            Field4.Parse(buffer);
            snoMusic = buffer.ReadInt(32);
            snoCombatMusic = buffer.ReadInt(32);
            snoAmbient = buffer.ReadInt(32);
            snoReverb = buffer.ReadInt(32);
            snoWeather = buffer.ReadInt(32);
            snoIrradianceTex = buffer.ReadInt(32);
            snoIrradianceTexDead = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            Field4.Encode(buffer);
            buffer.WriteInt(32, snoMusic);
            buffer.WriteInt(32, snoCombatMusic);
            buffer.WriteInt(32, snoAmbient);
            buffer.WriteInt(32, snoReverb);
            buffer.WriteInt(32, snoWeather);
            buffer.WriteInt(32, snoIrradianceTex);
            buffer.WriteInt(32, snoIrradianceTexDead);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Environment {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            Field4.AsText(b, pad, "Field4: ");
            b.Append(' ', pad); b.AppendLine("snoMusic:" + snoMusic.ToString());
            b.Append(' ', pad); b.AppendLine("snoCombatMusic:" + snoCombatMusic.ToString());
            b.Append(' ', pad); b.AppendLine("snoAmbient:" + snoAmbient.ToString());
            b.Append(' ', pad); b.AppendLine("snoReverb:" + snoReverb.ToString());
            b.Append(' ', pad); b.AppendLine("snoWeather:" + snoWeather.ToString());
            b.Append(' ', pad); b.AppendLine("snoIrradianceTex:" + snoIrradianceTex.ToString());
            b.Append(' ', pad); b.AppendLine("snoIrradianceTexDead:" + snoIrradianceTexDead.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RGBAColor();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 4;
            Field1 = new PostFXParams();
            Field1.FileRead(stream, stream.Position);
            stream.Position = offset + 36;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 48;
            Field4 = new UberMaterial();
            Field4.FileRead(stream, stream.Position);
            stream.Position = offset + 152;
            snoMusic = stream.ReadValueS32();
            stream.Position = offset + 156;
            snoCombatMusic = stream.ReadValueS32();
            stream.Position = offset + 160;
            snoAmbient = stream.ReadValueS32();
            stream.Position = offset + 164;
            snoReverb = stream.ReadValueS32();
            stream.Position = offset + 168;
            snoWeather = stream.ReadValueS32();
            stream.Position = offset + 172;
            snoIrradianceTex = stream.ReadValueS32();
            stream.Position = offset + 176;
            snoIrradianceTexDead = stream.ReadValueS32();
        }

    }

    public class PostFXParams : GameMessage
    {
        float[] _Field0;
        public float[] Field0 { get { return _Field0; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        float[] _Field1;
        public float[] Field1 { get { return _Field1; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            //still checking fixedarrays on basictypes
            Field0 = new float[4];
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                _Field0[loop12] = buffer.ReadFloat32();
            }
            //still checking fixedarrays on basictypes
            Field1 = new float[4];
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                _Field1[loop12] = buffer.ReadFloat32();
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                buffer.WriteFloat32(_Field0[loop12]);
            }
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                buffer.WriteFloat32(_Field1[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PostFXParams {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field0[loop12]:" + _Field0[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field1[loop12]:" + _Field1[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new float[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                float temp12_Field0;
                temp12_Field0 = stream.ReadValueF32();
                _Field0[loop12] = temp12_Field0;
            }
            stream.Position = offset + 16;
            Field1 = new float[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                float temp12_Field1;
                temp12_Field1 = stream.ReadValueF32();
                _Field1[loop12] = temp12_Field1;
            }
        }

    }

    public class WeightedLook : GameMessage
    {
        public LookLink LookLink;
        public int Field1;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            LookLink = new LookLink();
            LookLink.Parse(buffer);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            LookLink.Encode(buffer);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WeightedLook {");
            pad += 4;
            LookLink.AsText(b, pad, "LookLink: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            LookLink = new LookLink();
            LookLink.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            Field1 = stream.ReadValueS32();
        }

    }

    public class ActorCollisionData : GameMessage
    {
        public ActorCollisionFlags ColFlags;
        public int Field1;
        public AxialCylinder Cylinder;
        public AABB AABB;
        public float Field4;
        public override int StructSize() { return 68; }

        public override void Parse(GameBitBuffer buffer)
        {
            ColFlags = new ActorCollisionFlags();
            ColFlags.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Cylinder = new AxialCylinder();
            Cylinder.Parse(buffer);
            AABB = new AABB();
            AABB.Parse(buffer);
            Field4 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            ColFlags.Encode(buffer);
            buffer.WriteInt(32, Field1);
            Cylinder.Encode(buffer);
            AABB.Encode(buffer);
            buffer.WriteFloat32(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActorCollisionData {");
            pad += 4;
            ColFlags.AsText(b, pad, "ColFlags: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            Cylinder.AsText(b, pad, "Cylinder: ");
            AABB.AsText(b, pad, "AABB: ");
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            ColFlags = new ActorCollisionFlags();
            ColFlags.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Cylinder = new AxialCylinder();
            Cylinder.FileRead(stream, stream.Position);
            stream.Position = offset + 40;
            AABB = new AABB();
            AABB.FileRead(stream, stream.Position);
            stream.Position = offset + 64;
            Field4 = stream.ReadValueF32();
        }

    }

    public class InventoryImages : GameMessage
    {
        public int Field0;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "InventoryImages {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class AnimSet : GameMessage
    {
        public int SNOParentAnimSet;
        public SerializeData serTagMapAnimDefault;
        public DT_TAGMAP TagMapAnimDefault;
        AnimSetTagMap[] _AnimSetTagMaps;
        public AnimSetTagMap[] AnimSetTagMaps { get { return _AnimSetTagMaps; } set { if (value != null && value.Length != 19) throw new ArgumentOutOfRangeException(); _AnimSetTagMaps = value; } }
        public override int StructSize() { return 336; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOParentAnimSet = buffer.ReadInt(32);
            serTagMapAnimDefault = new SerializeData();
            serTagMapAnimDefault.Parse(buffer);
            TagMapAnimDefault = new DT_TAGMAP();
            TagMapAnimDefault.Parse(buffer);
            AnimSetTagMaps = new AnimSetTagMap[19];
            for (int i = 0; i < _AnimSetTagMaps.Length; i++)
            {
                _AnimSetTagMaps[i] = new AnimSetTagMap();
                _AnimSetTagMaps[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOParentAnimSet);
            serTagMapAnimDefault.Encode(buffer);
            TagMapAnimDefault.Encode(buffer);
            for (int i = 0; i < _AnimSetTagMaps.Length; i++) _AnimSetTagMaps[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AnimSet {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOParentAnimSet:" + SNOParentAnimSet.ToString());
            serTagMapAnimDefault.AsText(b, pad, "serTagMapAnimDefault: ");
            b.Append(' ', pad); b.AppendLine("TagMapAnimDefault:" + TagMapAnimDefault.ToString());
            for (int loop12 = 0; loop12 < _AnimSetTagMaps.Length; loop12++)
            {
                _AnimSetTagMaps[loop12].AsText(b, pad, "_AnimSetTagMaps[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            SNOParentAnimSet = stream.ReadValueS32();
            stream.Position = offset + 16;
            serTagMapAnimDefault = new SerializeData();
            serTagMapAnimDefault.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            // TagMapAnimDefault: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
            stream.Position = offset + 32;
            AnimSetTagMaps = new AnimSetTagMap[19];
            for (int loop12 = 0; loop12 < 19; loop12++)
            {
                AnimSetTagMap temp12_AnimSetTagMaps;
                temp12_AnimSetTagMaps = new AnimSetTagMap();
                temp12_AnimSetTagMaps.FileRead(stream, stream.Position);
                _AnimSetTagMaps[loop12] = temp12_AnimSetTagMaps;
            }
        }

    }

    public class AnimSetTagMap : GameMessage
    {
        public SerializeData serTagMap;
        public DT_TAGMAP hTagMap;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serTagMap = new SerializeData();
            serTagMap.Parse(buffer);
            hTagMap = new DT_TAGMAP();
            hTagMap.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serTagMap.Encode(buffer);
            hTagMap.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AnimSetTagMap {");
            pad += 4;
            serTagMap.AsText(b, pad, "serTagMap: ");
            b.Append(' ', pad); b.AppendLine("hTagMap:" + hTagMap.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serTagMap = new SerializeData();
            serTagMap.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            // hTagMap: type DT_TAGMAP hasnt a deserializer implemented
            throw new Exception("some fields arent going to be decoded.");
        }

    }

    public class BoneName : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 64; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "BoneName {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(64);
        }

    }

    public class TranslationCurve : GameMessage
    {
        public int Field0;
        public SerializeData serKeys;
        List<TranslationKey> _Keys;
        public List<TranslationKey> Keys { get { return _Keys; } set { _Keys = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serKeys = new SerializeData();
            serKeys.Parse(buffer);
            //still checking variablearrays
            this.Keys = new List<TranslationKey>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12] = new TranslationKey();
                _Keys[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serKeys.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Keys.Count);
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TranslationCurve {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serKeys.AsText(b, pad, "serKeys: ");
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12].AsText(b, pad, "_Keys[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serKeys = new SerializeData();
            serKeys.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            Keys = new List<TranslationKey>();
            for (int i = 0; i < (int)(serKeys.Field1 / 16); i++)
            {
                stream.Position = serKeys.Field0 + 16 + (16 * i);
                TranslationKey temp12_Keys;
                temp12_Keys = new TranslationKey();
                temp12_Keys.FileRead(stream, stream.Position);
                _Keys.Add(temp12_Keys);
            }
        }

    }

    public class TranslationKey : GameMessage
    {
        public int Field0;
        public Vector3D Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new Vector3D();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TranslationKey {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new Vector3D();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class RotationCurve : GameMessage
    {
        public int Field0;
        public SerializeData serKeys;
        List<RotationKey> _Keys;
        public List<RotationKey> Keys { get { return _Keys; } set { _Keys = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serKeys = new SerializeData();
            serKeys.Parse(buffer);
            //still checking variablearrays
            this.Keys = new List<RotationKey>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12] = new RotationKey();
                _Keys[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serKeys.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Keys.Count);
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RotationCurve {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serKeys.AsText(b, pad, "serKeys: ");
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12].AsText(b, pad, "_Keys[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serKeys = new SerializeData();
            serKeys.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            Keys = new List<RotationKey>();
            for (int i = 0; i < (int)(serKeys.Field1 / 12); i++)
            {
                stream.Position = serKeys.Field0 + 16 + (12 * i);
                RotationKey temp12_Keys;
                temp12_Keys = new RotationKey();
                temp12_Keys.FileRead(stream, stream.Position);
                _Keys.Add(temp12_Keys);
            }
        }

    }

    public class RotationKey : GameMessage
    {
        public int Field0;
        public Quaternion16 Field1;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = new Quaternion16();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RotationKey {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new Quaternion16();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class ScaleCurve : GameMessage
    {
        public int Field0;
        public SerializeData serKeys;
        List<ScaleKey> _Keys;
        public List<ScaleKey> Keys { get { return _Keys; } set { _Keys = value; } }
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serKeys = new SerializeData();
            serKeys.Parse(buffer);
            //still checking variablearrays
            this.Keys = new List<ScaleKey>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12] = new ScaleKey();
                _Keys[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serKeys.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Keys.Count);
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ScaleCurve {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serKeys.AsText(b, pad, "serKeys: ");
            for (int loop12 = 0; loop12 < _Keys.Count; loop12++)
            {
                _Keys[loop12].AsText(b, pad, "_Keys[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            serKeys = new SerializeData();
            serKeys.FileRead(stream, stream.Position);
            stream.Position = offset + 16;
            //still checking variablearrays
            Keys = new List<ScaleKey>();
            for (int i = 0; i < (int)(serKeys.Field1 / 8); i++)
            {
                stream.Position = serKeys.Field0 + 16 + (8 * i);
                ScaleKey temp12_Keys;
                temp12_Keys = new ScaleKey();
                temp12_Keys.FileRead(stream, stream.Position);
                _Keys.Add(temp12_Keys);
            }
        }

    }

    public class ScaleKey : GameMessage
    {
        public int Field0;
        public float Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ScaleKey {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
        }

    }

    public class KeyframedAttachment : GameMessage
    {
        public float Field0;
        public TriggerEvent Field1;
        public override int StructSize() { return 412; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = new TriggerEvent();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "KeyframedAttachment {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = new TriggerEvent();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class ScriptFormulaDetails : GameMessage
    {
        public string _CharArray1;
        public string CharArray1 { get { return _CharArray1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _CharArray1 = value; } }
        public string _CharArray2;
        public string CharArray2 { get { return _CharArray2; } set { if (value != null && value.Length > 512) throw new ArgumentOutOfRangeException(); _CharArray2 = value; } }
        public int Field2;
        public int Field3;
        public override int StructSize() { return 776; }

        public override void Parse(GameBitBuffer buffer)
        {
            CharArray1 = buffer.ReadCharArray(256);
            CharArray2 = buffer.ReadCharArray(512);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, CharArray1);
            buffer.WriteCharArray(512, CharArray2);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ScriptFormulaDetails {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("CharArray1:" + CharArray1.ToString());
            b.Append(' ', pad); b.AppendLine("CharArray2:" + CharArray2.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            CharArray1 = stream.ReadString(256);
            stream.Position = offset + 256;
            CharArray2 = stream.ReadString(512);
            stream.Position = offset + 768;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 772;
            Field3 = stream.ReadValueS32();
        }

    }

    public class EncounterSpawnOption : GameMessage
    {
        public int snoSpawn;
        public int Field1;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < -1 || value > 22) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSpawn = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(5) + (-1);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSpawn);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(5, Field2 - (-1));
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EncounterSpawnOption {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSpawn:" + snoSpawn.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSpawn = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class Adventure : GameMessage
    {
        public int SNOSymbolActor;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public int SNOMarkerSet;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOSymbolActor = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            SNOMarkerSet = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOSymbolActor);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteInt(32, SNOMarkerSet);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Adventure {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOSymbolActor:" + SNOSymbolActor.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("SNOMarkerSet:" + SNOMarkerSet.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            SNOSymbolActor = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 32;
            SNOMarkerSet = stream.ReadValueS32();
        }

    }

    public class ConvLocaleDisplayTimes : GameMessage
    {
        int[] _Field0;
        public int[] Field0 { get { return _Field0; } set { if (value != null && value.Length != 10) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new int[10];
            for (int i = 0; i < _Field0.Length; i++) _Field0[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            for (int i = 0; i < _Field0.Length; i++) buffer.WriteInt(32, _Field0[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConvLocaleDisplayTimes {");
            pad += 4;
            for (int loop12 = 0; loop12 < _Field0.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field0[loop12]:" + _Field0[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new int[10];
            for (int loop12 = 0; loop12 < 10; loop12++)
            {
                int temp12_Field0;
                temp12_Field0 = stream.ReadValueS32();
                _Field0[loop12] = temp12_Field0;
            }
        }

    }

    public class ConversationListEntry : GameMessage
    {
        public int SNOConv;
        public int Field1;
        public int Field2;
        public int Field3;
        public int GbidItem;
        public string _Noname1;
        public string Noname1 { get { return _Noname1; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Noname1 = value; } }
        public string _Noname2;
        public string Noname2 { get { return _Noname2; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Noname2 = value; } }
        public int SNOQuestCurrent;
        public int Field8;
        public int SNOQuestAssigned;
        public int SNOQuestActive;
        public int SNOQuestComplete;
        public int SNOQuestRange;
        public int SNOLevelArea;
        public override int StructSize() { return 304; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOConv = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            GbidItem = buffer.ReadInt(32);
            Noname1 = buffer.ReadCharArray(128);
            Noname2 = buffer.ReadCharArray(128);
            SNOQuestCurrent = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            SNOQuestAssigned = buffer.ReadInt(32);
            SNOQuestActive = buffer.ReadInt(32);
            SNOQuestComplete = buffer.ReadInt(32);
            SNOQuestRange = buffer.ReadInt(32);
            SNOLevelArea = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOConv);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, GbidItem);
            buffer.WriteCharArray(128, Noname1);
            buffer.WriteCharArray(128, Noname2);
            buffer.WriteInt(32, SNOQuestCurrent);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, SNOQuestAssigned);
            buffer.WriteInt(32, SNOQuestActive);
            buffer.WriteInt(32, SNOQuestComplete);
            buffer.WriteInt(32, SNOQuestRange);
            buffer.WriteInt(32, SNOLevelArea);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ConversationListEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOConv:" + SNOConv.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("GbidItem:" + GbidItem.ToString());
            b.Append(' ', pad); b.AppendLine("Noname1:" + Noname1.ToString());
            b.Append(' ', pad); b.AppendLine("Noname2:" + Noname2.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestCurrent:" + SNOQuestCurrent.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestAssigned:" + SNOQuestAssigned.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestActive:" + SNOQuestActive.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestComplete:" + SNOQuestComplete.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestRange:" + SNOQuestRange.ToString());
            b.Append(' ', pad); b.AppendLine("SNOLevelArea:" + SNOLevelArea.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOConv = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            GbidItem = stream.ReadValueS32();
            stream.Position = offset + 20;
            Noname1 = stream.ReadString(128);
            stream.Position = offset + 148;
            Noname2 = stream.ReadString(128);
            stream.Position = offset + 276;
            SNOQuestCurrent = stream.ReadValueS32();
            stream.Position = offset + 280;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 284;
            SNOQuestAssigned = stream.ReadValueS32();
            stream.Position = offset + 288;
            SNOQuestActive = stream.ReadValueS32();
            stream.Position = offset + 292;
            SNOQuestComplete = stream.ReadValueS32();
            stream.Position = offset + 296;
            SNOQuestRange = stream.ReadValueS32();
            stream.Position = offset + 300;
            SNOLevelArea = stream.ReadValueS32();
        }

    }

    public class FlagLookup : GameMessage
    {
        public int Field0;
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 388; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadCharArray(128);
            Field2 = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteCharArray(128, Field1);
            buffer.WriteCharArray(256, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FlagLookup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadString(128);
            stream.Position = offset + 132;
            Field2 = stream.ReadString(256);
        }

    }

    public class SceneGroup : GameMessage
    {
        public int Field0;
        public SerializeData serScenes;
        List<SceneGroupItem> _Items;
        public List<SceneGroupItem> Items { get { return _Items; } set { _Items = value; } }
        public int Field3;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            serScenes = new SerializeData();
            serScenes.Parse(buffer);
            //still checking variablearrays
            this.Items = new List<SceneGroupItem>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Items.Count; loop12++)
            {
                _Items[loop12] = new SceneGroupItem();
                _Items[loop12].Parse(buffer);
            }
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            serScenes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Items.Count);
            for (int loop12 = 0; loop12 < _Items.Count; loop12++)
            {
                _Items[loop12].Encode(buffer);
            }
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneGroup {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            serScenes.AsText(b, pad, "serScenes: ");
            for (int loop12 = 0; loop12 < _Items.Count; loop12++)
            {
                _Items[loop12].AsText(b, pad, "_Items[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            serScenes = new SerializeData();
            serScenes.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            Items = new List<SceneGroupItem>();
            for (int i = 0; i < (int)(serScenes.Field1 / 12); i++)
            {
                stream.Position = serScenes.Field0 + 16 + (12 * i);
                SceneGroupItem temp12_Items;
                temp12_Items = new SceneGroupItem();
                temp12_Items.FileRead(stream, stream.Position);
                _Items.Add(temp12_Items);
            }
            stream.Position = offset + 32;
            Field3 = stream.ReadValueS32();
        }

    }

    public class SceneGroupItem : GameMessage
    {
        public int SNOScene;
        public int Field1;
        public int LabelGBId;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOScene = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            LabelGBId = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOScene);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, LabelGBId);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SceneGroupItem {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOScene:" + SNOScene.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("LabelGBId:" + LabelGBId.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOScene = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            LabelGBId = stream.ReadValueS32();
        }

    }

    public class LevelAreaSpawnItem : GameMessage
    {
        public SNOName Field0;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new SNOName();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(3);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(3, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LevelAreaSpawnItem {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new SNOName();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field5 = stream.ReadValueS32();
        }

    }

    public class QuestStepObjective : GameMessage
    {
        public int Field0;
        int _ObjectiveType;
        public int ObjectiveType { get { return _ObjectiveType; } set { if (value < 0 || value > 14) throw new ArgumentOutOfRangeException(); _ObjectiveType = value; } }
        public int Field2;
        public int CounterTarget;
        public SNOName SNOName1;
        public SNOName SNOName2;
        public int GBID1;
        public int GBID2;
        public string _Group1Name;
        public string Group1Name { get { return _Group1Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Group1Name = value; } }
        public string _Unknown2;
        public string Unknown2 { get { return _Unknown2; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Unknown2 = value; } }
        public bool Field10;
        public int Field11;
        public int GBIDItemToShow;
        public override int StructSize() { return 564; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            ObjectiveType = buffer.ReadInt(4);
            Field2 = buffer.ReadInt(32);
            CounterTarget = buffer.ReadInt(32);
            SNOName1 = new SNOName();
            SNOName1.Parse(buffer);
            SNOName2 = new SNOName();
            SNOName2.Parse(buffer);
            GBID1 = buffer.ReadInt(32);
            GBID2 = buffer.ReadInt(32);
            Group1Name = buffer.ReadCharArray(256);
            Unknown2 = buffer.ReadCharArray(256);
            Field10 = buffer.ReadBool();
            Field11 = buffer.ReadInt(32);
            GBIDItemToShow = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(4, ObjectiveType);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, CounterTarget);
            SNOName1.Encode(buffer);
            SNOName2.Encode(buffer);
            buffer.WriteInt(32, GBID1);
            buffer.WriteInt(32, GBID2);
            buffer.WriteCharArray(256, Group1Name);
            buffer.WriteCharArray(256, Unknown2);
            buffer.WriteBool(Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, GBIDItemToShow);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestStepObjective {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("ObjectiveType:" + ObjectiveType.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("CounterTarget:" + CounterTarget.ToString());
            SNOName1.AsText(b, pad, "SNOName1: ");
            SNOName2.AsText(b, pad, "SNOName2: ");
            b.Append(' ', pad); b.AppendLine("GBID1:" + GBID1.ToString());
            b.Append(' ', pad); b.AppendLine("GBID2:" + GBID2.ToString());
            b.Append(' ', pad); b.AppendLine("Group1Name:" + Group1Name.ToString());
            b.Append(' ', pad); b.AppendLine("Unknown2:" + Unknown2.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("GBIDItemToShow:" + GBIDItemToShow.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            _ObjectiveType = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            CounterTarget = stream.ReadValueS32();
            stream.Position = offset + 16;
            SNOName1 = new SNOName();
            SNOName1.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            SNOName2 = new SNOName();
            SNOName2.FileRead(stream, stream.Position);
            stream.Position = offset + 32;
            GBID1 = stream.ReadValueS32();
            stream.Position = offset + 36;
            GBID2 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Group1Name = stream.ReadString(256);
            stream.Position = offset + 296;
            Unknown2 = stream.ReadString(256);
            stream.Position = offset + 552;
            Field10 = stream.ReadValueS32() == 1;
            stream.Position = offset + 556;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 560;
            GBIDItemToShow = stream.ReadValueS32();
        }

    }

    public class QuestStepFailureCondition : GameMessage
    {
        int _ConditionType;
        public int ConditionType { get { return _ConditionType; } set { if (value < 0 || value > 7) throw new ArgumentOutOfRangeException(); _ConditionType = value; } }
        public int Field1;
        public int Field2;
        public SNOName SNOName1;
        public SNOName SNOName2;
        public int GBID1;
        public int GBID2;
        public string _Unknown1;
        public string Unknown1 { get { return _Unknown1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Unknown1 = value; } }
        public string _Unknown2;
        public string Unknown2 { get { return _Unknown2; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Unknown2 = value; } }
        public override int StructSize() { return 548; }

        public override void Parse(GameBitBuffer buffer)
        {
            ConditionType = buffer.ReadInt(3);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            SNOName1 = new SNOName();
            SNOName1.Parse(buffer);
            SNOName2 = new SNOName();
            SNOName2.Parse(buffer);
            GBID1 = buffer.ReadInt(32);
            GBID2 = buffer.ReadInt(32);
            Unknown1 = buffer.ReadCharArray(256);
            Unknown2 = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(3, ConditionType);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            SNOName1.Encode(buffer);
            SNOName2.Encode(buffer);
            buffer.WriteInt(32, GBID1);
            buffer.WriteInt(32, GBID2);
            buffer.WriteCharArray(256, Unknown1);
            buffer.WriteCharArray(256, Unknown2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestStepFailureCondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("ConditionType:" + ConditionType.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            SNOName1.AsText(b, pad, "SNOName1: ");
            SNOName2.AsText(b, pad, "SNOName2: ");
            b.Append(' ', pad); b.AppendLine("GBID1:" + GBID1.ToString());
            b.Append(' ', pad); b.AppendLine("GBID2:" + GBID2.ToString());
            b.Append(' ', pad); b.AppendLine("Unknown1:" + Unknown1.ToString());
            b.Append(' ', pad); b.AppendLine("Unknown2:" + Unknown2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _ConditionType = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            SNOName1 = new SNOName();
            SNOName1.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            SNOName2 = new SNOName();
            SNOName2.FileRead(stream, stream.Position);
            stream.Position = offset + 28;
            GBID1 = stream.ReadValueS32();
            stream.Position = offset + 32;
            GBID2 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Unknown1 = stream.ReadString(256);
            stream.Position = offset + 292;
            Unknown2 = stream.ReadString(256);
        }

    }

    public class QuestCompletionStep : GameMessage
    {
        public string _Unknown;
        public string Unknown { get { return _Unknown; } set { if (value != null && value.Length > 64) throw new ArgumentOutOfRangeException(); _Unknown = value; } }
        public int ID;
        public bool Field2;
        public override int StructSize() { return 72; }

        public override void Parse(GameBitBuffer buffer)
        {
            Unknown = buffer.ReadCharArray(64);
            ID = buffer.ReadInt(32);
            Field2 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(64, Unknown);
            buffer.WriteInt(32, ID);
            buffer.WriteBool(Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestCompletionStep {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Unknown:" + Unknown.ToString());
            b.Append(' ', pad); b.AppendLine("ID:" + ID.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Unknown = stream.ReadString(64);
            stream.Position = offset + 64;
            ID = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field2 = stream.ReadValueS32() == 1;
        }

    }

    public class QuestLevelRange : GameMessage
    {
        public int Min;
        public int Max;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Min = buffer.ReadInt(32);
            Max = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Min);
            buffer.WriteInt(32, Max);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestLevelRange {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Min:" + Min.ToString());
            b.Append(' ', pad); b.AppendLine("Max:" + Max.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Min = stream.ReadValueS32();
            stream.Position = offset + 4;
            Max = stream.ReadValueS32();
        }

    }

    public class QuestRange : GameMessage
    {
        public QuestTime Start;
        public QuestTime End;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Start = new QuestTime();
            Start.Parse(buffer);
            End = new QuestTime();
            End.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Start.Encode(buffer);
            End.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestRange {");
            pad += 4;
            Start.AsText(b, pad, "Start: ");
            End.AsText(b, pad, "End: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Start = new QuestTime();
            Start.FileRead(stream, stream.Position);
            stream.Position = offset + 20;
            End = new QuestTime();
            End.FileRead(stream, stream.Position);
        }

    }

    public class QuestTime : GameMessage
    {
        public int SNOQuest;
        public int StepID;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOQuest = buffer.ReadInt(32);
            StepID = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOQuest);
            buffer.WriteInt(32, StepID);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestTime {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOQuest:" + SNOQuest.ToString());
            b.Append(' ', pad); b.AppendLine("StepID:" + StepID.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOQuest = stream.ReadValueS32();
            stream.Position = offset + 4;
            StepID = stream.ReadValueS32();
        }

    }

    public class TraitEntry : GameMessage
    {
        public int SNOPower;
        public int Category;
        public int ReqLevel;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOPower = buffer.ReadInt(32);
            Category = buffer.ReadInt(32);
            ReqLevel = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOPower);
            buffer.WriteInt(32, Category);
            buffer.WriteInt(32, ReqLevel);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TraitEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOPower:" + SNOPower.ToString());
            b.Append(' ', pad); b.AppendLine("Category:" + Category.ToString());
            b.Append(' ', pad); b.AppendLine("ReqLevel:" + ReqLevel.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOPower = stream.ReadValueS32();
            stream.Position = offset + 4;
            Category = stream.ReadValueS32();
            stream.Position = offset + 8;
            ReqLevel = stream.ReadValueS32();
        }

    }

    public class HealthDropInfo : GameMessage
    {
        public float Field0;
        public int gbidHealthItem;
        public int Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            gbidHealthItem = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteInt(32, gbidHealthItem);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HealthDropInfo {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("gbidHealthItem:" + gbidHealthItem.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            gbidHealthItem = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
        }

    }

    public class SkillDeclaration : GameMessage
    {
        public int snoPower;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoPower = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoPower);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SkillDeclaration {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoPower:" + snoPower.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoPower = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class MonsterSkillDeclaration : GameMessage
    {
        public float Field0;
        public float Field1;
        public int Field2;
        public float Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterSkillDeclaration {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
        }

    }

    public class Monster2 : GameMessage
    {
        public float Field0;
        public float ActorSNO;
        public float Field2;
        public float Field3;
        public bool Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadFloat32();
            ActorSNO = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteFloat32(Field0);
            buffer.WriteFloat32(ActorSNO);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteBool(Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Monster2 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("ActorSNO:" + ActorSNO.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueF32();
            stream.Position = offset + 4;
            ActorSNO = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32() == 1;
        }

    }

    public class MonsterMinionSpawnItem : GameMessage
    {
        public int snoSpawn;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoSpawn = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoSpawn);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterMinionSpawnItem {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoSpawn:" + snoSpawn.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoSpawn = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
        }

    }

    public class Recipe : GameMessage
    {
        public ItemSpecifierData ItemSpecifierData;
        public override int StructSize() { return 40; }

        public override void Parse(GameBitBuffer buffer)
        {
            ItemSpecifierData = new ItemSpecifierData();
            ItemSpecifierData.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            ItemSpecifierData.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Recipe {");
            pad += 4;
            ItemSpecifierData.AsText(b, pad, "ItemSpecifierData: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            ItemSpecifierData = new ItemSpecifierData();
            ItemSpecifierData.FileRead(stream, stream.Position);
        }

    }

    public class ItemSpecifierData : GameMessage
    {
        public int ItemGBId;
        public int Field1;
        int[] _GBIdAffixes;
        public int[] GBIdAffixes { get { return _GBIdAffixes; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _GBIdAffixes = value; } }
        public int Field3;
        public int Field4;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            ItemGBId = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            GBIdAffixes = new int[3];
            for (int i = 0; i < _GBIdAffixes.Length; i++) _GBIdAffixes[i] = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, ItemGBId);
            buffer.WriteInt(32, Field1);
            for (int i = 0; i < _GBIdAffixes.Length; i++) buffer.WriteInt(32, _GBIdAffixes[i]);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemSpecifierData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("ItemGBId:" + ItemGBId.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            for (int loop12 = 0; loop12 < _GBIdAffixes.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_GBIdAffixes[loop12]:" + _GBIdAffixes[loop12].ToString());
            }
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            ItemGBId = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            GBIdAffixes = new int[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                int temp12_GBIdAffixes;
                temp12_GBIdAffixes = stream.ReadValueS32();
                _GBIdAffixes[loop12] = temp12_GBIdAffixes;
            }
            stream.Position = offset + 20;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field4 = stream.ReadValueS32();
        }

    }

    public class TimedEvent : GameMessage
    {
        public int Field0;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "TimedEvent {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
        }

    }

    public class Act : GameMessage
    {
        public SerializeData serQuests;
        List<ActQuestInfo> _ActQuestInfo;
        public List<ActQuestInfo> ActQuestInfo { get { return _ActQuestInfo; } set { _ActQuestInfo = value; } }
        WaypointInfo[] _WayPointInfo;
        public WaypointInfo[] WayPointInfo { get { return _WayPointInfo; } set { if (value != null && value.Length != 25) throw new ArgumentOutOfRangeException(); _WayPointInfo = value; } }
        public ResolvedPortalDestination ResolvedPortalDestination;
        ActStartLocOverride[] _ActStartLocOverrides;
        public ActStartLocOverride[] ActStartLocOverrides { get { return _ActStartLocOverrides; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _ActStartLocOverrides = value; } }
        public override int StructSize() { return 840; }

        public override void Parse(GameBitBuffer buffer)
        {
            serQuests = new SerializeData();
            serQuests.Parse(buffer);
            //still checking variablearrays
            this.ActQuestInfo = new List<ActQuestInfo>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ActQuestInfo.Count; loop12++)
            {
                _ActQuestInfo[loop12] = new ActQuestInfo();
                _ActQuestInfo[loop12].Parse(buffer);
            }
            WayPointInfo = new WaypointInfo[25];
            for (int i = 0; i < _WayPointInfo.Length; i++)
            {
                _WayPointInfo[i] = new WaypointInfo();
                _WayPointInfo[i].Parse(buffer);
            }
            ResolvedPortalDestination = new ResolvedPortalDestination();
            ResolvedPortalDestination.Parse(buffer);
            ActStartLocOverrides = new ActStartLocOverride[6];
            for (int i = 0; i < _ActStartLocOverrides.Length; i++)
            {
                _ActStartLocOverrides[i] = new ActStartLocOverride();
                _ActStartLocOverrides[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serQuests.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ActQuestInfo.Count);
            for (int loop12 = 0; loop12 < _ActQuestInfo.Count; loop12++)
            {
                _ActQuestInfo[loop12].Encode(buffer);
            }
            for (int i = 0; i < _WayPointInfo.Length; i++) _WayPointInfo[i].Encode(buffer);
            ResolvedPortalDestination.Encode(buffer);
            for (int i = 0; i < _ActStartLocOverrides.Length; i++) _ActStartLocOverrides[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Act {");
            pad += 4;
            serQuests.AsText(b, pad, "serQuests: ");
            for (int loop12 = 0; loop12 < _ActQuestInfo.Count; loop12++)
            {
                _ActQuestInfo[loop12].AsText(b, pad, "_ActQuestInfo[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _WayPointInfo.Length; loop12++)
            {
                _WayPointInfo[loop12].AsText(b, pad, "_WayPointInfo[loop12]: ");
            }
            ResolvedPortalDestination.AsText(b, pad, "ResolvedPortalDestination: ");
            for (int loop12 = 0; loop12 < _ActStartLocOverrides.Length; loop12++)
            {
                _ActStartLocOverrides[loop12].AsText(b, pad, "_ActStartLocOverrides[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            serQuests = new SerializeData();
            serQuests.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            ActQuestInfo = new List<ActQuestInfo>();
            for (int i = 0; i < (int)(serQuests.Field1 / 4); i++)
            {
                stream.Position = serQuests.Field0 + 16 + (4 * i);
                ActQuestInfo temp12_ActQuestInfo;
                temp12_ActQuestInfo = new ActQuestInfo();
                temp12_ActQuestInfo.FileRead(stream, stream.Position);
                _ActQuestInfo.Add(temp12_ActQuestInfo);
            }
            stream.Position = offset + 32;
            WayPointInfo = new WaypointInfo[25];
            for (int loop12 = 0; loop12 < 25; loop12++)
            {
                WaypointInfo temp12_WayPointInfo;
                temp12_WayPointInfo = new WaypointInfo();
                temp12_WayPointInfo.FileRead(stream, stream.Position);
                _WayPointInfo[loop12] = temp12_WayPointInfo;
            }
            stream.Position = offset + 732;
            ResolvedPortalDestination = new ResolvedPortalDestination();
            ResolvedPortalDestination.FileRead(stream, stream.Position);
            stream.Position = offset + 744;
            ActStartLocOverrides = new ActStartLocOverride[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                ActStartLocOverride temp12_ActStartLocOverrides;
                temp12_ActStartLocOverrides = new ActStartLocOverride();
                temp12_ActStartLocOverrides.FileRead(stream, stream.Position);
                _ActStartLocOverrides[loop12] = temp12_ActStartLocOverrides;
            }
        }

    }

    public class ActQuestInfo : GameMessage
    {
        public int SNOQuest;
        public override int StructSize() { return 4; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOQuest = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOQuest);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActQuestInfo {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOQuest:" + SNOQuest.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOQuest = stream.ReadValueS32();
        }

    }

    public class WaypointInfo : GameMessage
    {
        public int SNOWorld;
        public int SNOLevelArea;
        public int Field2;
        public int Field3;
        public int Field4;
        public int SNOQuestRange;
        public int Field6;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOWorld = buffer.ReadInt(32);
            SNOLevelArea = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            SNOQuestRange = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOWorld);
            buffer.WriteInt(32, SNOLevelArea);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, SNOQuestRange);
            buffer.WriteInt(32, Field6);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "WaypointInfo {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOWorld:" + SNOWorld.ToString());
            b.Append(' ', pad); b.AppendLine("SNOLevelArea:" + SNOLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestRange:" + SNOQuestRange.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOWorld = stream.ReadValueS32();
            stream.Position = offset + 4;
            SNOLevelArea = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            SNOQuestRange = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueS32();
        }

    }

    public class ActStartLocOverride : GameMessage
    {
        public ResolvedPortalDestination ResolvedPortalDestination;
        public int SNOQuestRange;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            ResolvedPortalDestination = new ResolvedPortalDestination();
            ResolvedPortalDestination.Parse(buffer);
            SNOQuestRange = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            ResolvedPortalDestination.Encode(buffer);
            buffer.WriteInt(32, SNOQuestRange);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ActStartLocOverride {");
            pad += 4;
            ResolvedPortalDestination.AsText(b, pad, "ResolvedPortalDestination: ");
            b.Append(' ', pad); b.AppendLine("SNOQuestRange:" + SNOQuestRange.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            ResolvedPortalDestination = new ResolvedPortalDestination();
            ResolvedPortalDestination.FileRead(stream, stream.Position);
            stream.Position = offset + 12;
            SNOQuestRange = stream.ReadValueS32();
        }

    }

    public class Lore : GameMessage
    {
        public int Field0;
        public int Category;
        public int Field2;
        public int Field3;
        public int SNOConversation;
        public int Field5;
        public override int StructSize() { return 36; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Category = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            SNOConversation = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Category);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, SNOConversation);
            buffer.WriteInt(32, Field5);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Lore {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Category:" + Category.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("SNOConversation:" + SNOConversation.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Category = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 28;
            SNOConversation = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
        }

    }

    public class Condition : GameMessage
    {
        public int Field0;
        public int Field1;
        int[] _Class;
        public int[] Class { get { return _Class; } set { if (value != null && value.Length != 5) throw new ArgumentOutOfRangeException(); _Class = value; } }
        int[] _Difficulty;
        public int[] Difficulty { get { return _Difficulty; } set { if (value != null && value.Length != 4) throw new ArgumentOutOfRangeException(); _Difficulty = value; } }
        LoreSubcondition[] _LoreCondition;
        public LoreSubcondition[] LoreCondition { get { return _LoreCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _LoreCondition = value; } }
        QuestSubcondition[] _QuestCondition;
        public QuestSubcondition[] QuestCondition { get { return _QuestCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _QuestCondition = value; } }
        ItemSubcondition[] _ItemCondition;
        public ItemSubcondition[] ItemCondition { get { return _ItemCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _ItemCondition = value; } }
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public int SNOCurrentWorld;
        public int SNOCurrentLevelArea;
        public int SNOQuestRange;
        public FollowerSubcondition FollowerCondition;
        LabelSubcondition[] _LabelCondition;
        public LabelSubcondition[] LabelCondition { get { return _LabelCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _LabelCondition = value; } }
        SkillSubcondition[] _SkillCondition;
        public SkillSubcondition[] SkillCondition { get { return _SkillCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _SkillCondition = value; } }
        MonsterSubcondition[] _MonsterCondition;
        public MonsterSubcondition[] MonsterCondition { get { return _MonsterCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _MonsterCondition = value; } }
        GameFlagSubcondition[] _GameFlagCondition;
        public GameFlagSubcondition[] GameFlagCondition { get { return _GameFlagCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _GameFlagCondition = value; } }
        PlayerFlagSubcondition[] _PlayerFlagCondition;
        public PlayerFlagSubcondition[] PlayerFlagCondition { get { return _PlayerFlagCondition; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _PlayerFlagCondition = value; } }
        public override int StructSize() { return 1064; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Class = new int[5];
            for (int i = 0; i < _Class.Length; i++) _Class[i] = buffer.ReadInt(32);
            Difficulty = new int[4];
            for (int i = 0; i < _Difficulty.Length; i++) _Difficulty[i] = buffer.ReadInt(32);
            LoreCondition = new LoreSubcondition[3];
            for (int i = 0; i < _LoreCondition.Length; i++)
            {
                _LoreCondition[i] = new LoreSubcondition();
                _LoreCondition[i].Parse(buffer);
            }
            QuestCondition = new QuestSubcondition[3];
            for (int i = 0; i < _QuestCondition.Length; i++)
            {
                _QuestCondition[i] = new QuestSubcondition();
                _QuestCondition[i].Parse(buffer);
            }
            ItemCondition = new ItemSubcondition[3];
            for (int i = 0; i < _ItemCondition.Length; i++)
            {
                _ItemCondition[i] = new ItemSubcondition();
                _ItemCondition[i].Parse(buffer);
            }
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            SNOCurrentWorld = buffer.ReadInt(32);
            SNOCurrentLevelArea = buffer.ReadInt(32);
            SNOQuestRange = buffer.ReadInt(32);
            FollowerCondition = new FollowerSubcondition();
            FollowerCondition.Parse(buffer);
            LabelCondition = new LabelSubcondition[3];
            for (int i = 0; i < _LabelCondition.Length; i++)
            {
                _LabelCondition[i] = new LabelSubcondition();
                _LabelCondition[i].Parse(buffer);
            }
            SkillCondition = new SkillSubcondition[3];
            for (int i = 0; i < _SkillCondition.Length; i++)
            {
                _SkillCondition[i] = new SkillSubcondition();
                _SkillCondition[i].Parse(buffer);
            }
            MonsterCondition = new MonsterSubcondition[3];
            for (int i = 0; i < _MonsterCondition.Length; i++)
            {
                _MonsterCondition[i] = new MonsterSubcondition();
                _MonsterCondition[i].Parse(buffer);
            }
            GameFlagCondition = new GameFlagSubcondition[3];
            for (int i = 0; i < _GameFlagCondition.Length; i++)
            {
                _GameFlagCondition[i] = new GameFlagSubcondition();
                _GameFlagCondition[i].Parse(buffer);
            }
            PlayerFlagCondition = new PlayerFlagSubcondition[3];
            for (int i = 0; i < _PlayerFlagCondition.Length; i++)
            {
                _PlayerFlagCondition[i] = new PlayerFlagSubcondition();
                _PlayerFlagCondition[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            for (int i = 0; i < _Class.Length; i++) buffer.WriteInt(32, _Class[i]);
            for (int i = 0; i < _Difficulty.Length; i++) buffer.WriteInt(32, _Difficulty[i]);
            for (int i = 0; i < _LoreCondition.Length; i++) _LoreCondition[i].Encode(buffer);
            for (int i = 0; i < _QuestCondition.Length; i++) _QuestCondition[i].Encode(buffer);
            for (int i = 0; i < _ItemCondition.Length; i++) _ItemCondition[i].Encode(buffer);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, SNOCurrentWorld);
            buffer.WriteInt(32, SNOCurrentLevelArea);
            buffer.WriteInt(32, SNOQuestRange);
            FollowerCondition.Encode(buffer);
            for (int i = 0; i < _LabelCondition.Length; i++) _LabelCondition[i].Encode(buffer);
            for (int i = 0; i < _SkillCondition.Length; i++) _SkillCondition[i].Encode(buffer);
            for (int i = 0; i < _MonsterCondition.Length; i++) _MonsterCondition[i].Encode(buffer);
            for (int i = 0; i < _GameFlagCondition.Length; i++) _GameFlagCondition[i].Encode(buffer);
            for (int i = 0; i < _PlayerFlagCondition.Length; i++) _PlayerFlagCondition[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Condition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            for (int loop12 = 0; loop12 < _Class.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Class[loop12]:" + _Class[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _Difficulty.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Difficulty[loop12]:" + _Difficulty[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _LoreCondition.Length; loop12++)
            {
                _LoreCondition[loop12].AsText(b, pad, "_LoreCondition[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _QuestCondition.Length; loop12++)
            {
                _QuestCondition[loop12].AsText(b, pad, "_QuestCondition[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _ItemCondition.Length; loop12++)
            {
                _ItemCondition[loop12].AsText(b, pad, "_ItemCondition[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("SNOCurrentWorld:" + SNOCurrentWorld.ToString());
            b.Append(' ', pad); b.AppendLine("SNOCurrentLevelArea:" + SNOCurrentLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("SNOQuestRange:" + SNOQuestRange.ToString());
            FollowerCondition.AsText(b, pad, "FollowerCondition: ");
            for (int loop12 = 0; loop12 < _LabelCondition.Length; loop12++)
            {
                _LabelCondition[loop12].AsText(b, pad, "_LabelCondition[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _SkillCondition.Length; loop12++)
            {
                _SkillCondition[loop12].AsText(b, pad, "_SkillCondition[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _MonsterCondition.Length; loop12++)
            {
                _MonsterCondition[loop12].AsText(b, pad, "_MonsterCondition[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _GameFlagCondition.Length; loop12++)
            {
                _GameFlagCondition[loop12].AsText(b, pad, "_GameFlagCondition[loop12]: ");
            }
            for (int loop12 = 0; loop12 < _PlayerFlagCondition.Length; loop12++)
            {
                _PlayerFlagCondition[loop12].AsText(b, pad, "_PlayerFlagCondition[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Class = new int[5];
            for (int loop12 = 0; loop12 < 5; loop12++)
            {
                int temp12_Class;
                temp12_Class = stream.ReadValueS32();
                _Class[loop12] = temp12_Class;
            }
            stream.Position = offset + 40;
            Difficulty = new int[4];
            for (int loop12 = 0; loop12 < 4; loop12++)
            {
                int temp12_Difficulty;
                temp12_Difficulty = stream.ReadValueS32();
                _Difficulty[loop12] = temp12_Difficulty;
            }
            stream.Position = offset + 56;
            LoreCondition = new LoreSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                LoreSubcondition temp12_LoreCondition;
                temp12_LoreCondition = new LoreSubcondition();
                temp12_LoreCondition.FileRead(stream, stream.Position);
                _LoreCondition[loop12] = temp12_LoreCondition;
            }
            stream.Position = offset + 80;
            QuestCondition = new QuestSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                QuestSubcondition temp12_QuestCondition;
                temp12_QuestCondition = new QuestSubcondition();
                temp12_QuestCondition.FileRead(stream, stream.Position);
                _QuestCondition[loop12] = temp12_QuestCondition;
            }
            stream.Position = offset + 128;
            ItemCondition = new ItemSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                ItemSubcondition temp12_ItemCondition;
                temp12_ItemCondition = new ItemSubcondition();
                temp12_ItemCondition.FileRead(stream, stream.Position);
                _ItemCondition[loop12] = temp12_ItemCondition;
            }
            stream.Position = offset + 176;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 180;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 188;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 192;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 196;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 200;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 204;
            SNOCurrentWorld = stream.ReadValueS32();
            stream.Position = offset + 208;
            SNOCurrentLevelArea = stream.ReadValueS32();
            stream.Position = offset + 212;
            SNOQuestRange = stream.ReadValueS32();
            stream.Position = offset + 216;
            FollowerCondition = new FollowerSubcondition();
            FollowerCondition.FileRead(stream, stream.Position);
            stream.Position = offset + 224;
            LabelCondition = new LabelSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                LabelSubcondition temp12_LabelCondition;
                temp12_LabelCondition = new LabelSubcondition();
                temp12_LabelCondition.FileRead(stream, stream.Position);
                _LabelCondition[loop12] = temp12_LabelCondition;
            }
            stream.Position = offset + 248;
            SkillCondition = new SkillSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                SkillSubcondition temp12_SkillCondition;
                temp12_SkillCondition = new SkillSubcondition();
                temp12_SkillCondition.FileRead(stream, stream.Position);
                _SkillCondition[loop12] = temp12_SkillCondition;
            }
            stream.Position = offset + 284;
            MonsterCondition = new MonsterSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                MonsterSubcondition temp12_MonsterCondition;
                temp12_MonsterCondition = new MonsterSubcondition();
                temp12_MonsterCondition.FileRead(stream, stream.Position);
                _MonsterCondition[loop12] = temp12_MonsterCondition;
            }
            stream.Position = offset + 296;
            GameFlagCondition = new GameFlagSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                GameFlagSubcondition temp12_GameFlagCondition;
                temp12_GameFlagCondition = new GameFlagSubcondition();
                temp12_GameFlagCondition.FileRead(stream, stream.Position);
                _GameFlagCondition[loop12] = temp12_GameFlagCondition;
            }
            stream.Position = offset + 680;
            PlayerFlagCondition = new PlayerFlagSubcondition[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                PlayerFlagSubcondition temp12_PlayerFlagCondition;
                temp12_PlayerFlagCondition = new PlayerFlagSubcondition();
                temp12_PlayerFlagCondition.FileRead(stream, stream.Position);
                _PlayerFlagCondition[loop12] = temp12_PlayerFlagCondition;
            }
        }

    }

    public class LoreSubcondition : GameMessage
    {
        public int SNOLore;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOLore = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOLore);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LoreSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOLore:" + SNOLore.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOLore = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class QuestSubcondition : GameMessage
    {
        public int SNOQuest;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOQuest = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOQuest);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOQuest:" + SNOQuest.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOQuest = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class ItemSubcondition : GameMessage
    {
        public int ItemGBId;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            ItemGBId = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, ItemGBId);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("ItemGBId:" + ItemGBId.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            ItemGBId = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

    public class FollowerSubcondition : GameMessage
    {
        int _Type;
        public int Type { get { return _Type; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Type = value; } }
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            Type = buffer.ReadInt(2);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(2, Type);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "FollowerSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Type:" + Type.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            _Type = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class LabelSubcondition : GameMessage
    {
        public int LabelGBId;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            LabelGBId = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, LabelGBId);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LabelSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("LabelGBId:" + LabelGBId.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            LabelGBId = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class SkillSubcondition : GameMessage
    {
        public int SNOSkillPower;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOSkillPower = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOSkillPower);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SkillSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOSkillPower:" + SNOSkillPower.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOSkillPower = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
        }

    }

    public class MonsterSubcondition : GameMessage
    {
        public int SNOMonsterActor;
        public override int StructSize() { return 4; }

        public override void Parse(GameBitBuffer buffer)
        {
            SNOMonsterActor = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, SNOMonsterActor);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("SNOMonsterActor:" + SNOMonsterActor.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            SNOMonsterActor = stream.ReadValueS32();
        }

    }

    public class GameFlagSubcondition : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 128; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameFlagSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(128);
        }

    }

    public class PlayerFlagSubcondition : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public override int StructSize() { return 128; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(128, Field0);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerFlagSubcondition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(128);
        }

    }

    public class Tutorial : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Time;
        public int Time2;
        public int Field4;
        public int Field5;
        public IVector2D Field6;
        public override int StructSize() { return 44; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Time = buffer.ReadInt(32);
            Time2 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = new IVector2D();
            Field6.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Time);
            buffer.WriteInt(32, Time2);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            Field6.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Tutorial {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Time:" + Time.ToString());
            b.Append(' ', pad); b.AppendLine("Time2:" + Time2.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            Field6.AsText(b, pad, "Field6: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Time = stream.ReadValueS32();
            stream.Position = offset + 24;
            Time2 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field6 = new IVector2D();
            Field6.FileRead(stream, stream.Position);
        }

    }

    public class Account : GameMessage
    {
        public SerializeData serProtoData;
        List<byte> _ProtoData;
        public List<byte> ProtoData { get { return _ProtoData; } set { _ProtoData = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            serProtoData = new SerializeData();
            serProtoData.Parse(buffer);
            //still checking variablearrays
            this.ProtoData = new List<byte>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ProtoData.Count; loop12++)
            {
                _ProtoData[loop12] = (byte)buffer.ReadInt(0);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serProtoData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ProtoData.Count);
            for (int loop12 = 0; loop12 < _ProtoData.Count; loop12++)
            {
                buffer.WriteInt(0, _ProtoData[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Account {");
            pad += 4;
            serProtoData.AsText(b, pad, "serProtoData: ");
            for (int loop12 = 0; loop12 < _ProtoData.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ProtoData[loop12]:" + _ProtoData[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            serProtoData = new SerializeData();
            serProtoData.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            ProtoData = new List<byte>();
            for (int i = 0; i < (int)(serProtoData.Field1 / 1); i++)
            {
                stream.Position = serProtoData.Field0 + 16 + (1 * i);
                byte temp12_ProtoData;
                temp12_ProtoData = (byte)stream.ReadByte();
                _ProtoData.Add(temp12_ProtoData);
            }
        }

    }

    public class Hero : GameMessage
    {
        public SerializeData serProtoData;
        List<byte> _ProtoData;
        public List<byte> ProtoData { get { return _ProtoData; } set { _ProtoData = value; } }
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            serProtoData = new SerializeData();
            serProtoData.Parse(buffer);
            //still checking variablearrays
            this.ProtoData = new List<byte>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ProtoData.Count; loop12++)
            {
                _ProtoData[loop12] = (byte)buffer.ReadInt(0);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serProtoData.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ProtoData.Count);
            for (int loop12 = 0; loop12 < _ProtoData.Count; loop12++)
            {
                buffer.WriteInt(0, _ProtoData[loop12]);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Hero {");
            pad += 4;
            serProtoData.AsText(b, pad, "serProtoData: ");
            for (int loop12 = 0; loop12 < _ProtoData.Count; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_ProtoData[loop12]:" + _ProtoData[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 12;
            serProtoData = new SerializeData();
            serProtoData.FileRead(stream, stream.Position);
            stream.Position = offset + 24;
            //still checking variablearrays
            ProtoData = new List<byte>();
            for (int i = 0; i < (int)(serProtoData.Field1 / 1); i++)
            {
                stream.Position = serProtoData.Field0 + 16 + (1 * i);
                byte temp12_ProtoData;
                temp12_ProtoData = (byte)stream.ReadByte();
                _ProtoData.Add(temp12_ProtoData);
            }
        }

    }

    public class SavedConversations : GameMessage
    {
        public int Field0;
        byte[] _Field1;
        public byte[] Field1 { get { return _Field1; } set { if (value != null && value.Length != 32) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        int[] _m_snoSavedConv;
        public int[] m_snoSavedConv { get { return _m_snoSavedConv; } set { if (value != null && value.Length != 256) throw new ArgumentOutOfRangeException(); _m_snoSavedConv = value; } }
        public override int StructSize() { return 1060; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            //still checking fixedarrays on basictypes
            Field1 = new byte[32];
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                _Field1[loop12] = (byte)buffer.ReadInt(8);
            }
            m_snoSavedConv = new int[256];
            for (int i = 0; i < _m_snoSavedConv.Length; i++) _m_snoSavedConv[i] = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            //still checking fixedarrays on basictypes
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                buffer.WriteInt(8, _Field1[loop12]);
            }
            for (int i = 0; i < _m_snoSavedConv.Length; i++) buffer.WriteInt(32, _m_snoSavedConv[i]);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SavedConversations {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            for (int loop12 = 0; loop12 < _Field1.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_Field1[loop12]:" + _Field1[loop12].ToString());
            }
            for (int loop12 = 0; loop12 < _m_snoSavedConv.Length; loop12++)
            {
                b.Append(' ', pad); b.AppendLine("_m_snoSavedConv[loop12]:" + _m_snoSavedConv[loop12].ToString());
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = new byte[32];
            for (int loop12 = 0; loop12 < 32; loop12++)
            {
                byte temp12_Field1;
                temp12_Field1 = (byte)stream.ReadByte();
                _Field1[loop12] = temp12_Field1;
            }
            stream.Position = offset + 36;
            m_snoSavedConv = new int[256];
            for (int loop12 = 0; loop12 < 256; loop12++)
            {
                int temp12_m_snoSavedConv;
                temp12_m_snoSavedConv = stream.ReadValueS32();
                _m_snoSavedConv[loop12] = temp12_m_snoSavedConv;
            }
        }

    }

    public class PlayerQuestHistoryEntry : GameMessage
    {
        public int snoQuest;
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public override int StructSize() { return 12; }

        public override void Parse(GameBitBuffer buffer)
        {
            snoQuest = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(2);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, snoQuest);
            buffer.WriteInt(2, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PlayerQuestHistoryEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("snoQuest:" + snoQuest.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            snoQuest = stream.ReadValueS32();
            stream.Position = offset + 8;
            _Field1 = stream.ReadValueS32();
        }

    }

    public class QuestCounterMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoQuest;
        public int snoLevelArea;
        public int StepID;
        public int TaskIndex;
        public int Counter;
        public int Checked;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoQuest = buffer.ReadInt(32);
            snoLevelArea = buffer.ReadInt(32);
            StepID = buffer.ReadInt(32);
            TaskIndex = buffer.ReadInt(32);
            Counter = buffer.ReadInt(32);
            Checked = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoQuest);
            buffer.WriteInt(32, snoLevelArea);
            buffer.WriteInt(32, StepID);
            buffer.WriteInt(32, TaskIndex);
            buffer.WriteInt(32, Counter);
            buffer.WriteInt(32, Checked);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestCounterMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoQuest:" + snoQuest.ToString());
            b.Append(' ', pad); b.AppendLine("snoLevelArea:" + snoLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("StepID:" + StepID.ToString());
            b.Append(' ', pad); b.AppendLine("TaskIndex:" + TaskIndex.ToString());
            b.Append(' ', pad); b.AppendLine("Counter:" + Counter.ToString());
            b.Append(' ', pad); b.AppendLine("Checked:" + Checked.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoQuest = stream.ReadValueS32();
            stream.Position = offset + 12;
            snoLevelArea = stream.ReadValueS32();
            stream.Position = offset + 16;
            StepID = stream.ReadValueS32();
            stream.Position = offset + 20;
            TaskIndex = stream.ReadValueS32();
            stream.Position = offset + 24;
            Counter = stream.ReadValueS32();
            stream.Position = offset + 28;
            Checked = stream.ReadValueS32();
        }

    }

    public class QuestMeterMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoQuest;
        public int Field2;
        public float Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoQuest = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoQuest);
            buffer.WriteInt(32, Field2);
            buffer.WriteFloat32(Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestMeterMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoQuest:" + snoQuest.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoQuest = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueF32();
        }

    }

    public class QuestUpdateMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int snoQuest;
        public int snoLevelArea;
        public int StepID;
        public bool Field4;
        public bool Failed;
        public override int StructSize() { return 28; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            snoQuest = buffer.ReadInt(32);
            snoLevelArea = buffer.ReadInt(32);
            StepID = buffer.ReadInt(32);
            Field4 = buffer.ReadBool();
            Failed = buffer.ReadBool();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, snoQuest);
            buffer.WriteInt(32, snoLevelArea);
            buffer.WriteInt(32, StepID);
            buffer.WriteBool(Field4);
            buffer.WriteBool(Failed);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QuestUpdateMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("snoQuest:" + snoQuest.ToString());
            b.Append(' ', pad); b.AppendLine("snoLevelArea:" + snoLevelArea.ToString());
            b.Append(' ', pad); b.AppendLine("StepID:" + StepID.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Failed:" + Failed.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            snoQuest = stream.ReadValueS32();
            stream.Position = offset + 12;
            snoLevelArea = stream.ReadValueS32();
            stream.Position = offset + 16;
            StepID = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field4 = stream.ReadValueS32() == 1;
            stream.Position = offset + 20;
            Failed = stream.ReadValueS32() == 1;
        }

    }

    public class Items2 : GameMessage
    {
        public SerializeData serItemTypes;
        List<ItemType> _ItemTypes;
        public List<ItemType> ItemTypes { get { return _ItemTypes; } set { _ItemTypes = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serItemTypes = new SerializeData();
            serItemTypes.Parse(buffer);
            //still checking variablearrays
            this.ItemTypes = new List<ItemType>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ItemTypes.Count; loop12++)
            {
                _ItemTypes[loop12] = new ItemType();
                _ItemTypes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serItemTypes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ItemTypes.Count);
            for (int loop12 = 0; loop12 < _ItemTypes.Count; loop12++)
            {
                _ItemTypes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Items2 {");
            pad += 4;
            serItemTypes.AsText(b, pad, "serItemTypes: ");
            for (int loop12 = 0; loop12 < _ItemTypes.Count; loop12++)
            {
                _ItemTypes[loop12].AsText(b, pad, "_ItemTypes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serItemTypes = new SerializeData();
            serItemTypes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            ItemTypes = new List<ItemType>();
            for (int i = 0; i < (int)(serItemTypes.Field1 / 320); i++)
            {
                stream.Position = serItemTypes.Field0 + 16 + (320 * i);
                ItemType temp12_ItemTypes;
                temp12_ItemTypes = new ItemType();
                temp12_ItemTypes.FileRead(stream, stream.Position);
                _ItemTypes.Add(temp12_ItemTypes);
            }
        }

    }

    public class Items : GameMessage
    {
        public SerializeData serItems;
        List<Item> _arItems;
        public List<Item> arItems { get { return _arItems; } set { _arItems = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serItems = new SerializeData();
            serItems.Parse(buffer);
            //still checking variablearrays
            this.arItems = new List<Item>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _arItems.Count; loop12++)
            {
                _arItems[loop12] = new Item();
                _arItems[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serItems.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _arItems.Count);
            for (int loop12 = 0; loop12 < _arItems.Count; loop12++)
            {
                _arItems[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Items {");
            pad += 4;
            serItems.AsText(b, pad, "serItems: ");
            for (int loop12 = 0; loop12 < _arItems.Count; loop12++)
            {
                _arItems[loop12].AsText(b, pad, "_arItems[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serItems = new SerializeData();
            serItems.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            arItems = new List<Item>();
            for (int i = 0; i < (int)(serItems.Field1 / 1520); i++)
            {
                stream.Position = serItems.Field0 + 16 + (1520 * i);
                Item temp12_arItems;
                temp12_arItems = new Item();
                temp12_arItems.FileRead(stream, stream.Position);
                _arItems.Add(temp12_arItems);
            }
        }

    }

    public class ExperienceTable : GameMessage
    {
        public SerializeData serExperienceLevels;
        List<ExperienceLevel> _ExperienceLevels;
        public List<ExperienceLevel> ExperienceLevels { get { return _ExperienceLevels; } set { _ExperienceLevels = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serExperienceLevels = new SerializeData();
            serExperienceLevels.Parse(buffer);
            //still checking variablearrays
            this.ExperienceLevels = new List<ExperienceLevel>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ExperienceLevels.Count; loop12++)
            {
                _ExperienceLevels[loop12] = new ExperienceLevel();
                _ExperienceLevels[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serExperienceLevels.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ExperienceLevels.Count);
            for (int loop12 = 0; loop12 < _ExperienceLevels.Count; loop12++)
            {
                _ExperienceLevels[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ExperienceTable {");
            pad += 4;
            serExperienceLevels.AsText(b, pad, "serExperienceLevels: ");
            for (int loop12 = 0; loop12 < _ExperienceLevels.Count; loop12++)
            {
                _ExperienceLevels[loop12].AsText(b, pad, "_ExperienceLevels[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serExperienceLevels = new SerializeData();
            serExperienceLevels.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            ExperienceLevels = new List<ExperienceLevel>();
            for (int i = 0; i < (int)(serExperienceLevels.Field1 / 240); i++)
            {
                stream.Position = serExperienceLevels.Field0 + 16 + (240 * i);
                ExperienceLevel temp12_ExperienceLevels;
                temp12_ExperienceLevels = new ExperienceLevel();
                temp12_ExperienceLevels.FileRead(stream, stream.Position);
                _ExperienceLevels.Add(temp12_ExperienceLevels);
            }
        }

    }

    public class HelpCodes2 : GameMessage
    {
        public SerializeData serHelpCodes;
        List<HelpCodes> _HelpCodes;
        public List<HelpCodes> HelpCodes { get { return _HelpCodes; } set { _HelpCodes = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serHelpCodes = new SerializeData();
            serHelpCodes.Parse(buffer);
            //still checking variablearrays
            this.HelpCodes = new List<HelpCodes>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _HelpCodes.Count; loop12++)
            {
                _HelpCodes[loop12] = new HelpCodes();
                _HelpCodes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serHelpCodes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _HelpCodes.Count);
            for (int loop12 = 0; loop12 < _HelpCodes.Count; loop12++)
            {
                _HelpCodes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HelpCodes2 {");
            pad += 4;
            serHelpCodes.AsText(b, pad, "serHelpCodes: ");
            for (int loop12 = 0; loop12 < _HelpCodes.Count; loop12++)
            {
                _HelpCodes[loop12].AsText(b, pad, "_HelpCodes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serHelpCodes = new SerializeData();
            serHelpCodes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            HelpCodes = new List<HelpCodes>();
            for (int i = 0; i < (int)(serHelpCodes.Field1 / 640); i++)
            {
                stream.Position = serHelpCodes.Field0 + 16 + (640 * i);
                HelpCodes temp12_HelpCodes;
                temp12_HelpCodes = new HelpCodes();
                temp12_HelpCodes.FileRead(stream, stream.Position);
                _HelpCodes.Add(temp12_HelpCodes);
            }
        }

    }

    public class HelpCodes : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public string _Field1;
        public string Field1 { get { return _Field1; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 640; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(256);
            Field1 = buffer.ReadCharArray(256);
            Field2 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Field0);
            buffer.WriteCharArray(256, Field1);
            buffer.WriteCharArray(128, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "HelpCodes {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(256);
            stream.Position = offset + 256;
            Field1 = stream.ReadString(256);
            stream.Position = offset + 512;
            Field2 = stream.ReadString(128);
        }

    }

    public class MonsterLevelTable : GameMessage
    {
        public SerializeData serMonsterLevels;
        List<MonsterLevelDefinition> _MonsterLevels;
        public List<MonsterLevelDefinition> MonsterLevels { get { return _MonsterLevels; } set { _MonsterLevels = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serMonsterLevels = new SerializeData();
            serMonsterLevels.Parse(buffer);
            //still checking variablearrays
            this.MonsterLevels = new List<MonsterLevelDefinition>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MonsterLevels.Count; loop12++)
            {
                _MonsterLevels[loop12] = new MonsterLevelDefinition();
                _MonsterLevels[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serMonsterLevels.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MonsterLevels.Count);
            for (int loop12 = 0; loop12 < _MonsterLevels.Count; loop12++)
            {
                _MonsterLevels[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterLevelTable {");
            pad += 4;
            serMonsterLevels.AsText(b, pad, "serMonsterLevels: ");
            for (int loop12 = 0; loop12 < _MonsterLevels.Count; loop12++)
            {
                _MonsterLevels[loop12].AsText(b, pad, "_MonsterLevels[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serMonsterLevels = new SerializeData();
            serMonsterLevels.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            MonsterLevels = new List<MonsterLevelDefinition>();
            for (int i = 0; i < (int)(serMonsterLevels.Field1 / 560); i++)
            {
                stream.Position = serMonsterLevels.Field0 + 16 + (560 * i);
                MonsterLevelDefinition temp12_MonsterLevels;
                temp12_MonsterLevels = new MonsterLevelDefinition();
                temp12_MonsterLevels.FileRead(stream, stream.Position);
                _MonsterLevels.Add(temp12_MonsterLevels);
            }
        }

    }

    public class MonsterLevelDefinition : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public float Field21;
        public float Field22;
        public float Field23;
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public float Field28;
        public float Field29;
        public float Field30;
        public float Field31;
        public float Field32;
        public float Field33;
        public float Field34;
        public float Field35;
        public float Field36;
        public float Field37;
        public float Field38;
        public float Field39;
        public float Field40;
        public float Field41;
        public float Field42;
        public float Field43;
        public float Field44;
        public float Field45;
        public float Field46;
        public float Field47;
        public float Field48;
        public float Field49;
        public float Field50;
        public float Field51;
        public float Field52;
        public override int StructSize() { return 560; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadFloat32();
            Field22 = buffer.ReadFloat32();
            Field23 = buffer.ReadFloat32();
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = buffer.ReadFloat32();
            Field31 = buffer.ReadFloat32();
            Field32 = buffer.ReadFloat32();
            Field33 = buffer.ReadFloat32();
            Field34 = buffer.ReadFloat32();
            Field35 = buffer.ReadFloat32();
            Field36 = buffer.ReadFloat32();
            Field37 = buffer.ReadFloat32();
            Field38 = buffer.ReadFloat32();
            Field39 = buffer.ReadFloat32();
            Field40 = buffer.ReadFloat32();
            Field41 = buffer.ReadFloat32();
            Field42 = buffer.ReadFloat32();
            Field43 = buffer.ReadFloat32();
            Field44 = buffer.ReadFloat32();
            Field45 = buffer.ReadFloat32();
            Field46 = buffer.ReadFloat32();
            Field47 = buffer.ReadFloat32();
            Field48 = buffer.ReadFloat32();
            Field49 = buffer.ReadFloat32();
            Field50 = buffer.ReadFloat32();
            Field51 = buffer.ReadFloat32();
            Field52 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteFloat32(Field21);
            buffer.WriteFloat32(Field22);
            buffer.WriteFloat32(Field23);
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            buffer.WriteFloat32(Field30);
            buffer.WriteFloat32(Field31);
            buffer.WriteFloat32(Field32);
            buffer.WriteFloat32(Field33);
            buffer.WriteFloat32(Field34);
            buffer.WriteFloat32(Field35);
            buffer.WriteFloat32(Field36);
            buffer.WriteFloat32(Field37);
            buffer.WriteFloat32(Field38);
            buffer.WriteFloat32(Field39);
            buffer.WriteFloat32(Field40);
            buffer.WriteFloat32(Field41);
            buffer.WriteFloat32(Field42);
            buffer.WriteFloat32(Field43);
            buffer.WriteFloat32(Field44);
            buffer.WriteFloat32(Field45);
            buffer.WriteFloat32(Field46);
            buffer.WriteFloat32(Field47);
            buffer.WriteFloat32(Field48);
            buffer.WriteFloat32(Field49);
            buffer.WriteFloat32(Field50);
            buffer.WriteFloat32(Field51);
            buffer.WriteFloat32(Field52);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterLevelDefinition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Field34:" + Field34.ToString());
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Field38:" + Field38.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Field40:" + Field40.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            b.Append(' ', pad); b.AppendLine("Field44:" + Field44.ToString());
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            b.Append(' ', pad); b.AppendLine("Field46:" + Field46.ToString());
            b.Append(' ', pad); b.AppendLine("Field47:" + Field47.ToString());
            b.Append(' ', pad); b.AppendLine("Field48:" + Field48.ToString());
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Field50:" + Field50.ToString());
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            b.Append(' ', pad); b.AppendLine("Field52:" + Field52.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 484;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 488;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 496;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 492;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 184;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 92;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 96;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 100;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 104;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 108;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 112;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 116;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 120;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 124;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 128;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 132;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 136;
            Field22 = stream.ReadValueF32();
            stream.Position = offset + 440;
            Field23 = stream.ReadValueF32();
            stream.Position = offset + 444;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 140;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 144;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 460;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 464;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 468;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 472;
            Field30 = stream.ReadValueF32();
            stream.Position = offset + 476;
            Field31 = stream.ReadValueF32();
            stream.Position = offset + 504;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 148;
            Field33 = stream.ReadValueF32();
            stream.Position = offset + 152;
            Field34 = stream.ReadValueF32();
            stream.Position = offset + 156;
            Field35 = stream.ReadValueF32();
            stream.Position = offset + 160;
            Field36 = stream.ReadValueF32();
            stream.Position = offset + 220;
            Field37 = stream.ReadValueF32();
            stream.Position = offset + 224;
            Field38 = stream.ReadValueF32();
            stream.Position = offset + 176;
            Field39 = stream.ReadValueF32();
            stream.Position = offset + 520;
            Field40 = stream.ReadValueF32();
            stream.Position = offset + 180;
            Field41 = stream.ReadValueF32();
            stream.Position = offset + 232;
            Field42 = stream.ReadValueF32();
            stream.Position = offset + 236;
            Field43 = stream.ReadValueF32();
            stream.Position = offset + 268;
            Field44 = stream.ReadValueF32();
            stream.Position = offset + 272;
            Field45 = stream.ReadValueF32();
            stream.Position = offset + 276;
            Field46 = stream.ReadValueF32();
            stream.Position = offset + 280;
            Field47 = stream.ReadValueF32();
            stream.Position = offset + 284;
            Field48 = stream.ReadValueF32();
            stream.Position = offset + 288;
            Field49 = stream.ReadValueF32();
            stream.Position = offset + 292;
            Field50 = stream.ReadValueF32();
            stream.Position = offset + 296;
            Field51 = stream.ReadValueF32();
            stream.Position = offset + 300;
            Field52 = stream.ReadValueF32();
        }

    }

    public class Heros : GameMessage
    {
        public SerializeData serHeros;
        List<HeroData> _arHeros;
        public List<HeroData> arHeros { get { return _arHeros; } set { _arHeros = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serHeros = new SerializeData();
            serHeros.Parse(buffer);
            //still checking variablearrays
            this.arHeros = new List<HeroData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _arHeros.Count; loop12++)
            {
                _arHeros[loop12] = new HeroData();
                _arHeros[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serHeros.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _arHeros.Count);
            for (int loop12 = 0; loop12 < _arHeros.Count; loop12++)
            {
                _arHeros[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Heros {");
            pad += 4;
            serHeros.AsText(b, pad, "serHeros: ");
            for (int loop12 = 0; loop12 < _arHeros.Count; loop12++)
            {
                _arHeros[loop12].AsText(b, pad, "_arHeros[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serHeros = new SerializeData();
            serHeros.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            arHeros = new List<HeroData>();
            for (int i = 0; i < (int)(serHeros.Field1 / 876); i++)
            {
                stream.Position = serHeros.Field0 + 16 + (876 * i);
                HeroData temp12_arHeros;
                temp12_arHeros = new HeroData();
                temp12_arHeros.FileRead(stream, stream.Position);
                _arHeros.Add(temp12_arHeros);
            }
        }

    }

    public class MovementStyles : GameMessage
    {
        public SerializeData serMovementStyles;
        List<MovementStyleDefinition> _arMovementStyles;
        public List<MovementStyleDefinition> arMovementStyles { get { return _arMovementStyles; } set { _arMovementStyles = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serMovementStyles = new SerializeData();
            serMovementStyles.Parse(buffer);
            //still checking variablearrays
            this.arMovementStyles = new List<MovementStyleDefinition>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _arMovementStyles.Count; loop12++)
            {
                _arMovementStyles[loop12] = new MovementStyleDefinition();
                _arMovementStyles[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serMovementStyles.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _arMovementStyles.Count);
            for (int loop12 = 0; loop12 < _arMovementStyles.Count; loop12++)
            {
                _arMovementStyles[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MovementStyles {");
            pad += 4;
            serMovementStyles.AsText(b, pad, "serMovementStyles: ");
            for (int loop12 = 0; loop12 < _arMovementStyles.Count; loop12++)
            {
                _arMovementStyles[loop12].AsText(b, pad, "_arMovementStyles[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serMovementStyles = new SerializeData();
            serMovementStyles.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            arMovementStyles = new List<MovementStyleDefinition>();
            for (int i = 0; i < (int)(serMovementStyles.Field1 / 384); i++)
            {
                stream.Position = serMovementStyles.Field0 + 16 + (384 * i);
                MovementStyleDefinition temp12_arMovementStyles;
                temp12_arMovementStyles = new MovementStyleDefinition();
                temp12_arMovementStyles.FileRead(stream, stream.Position);
                _arMovementStyles.Add(temp12_arMovementStyles);
            }
        }

    }

    public class MovementStyleDefinition : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public float Field21;
        public float Field22;
        public float Field23;
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public float Field28;
        public float Field29;
        public float Field30;
        public int snoPowerToBreakObjects;
        public override int StructSize() { return 384; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadFloat32();
            Field22 = buffer.ReadFloat32();
            Field23 = buffer.ReadFloat32();
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = buffer.ReadFloat32();
            snoPowerToBreakObjects = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteFloat32(Field21);
            buffer.WriteFloat32(Field22);
            buffer.WriteFloat32(Field23);
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            buffer.WriteFloat32(Field30);
            buffer.WriteInt(32, snoPowerToBreakObjects);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MovementStyleDefinition {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("snoPowerToBreakObjects:" + snoPowerToBreakObjects.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 276;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 280;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 288;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 292;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 296;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 300;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 304;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 308;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 312;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 316;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 320;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 324;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 328;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 332;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 336;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 340;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 344;
            Field22 = stream.ReadValueF32();
            stream.Position = offset + 348;
            Field23 = stream.ReadValueF32();
            stream.Position = offset + 352;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 356;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 360;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 364;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 368;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 376;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 372;
            Field30 = stream.ReadValueF32();
            stream.Position = offset + 380;
            snoPowerToBreakObjects = stream.ReadValueS32();
        }

    }

    public class Labels : GameMessage
    {
        public SerializeData serLabelGBIDs;
        List<LabelGBID> _LabelGBIDs;
        public List<LabelGBID> LabelGBIDs { get { return _LabelGBIDs; } set { _LabelGBIDs = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serLabelGBIDs = new SerializeData();
            serLabelGBIDs.Parse(buffer);
            //still checking variablearrays
            this.LabelGBIDs = new List<LabelGBID>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _LabelGBIDs.Count; loop12++)
            {
                _LabelGBIDs[loop12] = new LabelGBID();
                _LabelGBIDs[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serLabelGBIDs.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _LabelGBIDs.Count);
            for (int loop12 = 0; loop12 < _LabelGBIDs.Count; loop12++)
            {
                _LabelGBIDs[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Labels {");
            pad += 4;
            serLabelGBIDs.AsText(b, pad, "serLabelGBIDs: ");
            for (int loop12 = 0; loop12 < _LabelGBIDs.Count; loop12++)
            {
                _LabelGBIDs[loop12].AsText(b, pad, "_LabelGBIDs[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serLabelGBIDs = new SerializeData();
            serLabelGBIDs.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            LabelGBIDs = new List<LabelGBID>();
            for (int i = 0; i < (int)(serLabelGBIDs.Field1 / 264); i++)
            {
                stream.Position = serLabelGBIDs.Field0 + 16 + (264 * i);
                LabelGBID temp12_LabelGBIDs;
                temp12_LabelGBIDs = new LabelGBID();
                temp12_LabelGBIDs.FileRead(stream, stream.Position);
                _LabelGBIDs.Add(temp12_LabelGBIDs);
            }
        }

    }

    public class LabelGBID : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public override int StructSize() { return 264; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LabelGBID {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueS32();
        }

    }

    public class AffixTable : GameMessage
    {
        public SerializeData serAffixes;
        List<AffixTableEntry> _Affixes;
        public List<AffixTableEntry> Affixes { get { return _Affixes; } set { _Affixes = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serAffixes = new SerializeData();
            serAffixes.Parse(buffer);
            //still checking variablearrays
            this.Affixes = new List<AffixTableEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Affixes.Count; loop12++)
            {
                _Affixes[loop12] = new AffixTableEntry();
                _Affixes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serAffixes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Affixes.Count);
            for (int loop12 = 0; loop12 < _Affixes.Count; loop12++)
            {
                _Affixes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "AffixTable {");
            pad += 4;
            serAffixes.AsText(b, pad, "serAffixes: ");
            for (int loop12 = 0; loop12 < _Affixes.Count; loop12++)
            {
                _Affixes[loop12].AsText(b, pad, "_Affixes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serAffixes = new SerializeData();
            serAffixes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Affixes = new List<AffixTableEntry>();
            for (int i = 0; i < (int)(serAffixes.Field1 / 656); i++)
            {
                stream.Position = serAffixes.Field0 + 16 + (656 * i);
                AffixTableEntry temp12_Affixes;
                temp12_Affixes = new AffixTableEntry();
                temp12_Affixes.FileRead(stream, stream.Position);
                _Affixes.Add(temp12_Affixes);
            }
        }

    }

    public class LootDistributionTable : GameMessage
    {
        public SerializeData serLootDistributions;
        List<LoodDistribution2> _LootDistributions;
        public List<LoodDistribution2> LootDistributions { get { return _LootDistributions; } set { _LootDistributions = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serLootDistributions = new SerializeData();
            serLootDistributions.Parse(buffer);
            //still checking variablearrays
            this.LootDistributions = new List<LoodDistribution2>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _LootDistributions.Count; loop12++)
            {
                _LootDistributions[loop12] = new LoodDistribution2();
                _LootDistributions[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serLootDistributions.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _LootDistributions.Count);
            for (int loop12 = 0; loop12 < _LootDistributions.Count; loop12++)
            {
                _LootDistributions[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LootDistributionTable {");
            pad += 4;
            serLootDistributions.AsText(b, pad, "serLootDistributions: ");
            for (int loop12 = 0; loop12 < _LootDistributions.Count; loop12++)
            {
                _LootDistributions[loop12].AsText(b, pad, "_LootDistributions[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serLootDistributions = new SerializeData();
            serLootDistributions.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            LootDistributions = new List<LoodDistribution2>();
            for (int i = 0; i < (int)(serLootDistributions.Field1 / 92); i++)
            {
                stream.Position = serLootDistributions.Field0 + 16 + (92 * i);
                LoodDistribution2 temp12_LootDistributions;
                temp12_LootDistributions = new LoodDistribution2();
                temp12_LootDistributions.FileRead(stream, stream.Position);
                _LootDistributions.Add(temp12_LootDistributions);
            }
        }

    }

    public class LoodDistribution2 : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public int Field21;
        public int Field22;
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadInt(32);
            Field22 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(32, Field22);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LoodDistribution2 {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 52;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 56;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 60;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 64;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 68;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 72;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 76;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 80;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 84;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 88;
            Field22 = stream.ReadValueS32();
        }

    }

    public class RareItemNamesTable : GameMessage
    {
        public SerializeData serRareItemNames;
        List<RareItemNamesEntry> _RareItemNames;
        public List<RareItemNamesEntry> RareItemNames { get { return _RareItemNames; } set { _RareItemNames = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serRareItemNames = new SerializeData();
            serRareItemNames.Parse(buffer);
            //still checking variablearrays
            this.RareItemNames = new List<RareItemNamesEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _RareItemNames.Count; loop12++)
            {
                _RareItemNames[loop12] = new RareItemNamesEntry();
                _RareItemNames[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serRareItemNames.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _RareItemNames.Count);
            for (int loop12 = 0; loop12 < _RareItemNames.Count; loop12++)
            {
                _RareItemNames[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareItemNamesTable {");
            pad += 4;
            serRareItemNames.AsText(b, pad, "serRareItemNames: ");
            for (int loop12 = 0; loop12 < _RareItemNames.Count; loop12++)
            {
                _RareItemNames[loop12].AsText(b, pad, "_RareItemNames[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serRareItemNames = new SerializeData();
            serRareItemNames.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            RareItemNames = new List<RareItemNamesEntry>();
            for (int i = 0; i < (int)(serRareItemNames.Field1 / 272); i++)
            {
                stream.Position = serRareItemNames.Field0 + 16 + (272 * i);
                RareItemNamesEntry temp12_RareItemNames;
                temp12_RareItemNames = new RareItemNamesEntry();
                temp12_RareItemNames.FileRead(stream, stream.Position);
                _RareItemNames.Add(temp12_RareItemNames);
            }
        }

    }

    public class MonsterAffixesTable : GameMessage
    {
        public SerializeData serMonsterAffixes;
        List<MonsterAffixesEntry> _MonsterAffixes;
        public List<MonsterAffixesEntry> MonsterAffixes { get { return _MonsterAffixes; } set { _MonsterAffixes = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serMonsterAffixes = new SerializeData();
            serMonsterAffixes.Parse(buffer);
            //still checking variablearrays
            this.MonsterAffixes = new List<MonsterAffixesEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _MonsterAffixes.Count; loop12++)
            {
                _MonsterAffixes[loop12] = new MonsterAffixesEntry();
                _MonsterAffixes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serMonsterAffixes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _MonsterAffixes.Count);
            for (int loop12 = 0; loop12 < _MonsterAffixes.Count; loop12++)
            {
                _MonsterAffixes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "MonsterAffixesTable {");
            pad += 4;
            serMonsterAffixes.AsText(b, pad, "serMonsterAffixes: ");
            for (int loop12 = 0; loop12 < _MonsterAffixes.Count; loop12++)
            {
                _MonsterAffixes[loop12].AsText(b, pad, "_MonsterAffixes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serMonsterAffixes = new SerializeData();
            serMonsterAffixes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            MonsterAffixes = new List<MonsterAffixesEntry>();
            for (int i = 0; i < (int)(serMonsterAffixes.Field1 / 792); i++)
            {
                stream.Position = serMonsterAffixes.Field0 + 16 + (792 * i);
                MonsterAffixesEntry temp12_MonsterAffixes;
                temp12_MonsterAffixes = new MonsterAffixesEntry();
                temp12_MonsterAffixes.FileRead(stream, stream.Position);
                _MonsterAffixes.Add(temp12_MonsterAffixes);
            }
        }

    }

    public class RareMonsterNamesTable : GameMessage
    {
        public SerializeData serRareMonsterNames;
        List<RareMonsterNamesEntry> _RareMonsterNames;
        public List<RareMonsterNamesEntry> RareMonsterNames { get { return _RareMonsterNames; } set { _RareMonsterNames = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serRareMonsterNames = new SerializeData();
            serRareMonsterNames.Parse(buffer);
            //still checking variablearrays
            this.RareMonsterNames = new List<RareMonsterNamesEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _RareMonsterNames.Count; loop12++)
            {
                _RareMonsterNames[loop12] = new RareMonsterNamesEntry();
                _RareMonsterNames[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serRareMonsterNames.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _RareMonsterNames.Count);
            for (int loop12 = 0; loop12 < _RareMonsterNames.Count; loop12++)
            {
                _RareMonsterNames[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareMonsterNamesTable {");
            pad += 4;
            serRareMonsterNames.AsText(b, pad, "serRareMonsterNames: ");
            for (int loop12 = 0; loop12 < _RareMonsterNames.Count; loop12++)
            {
                _RareMonsterNames[loop12].AsText(b, pad, "_RareMonsterNames[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serRareMonsterNames = new SerializeData();
            serRareMonsterNames.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            RareMonsterNames = new List<RareMonsterNamesEntry>();
            for (int i = 0; i < (int)(serRareMonsterNames.Field1 / 392); i++)
            {
                stream.Position = serRareMonsterNames.Field0 + 16 + (392 * i);
                RareMonsterNamesEntry temp12_RareMonsterNames;
                temp12_RareMonsterNames = new RareMonsterNamesEntry();
                temp12_RareMonsterNames.FileRead(stream, stream.Position);
                _RareMonsterNames.Add(temp12_RareMonsterNames);
            }
        }

    }

    public class RareMonsterNamesEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        int _Field1;
        public int Field1 { get { return _Field1; } set { if (value < 0 || value > 11) throw new ArgumentOutOfRangeException(); _Field1 = value; } }
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 392; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(4);
            Field2 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(4, Field1);
            buffer.WriteCharArray(128, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RareMonsterNamesEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            _Field1 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadString(128);
        }

    }

    public class SocketedEffectsTable : GameMessage
    {
        public SerializeData serSocketedEffects;
        List<SocketedEffectsTableEntry> _SocketedEffects;
        public List<SocketedEffectsTableEntry> SocketedEffects { get { return _SocketedEffects; } set { _SocketedEffects = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serSocketedEffects = new SerializeData();
            serSocketedEffects.Parse(buffer);
            //still checking variablearrays
            this.SocketedEffects = new List<SocketedEffectsTableEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SocketedEffects.Count; loop12++)
            {
                _SocketedEffects[loop12] = new SocketedEffectsTableEntry();
                _SocketedEffects[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serSocketedEffects.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SocketedEffects.Count);
            for (int loop12 = 0; loop12 < _SocketedEffects.Count; loop12++)
            {
                _SocketedEffects[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SocketedEffectsTable {");
            pad += 4;
            serSocketedEffects.AsText(b, pad, "serSocketedEffects: ");
            for (int loop12 = 0; loop12 < _SocketedEffects.Count; loop12++)
            {
                _SocketedEffects[loop12].AsText(b, pad, "_SocketedEffects[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serSocketedEffects = new SerializeData();
            serSocketedEffects.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            SocketedEffects = new List<SocketedEffectsTableEntry>();
            for (int i = 0; i < (int)(serSocketedEffects.Field1 / 1416); i++)
            {
                stream.Position = serSocketedEffects.Field0 + 16 + (1416 * i);
                SocketedEffectsTableEntry temp12_SocketedEffects;
                temp12_SocketedEffects = new SocketedEffectsTableEntry();
                temp12_SocketedEffects.FileRead(stream, stream.Position);
                _SocketedEffects.Add(temp12_SocketedEffects);
            }
        }

    }

    public class ItemEnhancementTable : GameMessage
    {
        public SerializeData serItemEnhancements;
        List<ItemEnhancement> _ItemEnhancements;
        public List<ItemEnhancement> ItemEnhancements { get { return _ItemEnhancements; } set { _ItemEnhancements = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serItemEnhancements = new SerializeData();
            serItemEnhancements.Parse(buffer);
            //still checking variablearrays
            this.ItemEnhancements = new List<ItemEnhancement>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ItemEnhancements.Count; loop12++)
            {
                _ItemEnhancements[loop12] = new ItemEnhancement();
                _ItemEnhancements[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serItemEnhancements.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ItemEnhancements.Count);
            for (int loop12 = 0; loop12 < _ItemEnhancements.Count; loop12++)
            {
                _ItemEnhancements[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemEnhancementTable {");
            pad += 4;
            serItemEnhancements.AsText(b, pad, "serItemEnhancements: ");
            for (int loop12 = 0; loop12 < _ItemEnhancements.Count; loop12++)
            {
                _ItemEnhancements[loop12].AsText(b, pad, "_ItemEnhancements[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serItemEnhancements = new SerializeData();
            serItemEnhancements.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            ItemEnhancements = new List<ItemEnhancement>();
            for (int i = 0; i < (int)(serItemEnhancements.Field1 / 696); i++)
            {
                stream.Position = serItemEnhancements.Field0 + 16 + (696 * i);
                ItemEnhancement temp12_ItemEnhancements;
                temp12_ItemEnhancements = new ItemEnhancement();
                temp12_ItemEnhancements.FileRead(stream, stream.Position);
                _ItemEnhancements.Add(temp12_ItemEnhancements);
            }
        }

    }

    public class ItemEnhancement : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        AttributeSpecifier[] _Field5;
        public AttributeSpecifier[] Field5 { get { return _Field5; } set { if (value != null && value.Length != 16) throw new ArgumentOutOfRangeException(); _Field5 = value; } }
        public int Field6;
        RecipeIngredient[] _Field7;
        public RecipeIngredient[] Field7 { get { return _Field7; } set { if (value != null && value.Length != 3) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        public override int StructSize() { return 696; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = new AttributeSpecifier[16];
            for (int i = 0; i < _Field5.Length; i++)
            {
                _Field5[i] = new AttributeSpecifier();
                _Field5[i].Parse(buffer);
            }
            Field6 = buffer.ReadInt(32);
            Field7 = new RecipeIngredient[3];
            for (int i = 0; i < _Field7.Length; i++)
            {
                _Field7[i] = new RecipeIngredient();
                _Field7[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            for (int i = 0; i < _Field5.Length; i++) _Field5[i].Encode(buffer);
            buffer.WriteInt(32, Field6);
            for (int i = 0; i < _Field7.Length; i++) _Field7[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemEnhancement {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            for (int loop12 = 0; loop12 < _Field5.Length; loop12++)
            {
                _Field5[loop12].AsText(b, pad, "_Field5[loop12]: ");
            }
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            for (int loop12 = 0; loop12 < _Field7.Length; loop12++)
            {
                _Field7[loop12].AsText(b, pad, "_Field7[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 280;
            Field5 = new AttributeSpecifier[16];
            for (int loop12 = 0; loop12 < 16; loop12++)
            {
                AttributeSpecifier temp12_Field5;
                temp12_Field5 = new AttributeSpecifier();
                temp12_Field5.FileRead(stream, stream.Position);
                _Field5[loop12] = temp12_Field5;
            }
            stream.Position = offset + 664;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 668;
            Field7 = new RecipeIngredient[3];
            for (int loop12 = 0; loop12 < 3; loop12++)
            {
                RecipeIngredient temp12_Field7;
                temp12_Field7 = new RecipeIngredient();
                temp12_Field7.FileRead(stream, stream.Position);
                _Field7[loop12] = temp12_Field7;
            }
        }

    }

    public class RecipeIngredient : GameMessage
    {
        public int gbidItem;
        public int Field1;
        public override int StructSize() { return 8; }

        public override void Parse(GameBitBuffer buffer)
        {
            gbidItem = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, gbidItem);
            buffer.WriteInt(32, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RecipeIngredient {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("gbidItem:" + gbidItem.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            gbidItem = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
        }

    }

    public class ItemDropTable : GameMessage
    {
        public SerializeData serItemDrops;
        List<ItemDropTableEntry> _ItemDrops;
        public List<ItemDropTableEntry> ItemDrops { get { return _ItemDrops; } set { _ItemDrops = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serItemDrops = new SerializeData();
            serItemDrops.Parse(buffer);
            //still checking variablearrays
            this.ItemDrops = new List<ItemDropTableEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ItemDrops.Count; loop12++)
            {
                _ItemDrops[loop12] = new ItemDropTableEntry();
                _ItemDrops[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serItemDrops.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ItemDrops.Count);
            for (int loop12 = 0; loop12 < _ItemDrops.Count; loop12++)
            {
                _ItemDrops[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemDropTable {");
            pad += 4;
            serItemDrops.AsText(b, pad, "serItemDrops: ");
            for (int loop12 = 0; loop12 < _ItemDrops.Count; loop12++)
            {
                _ItemDrops[loop12].AsText(b, pad, "_ItemDrops[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serItemDrops = new SerializeData();
            serItemDrops.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            ItemDrops = new List<ItemDropTableEntry>();
            for (int i = 0; i < (int)(serItemDrops.Field1 / 1140); i++)
            {
                stream.Position = serItemDrops.Field0 + 16 + (1140 * i);
                ItemDropTableEntry temp12_ItemDrops;
                temp12_ItemDrops = new ItemDropTableEntry();
                temp12_ItemDrops.FileRead(stream, stream.Position);
                _ItemDrops.Add(temp12_ItemDrops);
            }
        }

    }

    public class ItemDropTableEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int Field1;
        public int Field2;
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        public int Field7;
        public int Field8;
        public int Field9;
        public int Field10;
        public int Field11;
        public int Field12;
        public int Field13;
        public int Field14;
        public int Field15;
        public int Field16;
        public int Field17;
        public int Field18;
        public int Field19;
        public int Field20;
        public int Field21;
        public int Field22;
        public int Field23;
        public int Field24;
        public int Field25;
        public int Field26;
        public int Field27;
        public int Field28;
        public int Field29;
        public int Field30;
        public int Field31;
        public int Field32;
        public int Field33;
        public int Field34;
        public int Field35;
        public int Field36;
        public int Field37;
        public int Field38;
        public int Field39;
        public int Field40;
        public int Field41;
        public int Field42;
        public int Field43;
        public int Field44;
        public int Field45;
        public int Field46;
        public int Field47;
        public int Field48;
        public int Field49;
        public int Field50;
        public int Field51;
        public int Field52;
        public int Field53;
        public int Field54;
        public int Field55;
        public int Field56;
        public int Field57;
        public int Field58;
        public int Field59;
        public int Field60;
        public int Field61;
        public int Field62;
        public int Field63;
        public int Field64;
        public int Field65;
        public int Field66;
        public int Field67;
        public int Field68;
        public int Field69;
        public int Field70;
        public int Field71;
        public int Field72;
        public int Field73;
        public int Field74;
        public int Field75;
        public int Field76;
        public int Field77;
        public int Field78;
        public int Field79;
        public int Field80;
        public int Field81;
        public int Field82;
        public int Field83;
        public int Field84;
        public int Field85;
        public int Field86;
        public int Field87;
        public int Field88;
        public int Field89;
        public int Field90;
        public int Field91;
        public int Field92;
        public int Field93;
        public int Field94;
        public int Field95;
        public int Field96;
        public int Field97;
        public int Field98;
        public int Field99;
        public int Field100;
        public int Field101;
        public int Field102;
        public int Field103;
        public int Field104;
        public int Field105;
        public int Field106;
        public int Field107;
        public int Field108;
        public int Field109;
        public int Field110;
        public int Field111;
        public int Field112;
        public int Field113;
        public int Field114;
        public int Field115;
        public int Field116;
        public int Field117;
        public int Field118;
        public int Field119;
        public int Field120;
        public int Field121;
        public int Field122;
        public int Field123;
        public int Field124;
        public int Field125;
        public int Field126;
        public int Field127;
        public int Field128;
        public int Field129;
        public int Field130;
        public int Field131;
        public int Field132;
        public int Field133;
        public int Field134;
        public int Field135;
        public int Field136;
        public int Field137;
        public int Field138;
        public int Field139;
        public int Field140;
        public int Field141;
        public int Field142;
        public int Field143;
        public int Field144;
        public int Field145;
        public int Field146;
        public int Field147;
        public int Field148;
        public int Field149;
        public int Field150;
        public int Field151;
        public int Field152;
        public int Field153;
        public int Field154;
        public int Field155;
        public int Field156;
        public int Field157;
        public int Field158;
        public int Field159;
        public int Field160;
        public int Field161;
        public int Field162;
        public int Field163;
        public int Field164;
        public int Field165;
        public int Field166;
        public int Field167;
        public int Field168;
        public int Field169;
        public int Field170;
        public int Field171;
        public int Field172;
        public int Field173;
        public int Field174;
        public int Field175;
        public int Field176;
        public int Field177;
        public int Field178;
        public int Field179;
        public int Field180;
        public int Field181;
        public int Field182;
        public int Field183;
        public int Field184;
        public int Field185;
        public int Field186;
        public int Field187;
        public int Field188;
        public int Field189;
        public int Field190;
        public int Field191;
        public int Field192;
        public int Field193;
        public int Field194;
        public int Field195;
        public int Field196;
        public int Field197;
        public int Field198;
        public int Field199;
        public int Field200;
        public int Field201;
        public int Field202;
        public int Field203;
        public int Field204;
        public int Field205;
        public int Field206;
        public int Field207;
        public int Field208;
        public int Field209;
        public int Field210;
        public int Field211;
        public int Field212;
        public int Field213;
        public int Field214;
        public int Field215;
        public int Field216;
        public int Field217;
        public int Field218;
        public int Field219;
        public override int StructSize() { return 1140; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadInt(32);
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadInt(32);
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadInt(32);
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadInt(32);
            Field22 = buffer.ReadInt(32);
            Field23 = buffer.ReadInt(32);
            Field24 = buffer.ReadInt(32);
            Field25 = buffer.ReadInt(32);
            Field26 = buffer.ReadInt(32);
            Field27 = buffer.ReadInt(32);
            Field28 = buffer.ReadInt(32);
            Field29 = buffer.ReadInt(32);
            Field30 = buffer.ReadInt(32);
            Field31 = buffer.ReadInt(32);
            Field32 = buffer.ReadInt(32);
            Field33 = buffer.ReadInt(32);
            Field34 = buffer.ReadInt(32);
            Field35 = buffer.ReadInt(32);
            Field36 = buffer.ReadInt(32);
            Field37 = buffer.ReadInt(32);
            Field38 = buffer.ReadInt(32);
            Field39 = buffer.ReadInt(32);
            Field40 = buffer.ReadInt(32);
            Field41 = buffer.ReadInt(32);
            Field42 = buffer.ReadInt(32);
            Field43 = buffer.ReadInt(32);
            Field44 = buffer.ReadInt(32);
            Field45 = buffer.ReadInt(32);
            Field46 = buffer.ReadInt(32);
            Field47 = buffer.ReadInt(32);
            Field48 = buffer.ReadInt(32);
            Field49 = buffer.ReadInt(32);
            Field50 = buffer.ReadInt(32);
            Field51 = buffer.ReadInt(32);
            Field52 = buffer.ReadInt(32);
            Field53 = buffer.ReadInt(32);
            Field54 = buffer.ReadInt(32);
            Field55 = buffer.ReadInt(32);
            Field56 = buffer.ReadInt(32);
            Field57 = buffer.ReadInt(32);
            Field58 = buffer.ReadInt(32);
            Field59 = buffer.ReadInt(32);
            Field60 = buffer.ReadInt(32);
            Field61 = buffer.ReadInt(32);
            Field62 = buffer.ReadInt(32);
            Field63 = buffer.ReadInt(32);
            Field64 = buffer.ReadInt(32);
            Field65 = buffer.ReadInt(32);
            Field66 = buffer.ReadInt(32);
            Field67 = buffer.ReadInt(32);
            Field68 = buffer.ReadInt(32);
            Field69 = buffer.ReadInt(32);
            Field70 = buffer.ReadInt(32);
            Field71 = buffer.ReadInt(32);
            Field72 = buffer.ReadInt(32);
            Field73 = buffer.ReadInt(32);
            Field74 = buffer.ReadInt(32);
            Field75 = buffer.ReadInt(32);
            Field76 = buffer.ReadInt(32);
            Field77 = buffer.ReadInt(32);
            Field78 = buffer.ReadInt(32);
            Field79 = buffer.ReadInt(32);
            Field80 = buffer.ReadInt(32);
            Field81 = buffer.ReadInt(32);
            Field82 = buffer.ReadInt(32);
            Field83 = buffer.ReadInt(32);
            Field84 = buffer.ReadInt(32);
            Field85 = buffer.ReadInt(32);
            Field86 = buffer.ReadInt(32);
            Field87 = buffer.ReadInt(32);
            Field88 = buffer.ReadInt(32);
            Field89 = buffer.ReadInt(32);
            Field90 = buffer.ReadInt(32);
            Field91 = buffer.ReadInt(32);
            Field92 = buffer.ReadInt(32);
            Field93 = buffer.ReadInt(32);
            Field94 = buffer.ReadInt(32);
            Field95 = buffer.ReadInt(32);
            Field96 = buffer.ReadInt(32);
            Field97 = buffer.ReadInt(32);
            Field98 = buffer.ReadInt(32);
            Field99 = buffer.ReadInt(32);
            Field100 = buffer.ReadInt(32);
            Field101 = buffer.ReadInt(32);
            Field102 = buffer.ReadInt(32);
            Field103 = buffer.ReadInt(32);
            Field104 = buffer.ReadInt(32);
            Field105 = buffer.ReadInt(32);
            Field106 = buffer.ReadInt(32);
            Field107 = buffer.ReadInt(32);
            Field108 = buffer.ReadInt(32);
            Field109 = buffer.ReadInt(32);
            Field110 = buffer.ReadInt(32);
            Field111 = buffer.ReadInt(32);
            Field112 = buffer.ReadInt(32);
            Field113 = buffer.ReadInt(32);
            Field114 = buffer.ReadInt(32);
            Field115 = buffer.ReadInt(32);
            Field116 = buffer.ReadInt(32);
            Field117 = buffer.ReadInt(32);
            Field118 = buffer.ReadInt(32);
            Field119 = buffer.ReadInt(32);
            Field120 = buffer.ReadInt(32);
            Field121 = buffer.ReadInt(32);
            Field122 = buffer.ReadInt(32);
            Field123 = buffer.ReadInt(32);
            Field124 = buffer.ReadInt(32);
            Field125 = buffer.ReadInt(32);
            Field126 = buffer.ReadInt(32);
            Field127 = buffer.ReadInt(32);
            Field128 = buffer.ReadInt(32);
            Field129 = buffer.ReadInt(32);
            Field130 = buffer.ReadInt(32);
            Field131 = buffer.ReadInt(32);
            Field132 = buffer.ReadInt(32);
            Field133 = buffer.ReadInt(32);
            Field134 = buffer.ReadInt(32);
            Field135 = buffer.ReadInt(32);
            Field136 = buffer.ReadInt(32);
            Field137 = buffer.ReadInt(32);
            Field138 = buffer.ReadInt(32);
            Field139 = buffer.ReadInt(32);
            Field140 = buffer.ReadInt(32);
            Field141 = buffer.ReadInt(32);
            Field142 = buffer.ReadInt(32);
            Field143 = buffer.ReadInt(32);
            Field144 = buffer.ReadInt(32);
            Field145 = buffer.ReadInt(32);
            Field146 = buffer.ReadInt(32);
            Field147 = buffer.ReadInt(32);
            Field148 = buffer.ReadInt(32);
            Field149 = buffer.ReadInt(32);
            Field150 = buffer.ReadInt(32);
            Field151 = buffer.ReadInt(32);
            Field152 = buffer.ReadInt(32);
            Field153 = buffer.ReadInt(32);
            Field154 = buffer.ReadInt(32);
            Field155 = buffer.ReadInt(32);
            Field156 = buffer.ReadInt(32);
            Field157 = buffer.ReadInt(32);
            Field158 = buffer.ReadInt(32);
            Field159 = buffer.ReadInt(32);
            Field160 = buffer.ReadInt(32);
            Field161 = buffer.ReadInt(32);
            Field162 = buffer.ReadInt(32);
            Field163 = buffer.ReadInt(32);
            Field164 = buffer.ReadInt(32);
            Field165 = buffer.ReadInt(32);
            Field166 = buffer.ReadInt(32);
            Field167 = buffer.ReadInt(32);
            Field168 = buffer.ReadInt(32);
            Field169 = buffer.ReadInt(32);
            Field170 = buffer.ReadInt(32);
            Field171 = buffer.ReadInt(32);
            Field172 = buffer.ReadInt(32);
            Field173 = buffer.ReadInt(32);
            Field174 = buffer.ReadInt(32);
            Field175 = buffer.ReadInt(32);
            Field176 = buffer.ReadInt(32);
            Field177 = buffer.ReadInt(32);
            Field178 = buffer.ReadInt(32);
            Field179 = buffer.ReadInt(32);
            Field180 = buffer.ReadInt(32);
            Field181 = buffer.ReadInt(32);
            Field182 = buffer.ReadInt(32);
            Field183 = buffer.ReadInt(32);
            Field184 = buffer.ReadInt(32);
            Field185 = buffer.ReadInt(32);
            Field186 = buffer.ReadInt(32);
            Field187 = buffer.ReadInt(32);
            Field188 = buffer.ReadInt(32);
            Field189 = buffer.ReadInt(32);
            Field190 = buffer.ReadInt(32);
            Field191 = buffer.ReadInt(32);
            Field192 = buffer.ReadInt(32);
            Field193 = buffer.ReadInt(32);
            Field194 = buffer.ReadInt(32);
            Field195 = buffer.ReadInt(32);
            Field196 = buffer.ReadInt(32);
            Field197 = buffer.ReadInt(32);
            Field198 = buffer.ReadInt(32);
            Field199 = buffer.ReadInt(32);
            Field200 = buffer.ReadInt(32);
            Field201 = buffer.ReadInt(32);
            Field202 = buffer.ReadInt(32);
            Field203 = buffer.ReadInt(32);
            Field204 = buffer.ReadInt(32);
            Field205 = buffer.ReadInt(32);
            Field206 = buffer.ReadInt(32);
            Field207 = buffer.ReadInt(32);
            Field208 = buffer.ReadInt(32);
            Field209 = buffer.ReadInt(32);
            Field210 = buffer.ReadInt(32);
            Field211 = buffer.ReadInt(32);
            Field212 = buffer.ReadInt(32);
            Field213 = buffer.ReadInt(32);
            Field214 = buffer.ReadInt(32);
            Field215 = buffer.ReadInt(32);
            Field216 = buffer.ReadInt(32);
            Field217 = buffer.ReadInt(32);
            Field218 = buffer.ReadInt(32);
            Field219 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteInt(32, Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteInt(32, Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteInt(32, Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(32, Field22);
            buffer.WriteInt(32, Field23);
            buffer.WriteInt(32, Field24);
            buffer.WriteInt(32, Field25);
            buffer.WriteInt(32, Field26);
            buffer.WriteInt(32, Field27);
            buffer.WriteInt(32, Field28);
            buffer.WriteInt(32, Field29);
            buffer.WriteInt(32, Field30);
            buffer.WriteInt(32, Field31);
            buffer.WriteInt(32, Field32);
            buffer.WriteInt(32, Field33);
            buffer.WriteInt(32, Field34);
            buffer.WriteInt(32, Field35);
            buffer.WriteInt(32, Field36);
            buffer.WriteInt(32, Field37);
            buffer.WriteInt(32, Field38);
            buffer.WriteInt(32, Field39);
            buffer.WriteInt(32, Field40);
            buffer.WriteInt(32, Field41);
            buffer.WriteInt(32, Field42);
            buffer.WriteInt(32, Field43);
            buffer.WriteInt(32, Field44);
            buffer.WriteInt(32, Field45);
            buffer.WriteInt(32, Field46);
            buffer.WriteInt(32, Field47);
            buffer.WriteInt(32, Field48);
            buffer.WriteInt(32, Field49);
            buffer.WriteInt(32, Field50);
            buffer.WriteInt(32, Field51);
            buffer.WriteInt(32, Field52);
            buffer.WriteInt(32, Field53);
            buffer.WriteInt(32, Field54);
            buffer.WriteInt(32, Field55);
            buffer.WriteInt(32, Field56);
            buffer.WriteInt(32, Field57);
            buffer.WriteInt(32, Field58);
            buffer.WriteInt(32, Field59);
            buffer.WriteInt(32, Field60);
            buffer.WriteInt(32, Field61);
            buffer.WriteInt(32, Field62);
            buffer.WriteInt(32, Field63);
            buffer.WriteInt(32, Field64);
            buffer.WriteInt(32, Field65);
            buffer.WriteInt(32, Field66);
            buffer.WriteInt(32, Field67);
            buffer.WriteInt(32, Field68);
            buffer.WriteInt(32, Field69);
            buffer.WriteInt(32, Field70);
            buffer.WriteInt(32, Field71);
            buffer.WriteInt(32, Field72);
            buffer.WriteInt(32, Field73);
            buffer.WriteInt(32, Field74);
            buffer.WriteInt(32, Field75);
            buffer.WriteInt(32, Field76);
            buffer.WriteInt(32, Field77);
            buffer.WriteInt(32, Field78);
            buffer.WriteInt(32, Field79);
            buffer.WriteInt(32, Field80);
            buffer.WriteInt(32, Field81);
            buffer.WriteInt(32, Field82);
            buffer.WriteInt(32, Field83);
            buffer.WriteInt(32, Field84);
            buffer.WriteInt(32, Field85);
            buffer.WriteInt(32, Field86);
            buffer.WriteInt(32, Field87);
            buffer.WriteInt(32, Field88);
            buffer.WriteInt(32, Field89);
            buffer.WriteInt(32, Field90);
            buffer.WriteInt(32, Field91);
            buffer.WriteInt(32, Field92);
            buffer.WriteInt(32, Field93);
            buffer.WriteInt(32, Field94);
            buffer.WriteInt(32, Field95);
            buffer.WriteInt(32, Field96);
            buffer.WriteInt(32, Field97);
            buffer.WriteInt(32, Field98);
            buffer.WriteInt(32, Field99);
            buffer.WriteInt(32, Field100);
            buffer.WriteInt(32, Field101);
            buffer.WriteInt(32, Field102);
            buffer.WriteInt(32, Field103);
            buffer.WriteInt(32, Field104);
            buffer.WriteInt(32, Field105);
            buffer.WriteInt(32, Field106);
            buffer.WriteInt(32, Field107);
            buffer.WriteInt(32, Field108);
            buffer.WriteInt(32, Field109);
            buffer.WriteInt(32, Field110);
            buffer.WriteInt(32, Field111);
            buffer.WriteInt(32, Field112);
            buffer.WriteInt(32, Field113);
            buffer.WriteInt(32, Field114);
            buffer.WriteInt(32, Field115);
            buffer.WriteInt(32, Field116);
            buffer.WriteInt(32, Field117);
            buffer.WriteInt(32, Field118);
            buffer.WriteInt(32, Field119);
            buffer.WriteInt(32, Field120);
            buffer.WriteInt(32, Field121);
            buffer.WriteInt(32, Field122);
            buffer.WriteInt(32, Field123);
            buffer.WriteInt(32, Field124);
            buffer.WriteInt(32, Field125);
            buffer.WriteInt(32, Field126);
            buffer.WriteInt(32, Field127);
            buffer.WriteInt(32, Field128);
            buffer.WriteInt(32, Field129);
            buffer.WriteInt(32, Field130);
            buffer.WriteInt(32, Field131);
            buffer.WriteInt(32, Field132);
            buffer.WriteInt(32, Field133);
            buffer.WriteInt(32, Field134);
            buffer.WriteInt(32, Field135);
            buffer.WriteInt(32, Field136);
            buffer.WriteInt(32, Field137);
            buffer.WriteInt(32, Field138);
            buffer.WriteInt(32, Field139);
            buffer.WriteInt(32, Field140);
            buffer.WriteInt(32, Field141);
            buffer.WriteInt(32, Field142);
            buffer.WriteInt(32, Field143);
            buffer.WriteInt(32, Field144);
            buffer.WriteInt(32, Field145);
            buffer.WriteInt(32, Field146);
            buffer.WriteInt(32, Field147);
            buffer.WriteInt(32, Field148);
            buffer.WriteInt(32, Field149);
            buffer.WriteInt(32, Field150);
            buffer.WriteInt(32, Field151);
            buffer.WriteInt(32, Field152);
            buffer.WriteInt(32, Field153);
            buffer.WriteInt(32, Field154);
            buffer.WriteInt(32, Field155);
            buffer.WriteInt(32, Field156);
            buffer.WriteInt(32, Field157);
            buffer.WriteInt(32, Field158);
            buffer.WriteInt(32, Field159);
            buffer.WriteInt(32, Field160);
            buffer.WriteInt(32, Field161);
            buffer.WriteInt(32, Field162);
            buffer.WriteInt(32, Field163);
            buffer.WriteInt(32, Field164);
            buffer.WriteInt(32, Field165);
            buffer.WriteInt(32, Field166);
            buffer.WriteInt(32, Field167);
            buffer.WriteInt(32, Field168);
            buffer.WriteInt(32, Field169);
            buffer.WriteInt(32, Field170);
            buffer.WriteInt(32, Field171);
            buffer.WriteInt(32, Field172);
            buffer.WriteInt(32, Field173);
            buffer.WriteInt(32, Field174);
            buffer.WriteInt(32, Field175);
            buffer.WriteInt(32, Field176);
            buffer.WriteInt(32, Field177);
            buffer.WriteInt(32, Field178);
            buffer.WriteInt(32, Field179);
            buffer.WriteInt(32, Field180);
            buffer.WriteInt(32, Field181);
            buffer.WriteInt(32, Field182);
            buffer.WriteInt(32, Field183);
            buffer.WriteInt(32, Field184);
            buffer.WriteInt(32, Field185);
            buffer.WriteInt(32, Field186);
            buffer.WriteInt(32, Field187);
            buffer.WriteInt(32, Field188);
            buffer.WriteInt(32, Field189);
            buffer.WriteInt(32, Field190);
            buffer.WriteInt(32, Field191);
            buffer.WriteInt(32, Field192);
            buffer.WriteInt(32, Field193);
            buffer.WriteInt(32, Field194);
            buffer.WriteInt(32, Field195);
            buffer.WriteInt(32, Field196);
            buffer.WriteInt(32, Field197);
            buffer.WriteInt(32, Field198);
            buffer.WriteInt(32, Field199);
            buffer.WriteInt(32, Field200);
            buffer.WriteInt(32, Field201);
            buffer.WriteInt(32, Field202);
            buffer.WriteInt(32, Field203);
            buffer.WriteInt(32, Field204);
            buffer.WriteInt(32, Field205);
            buffer.WriteInt(32, Field206);
            buffer.WriteInt(32, Field207);
            buffer.WriteInt(32, Field208);
            buffer.WriteInt(32, Field209);
            buffer.WriteInt(32, Field210);
            buffer.WriteInt(32, Field211);
            buffer.WriteInt(32, Field212);
            buffer.WriteInt(32, Field213);
            buffer.WriteInt(32, Field214);
            buffer.WriteInt(32, Field215);
            buffer.WriteInt(32, Field216);
            buffer.WriteInt(32, Field217);
            buffer.WriteInt(32, Field218);
            buffer.WriteInt(32, Field219);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemDropTableEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Field34:" + Field34.ToString());
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Field38:" + Field38.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Field40:" + Field40.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            b.Append(' ', pad); b.AppendLine("Field44:" + Field44.ToString());
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            b.Append(' ', pad); b.AppendLine("Field46:" + Field46.ToString());
            b.Append(' ', pad); b.AppendLine("Field47:" + Field47.ToString());
            b.Append(' ', pad); b.AppendLine("Field48:" + Field48.ToString());
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Field50:" + Field50.ToString());
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            b.Append(' ', pad); b.AppendLine("Field52:" + Field52.ToString());
            b.Append(' ', pad); b.AppendLine("Field53:" + Field53.ToString());
            b.Append(' ', pad); b.AppendLine("Field54:" + Field54.ToString());
            b.Append(' ', pad); b.AppendLine("Field55:" + Field55.ToString());
            b.Append(' ', pad); b.AppendLine("Field56:" + Field56.ToString());
            b.Append(' ', pad); b.AppendLine("Field57:" + Field57.ToString());
            b.Append(' ', pad); b.AppendLine("Field58:" + Field58.ToString());
            b.Append(' ', pad); b.AppendLine("Field59:" + Field59.ToString());
            b.Append(' ', pad); b.AppendLine("Field60:" + Field60.ToString());
            b.Append(' ', pad); b.AppendLine("Field61:" + Field61.ToString());
            b.Append(' ', pad); b.AppendLine("Field62:" + Field62.ToString());
            b.Append(' ', pad); b.AppendLine("Field63:" + Field63.ToString());
            b.Append(' ', pad); b.AppendLine("Field64:" + Field64.ToString());
            b.Append(' ', pad); b.AppendLine("Field65:" + Field65.ToString());
            b.Append(' ', pad); b.AppendLine("Field66:" + Field66.ToString());
            b.Append(' ', pad); b.AppendLine("Field67:" + Field67.ToString());
            b.Append(' ', pad); b.AppendLine("Field68:" + Field68.ToString());
            b.Append(' ', pad); b.AppendLine("Field69:" + Field69.ToString());
            b.Append(' ', pad); b.AppendLine("Field70:" + Field70.ToString());
            b.Append(' ', pad); b.AppendLine("Field71:" + Field71.ToString());
            b.Append(' ', pad); b.AppendLine("Field72:" + Field72.ToString());
            b.Append(' ', pad); b.AppendLine("Field73:" + Field73.ToString());
            b.Append(' ', pad); b.AppendLine("Field74:" + Field74.ToString());
            b.Append(' ', pad); b.AppendLine("Field75:" + Field75.ToString());
            b.Append(' ', pad); b.AppendLine("Field76:" + Field76.ToString());
            b.Append(' ', pad); b.AppendLine("Field77:" + Field77.ToString());
            b.Append(' ', pad); b.AppendLine("Field78:" + Field78.ToString());
            b.Append(' ', pad); b.AppendLine("Field79:" + Field79.ToString());
            b.Append(' ', pad); b.AppendLine("Field80:" + Field80.ToString());
            b.Append(' ', pad); b.AppendLine("Field81:" + Field81.ToString());
            b.Append(' ', pad); b.AppendLine("Field82:" + Field82.ToString());
            b.Append(' ', pad); b.AppendLine("Field83:" + Field83.ToString());
            b.Append(' ', pad); b.AppendLine("Field84:" + Field84.ToString());
            b.Append(' ', pad); b.AppendLine("Field85:" + Field85.ToString());
            b.Append(' ', pad); b.AppendLine("Field86:" + Field86.ToString());
            b.Append(' ', pad); b.AppendLine("Field87:" + Field87.ToString());
            b.Append(' ', pad); b.AppendLine("Field88:" + Field88.ToString());
            b.Append(' ', pad); b.AppendLine("Field89:" + Field89.ToString());
            b.Append(' ', pad); b.AppendLine("Field90:" + Field90.ToString());
            b.Append(' ', pad); b.AppendLine("Field91:" + Field91.ToString());
            b.Append(' ', pad); b.AppendLine("Field92:" + Field92.ToString());
            b.Append(' ', pad); b.AppendLine("Field93:" + Field93.ToString());
            b.Append(' ', pad); b.AppendLine("Field94:" + Field94.ToString());
            b.Append(' ', pad); b.AppendLine("Field95:" + Field95.ToString());
            b.Append(' ', pad); b.AppendLine("Field96:" + Field96.ToString());
            b.Append(' ', pad); b.AppendLine("Field97:" + Field97.ToString());
            b.Append(' ', pad); b.AppendLine("Field98:" + Field98.ToString());
            b.Append(' ', pad); b.AppendLine("Field99:" + Field99.ToString());
            b.Append(' ', pad); b.AppendLine("Field100:" + Field100.ToString());
            b.Append(' ', pad); b.AppendLine("Field101:" + Field101.ToString());
            b.Append(' ', pad); b.AppendLine("Field102:" + Field102.ToString());
            b.Append(' ', pad); b.AppendLine("Field103:" + Field103.ToString());
            b.Append(' ', pad); b.AppendLine("Field104:" + Field104.ToString());
            b.Append(' ', pad); b.AppendLine("Field105:" + Field105.ToString());
            b.Append(' ', pad); b.AppendLine("Field106:" + Field106.ToString());
            b.Append(' ', pad); b.AppendLine("Field107:" + Field107.ToString());
            b.Append(' ', pad); b.AppendLine("Field108:" + Field108.ToString());
            b.Append(' ', pad); b.AppendLine("Field109:" + Field109.ToString());
            b.Append(' ', pad); b.AppendLine("Field110:" + Field110.ToString());
            b.Append(' ', pad); b.AppendLine("Field111:" + Field111.ToString());
            b.Append(' ', pad); b.AppendLine("Field112:" + Field112.ToString());
            b.Append(' ', pad); b.AppendLine("Field113:" + Field113.ToString());
            b.Append(' ', pad); b.AppendLine("Field114:" + Field114.ToString());
            b.Append(' ', pad); b.AppendLine("Field115:" + Field115.ToString());
            b.Append(' ', pad); b.AppendLine("Field116:" + Field116.ToString());
            b.Append(' ', pad); b.AppendLine("Field117:" + Field117.ToString());
            b.Append(' ', pad); b.AppendLine("Field118:" + Field118.ToString());
            b.Append(' ', pad); b.AppendLine("Field119:" + Field119.ToString());
            b.Append(' ', pad); b.AppendLine("Field120:" + Field120.ToString());
            b.Append(' ', pad); b.AppendLine("Field121:" + Field121.ToString());
            b.Append(' ', pad); b.AppendLine("Field122:" + Field122.ToString());
            b.Append(' ', pad); b.AppendLine("Field123:" + Field123.ToString());
            b.Append(' ', pad); b.AppendLine("Field124:" + Field124.ToString());
            b.Append(' ', pad); b.AppendLine("Field125:" + Field125.ToString());
            b.Append(' ', pad); b.AppendLine("Field126:" + Field126.ToString());
            b.Append(' ', pad); b.AppendLine("Field127:" + Field127.ToString());
            b.Append(' ', pad); b.AppendLine("Field128:" + Field128.ToString());
            b.Append(' ', pad); b.AppendLine("Field129:" + Field129.ToString());
            b.Append(' ', pad); b.AppendLine("Field130:" + Field130.ToString());
            b.Append(' ', pad); b.AppendLine("Field131:" + Field131.ToString());
            b.Append(' ', pad); b.AppendLine("Field132:" + Field132.ToString());
            b.Append(' ', pad); b.AppendLine("Field133:" + Field133.ToString());
            b.Append(' ', pad); b.AppendLine("Field134:" + Field134.ToString());
            b.Append(' ', pad); b.AppendLine("Field135:" + Field135.ToString());
            b.Append(' ', pad); b.AppendLine("Field136:" + Field136.ToString());
            b.Append(' ', pad); b.AppendLine("Field137:" + Field137.ToString());
            b.Append(' ', pad); b.AppendLine("Field138:" + Field138.ToString());
            b.Append(' ', pad); b.AppendLine("Field139:" + Field139.ToString());
            b.Append(' ', pad); b.AppendLine("Field140:" + Field140.ToString());
            b.Append(' ', pad); b.AppendLine("Field141:" + Field141.ToString());
            b.Append(' ', pad); b.AppendLine("Field142:" + Field142.ToString());
            b.Append(' ', pad); b.AppendLine("Field143:" + Field143.ToString());
            b.Append(' ', pad); b.AppendLine("Field144:" + Field144.ToString());
            b.Append(' ', pad); b.AppendLine("Field145:" + Field145.ToString());
            b.Append(' ', pad); b.AppendLine("Field146:" + Field146.ToString());
            b.Append(' ', pad); b.AppendLine("Field147:" + Field147.ToString());
            b.Append(' ', pad); b.AppendLine("Field148:" + Field148.ToString());
            b.Append(' ', pad); b.AppendLine("Field149:" + Field149.ToString());
            b.Append(' ', pad); b.AppendLine("Field150:" + Field150.ToString());
            b.Append(' ', pad); b.AppendLine("Field151:" + Field151.ToString());
            b.Append(' ', pad); b.AppendLine("Field152:" + Field152.ToString());
            b.Append(' ', pad); b.AppendLine("Field153:" + Field153.ToString());
            b.Append(' ', pad); b.AppendLine("Field154:" + Field154.ToString());
            b.Append(' ', pad); b.AppendLine("Field155:" + Field155.ToString());
            b.Append(' ', pad); b.AppendLine("Field156:" + Field156.ToString());
            b.Append(' ', pad); b.AppendLine("Field157:" + Field157.ToString());
            b.Append(' ', pad); b.AppendLine("Field158:" + Field158.ToString());
            b.Append(' ', pad); b.AppendLine("Field159:" + Field159.ToString());
            b.Append(' ', pad); b.AppendLine("Field160:" + Field160.ToString());
            b.Append(' ', pad); b.AppendLine("Field161:" + Field161.ToString());
            b.Append(' ', pad); b.AppendLine("Field162:" + Field162.ToString());
            b.Append(' ', pad); b.AppendLine("Field163:" + Field163.ToString());
            b.Append(' ', pad); b.AppendLine("Field164:" + Field164.ToString());
            b.Append(' ', pad); b.AppendLine("Field165:" + Field165.ToString());
            b.Append(' ', pad); b.AppendLine("Field166:" + Field166.ToString());
            b.Append(' ', pad); b.AppendLine("Field167:" + Field167.ToString());
            b.Append(' ', pad); b.AppendLine("Field168:" + Field168.ToString());
            b.Append(' ', pad); b.AppendLine("Field169:" + Field169.ToString());
            b.Append(' ', pad); b.AppendLine("Field170:" + Field170.ToString());
            b.Append(' ', pad); b.AppendLine("Field171:" + Field171.ToString());
            b.Append(' ', pad); b.AppendLine("Field172:" + Field172.ToString());
            b.Append(' ', pad); b.AppendLine("Field173:" + Field173.ToString());
            b.Append(' ', pad); b.AppendLine("Field174:" + Field174.ToString());
            b.Append(' ', pad); b.AppendLine("Field175:" + Field175.ToString());
            b.Append(' ', pad); b.AppendLine("Field176:" + Field176.ToString());
            b.Append(' ', pad); b.AppendLine("Field177:" + Field177.ToString());
            b.Append(' ', pad); b.AppendLine("Field178:" + Field178.ToString());
            b.Append(' ', pad); b.AppendLine("Field179:" + Field179.ToString());
            b.Append(' ', pad); b.AppendLine("Field180:" + Field180.ToString());
            b.Append(' ', pad); b.AppendLine("Field181:" + Field181.ToString());
            b.Append(' ', pad); b.AppendLine("Field182:" + Field182.ToString());
            b.Append(' ', pad); b.AppendLine("Field183:" + Field183.ToString());
            b.Append(' ', pad); b.AppendLine("Field184:" + Field184.ToString());
            b.Append(' ', pad); b.AppendLine("Field185:" + Field185.ToString());
            b.Append(' ', pad); b.AppendLine("Field186:" + Field186.ToString());
            b.Append(' ', pad); b.AppendLine("Field187:" + Field187.ToString());
            b.Append(' ', pad); b.AppendLine("Field188:" + Field188.ToString());
            b.Append(' ', pad); b.AppendLine("Field189:" + Field189.ToString());
            b.Append(' ', pad); b.AppendLine("Field190:" + Field190.ToString());
            b.Append(' ', pad); b.AppendLine("Field191:" + Field191.ToString());
            b.Append(' ', pad); b.AppendLine("Field192:" + Field192.ToString());
            b.Append(' ', pad); b.AppendLine("Field193:" + Field193.ToString());
            b.Append(' ', pad); b.AppendLine("Field194:" + Field194.ToString());
            b.Append(' ', pad); b.AppendLine("Field195:" + Field195.ToString());
            b.Append(' ', pad); b.AppendLine("Field196:" + Field196.ToString());
            b.Append(' ', pad); b.AppendLine("Field197:" + Field197.ToString());
            b.Append(' ', pad); b.AppendLine("Field198:" + Field198.ToString());
            b.Append(' ', pad); b.AppendLine("Field199:" + Field199.ToString());
            b.Append(' ', pad); b.AppendLine("Field200:" + Field200.ToString());
            b.Append(' ', pad); b.AppendLine("Field201:" + Field201.ToString());
            b.Append(' ', pad); b.AppendLine("Field202:" + Field202.ToString());
            b.Append(' ', pad); b.AppendLine("Field203:" + Field203.ToString());
            b.Append(' ', pad); b.AppendLine("Field204:" + Field204.ToString());
            b.Append(' ', pad); b.AppendLine("Field205:" + Field205.ToString());
            b.Append(' ', pad); b.AppendLine("Field206:" + Field206.ToString());
            b.Append(' ', pad); b.AppendLine("Field207:" + Field207.ToString());
            b.Append(' ', pad); b.AppendLine("Field208:" + Field208.ToString());
            b.Append(' ', pad); b.AppendLine("Field209:" + Field209.ToString());
            b.Append(' ', pad); b.AppendLine("Field210:" + Field210.ToString());
            b.Append(' ', pad); b.AppendLine("Field211:" + Field211.ToString());
            b.Append(' ', pad); b.AppendLine("Field212:" + Field212.ToString());
            b.Append(' ', pad); b.AppendLine("Field213:" + Field213.ToString());
            b.Append(' ', pad); b.AppendLine("Field214:" + Field214.ToString());
            b.Append(' ', pad); b.AppendLine("Field215:" + Field215.ToString());
            b.Append(' ', pad); b.AppendLine("Field216:" + Field216.ToString());
            b.Append(' ', pad); b.AppendLine("Field217:" + Field217.ToString());
            b.Append(' ', pad); b.AppendLine("Field218:" + Field218.ToString());
            b.Append(' ', pad); b.AppendLine("Field219:" + Field219.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 276;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 280;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field7 = stream.ReadValueS32();
            stream.Position = offset + 288;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 292;
            Field9 = stream.ReadValueS32();
            stream.Position = offset + 296;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 300;
            Field11 = stream.ReadValueS32();
            stream.Position = offset + 304;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 308;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 312;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 316;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 320;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 324;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 328;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 332;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 336;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 340;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 344;
            Field22 = stream.ReadValueS32();
            stream.Position = offset + 348;
            Field23 = stream.ReadValueS32();
            stream.Position = offset + 352;
            Field24 = stream.ReadValueS32();
            stream.Position = offset + 356;
            Field25 = stream.ReadValueS32();
            stream.Position = offset + 360;
            Field26 = stream.ReadValueS32();
            stream.Position = offset + 364;
            Field27 = stream.ReadValueS32();
            stream.Position = offset + 368;
            Field28 = stream.ReadValueS32();
            stream.Position = offset + 372;
            Field29 = stream.ReadValueS32();
            stream.Position = offset + 376;
            Field30 = stream.ReadValueS32();
            stream.Position = offset + 380;
            Field31 = stream.ReadValueS32();
            stream.Position = offset + 384;
            Field32 = stream.ReadValueS32();
            stream.Position = offset + 388;
            Field33 = stream.ReadValueS32();
            stream.Position = offset + 392;
            Field34 = stream.ReadValueS32();
            stream.Position = offset + 396;
            Field35 = stream.ReadValueS32();
            stream.Position = offset + 400;
            Field36 = stream.ReadValueS32();
            stream.Position = offset + 404;
            Field37 = stream.ReadValueS32();
            stream.Position = offset + 408;
            Field38 = stream.ReadValueS32();
            stream.Position = offset + 412;
            Field39 = stream.ReadValueS32();
            stream.Position = offset + 416;
            Field40 = stream.ReadValueS32();
            stream.Position = offset + 420;
            Field41 = stream.ReadValueS32();
            stream.Position = offset + 424;
            Field42 = stream.ReadValueS32();
            stream.Position = offset + 428;
            Field43 = stream.ReadValueS32();
            stream.Position = offset + 432;
            Field44 = stream.ReadValueS32();
            stream.Position = offset + 436;
            Field45 = stream.ReadValueS32();
            stream.Position = offset + 440;
            Field46 = stream.ReadValueS32();
            stream.Position = offset + 444;
            Field47 = stream.ReadValueS32();
            stream.Position = offset + 448;
            Field48 = stream.ReadValueS32();
            stream.Position = offset + 452;
            Field49 = stream.ReadValueS32();
            stream.Position = offset + 456;
            Field50 = stream.ReadValueS32();
            stream.Position = offset + 460;
            Field51 = stream.ReadValueS32();
            stream.Position = offset + 464;
            Field52 = stream.ReadValueS32();
            stream.Position = offset + 468;
            Field53 = stream.ReadValueS32();
            stream.Position = offset + 472;
            Field54 = stream.ReadValueS32();
            stream.Position = offset + 476;
            Field55 = stream.ReadValueS32();
            stream.Position = offset + 480;
            Field56 = stream.ReadValueS32();
            stream.Position = offset + 484;
            Field57 = stream.ReadValueS32();
            stream.Position = offset + 488;
            Field58 = stream.ReadValueS32();
            stream.Position = offset + 492;
            Field59 = stream.ReadValueS32();
            stream.Position = offset + 496;
            Field60 = stream.ReadValueS32();
            stream.Position = offset + 500;
            Field61 = stream.ReadValueS32();
            stream.Position = offset + 504;
            Field62 = stream.ReadValueS32();
            stream.Position = offset + 508;
            Field63 = stream.ReadValueS32();
            stream.Position = offset + 512;
            Field64 = stream.ReadValueS32();
            stream.Position = offset + 516;
            Field65 = stream.ReadValueS32();
            stream.Position = offset + 520;
            Field66 = stream.ReadValueS32();
            stream.Position = offset + 524;
            Field67 = stream.ReadValueS32();
            stream.Position = offset + 528;
            Field68 = stream.ReadValueS32();
            stream.Position = offset + 532;
            Field69 = stream.ReadValueS32();
            stream.Position = offset + 536;
            Field70 = stream.ReadValueS32();
            stream.Position = offset + 540;
            Field71 = stream.ReadValueS32();
            stream.Position = offset + 544;
            Field72 = stream.ReadValueS32();
            stream.Position = offset + 548;
            Field73 = stream.ReadValueS32();
            stream.Position = offset + 552;
            Field74 = stream.ReadValueS32();
            stream.Position = offset + 556;
            Field75 = stream.ReadValueS32();
            stream.Position = offset + 560;
            Field76 = stream.ReadValueS32();
            stream.Position = offset + 564;
            Field77 = stream.ReadValueS32();
            stream.Position = offset + 568;
            Field78 = stream.ReadValueS32();
            stream.Position = offset + 572;
            Field79 = stream.ReadValueS32();
            stream.Position = offset + 576;
            Field80 = stream.ReadValueS32();
            stream.Position = offset + 580;
            Field81 = stream.ReadValueS32();
            stream.Position = offset + 584;
            Field82 = stream.ReadValueS32();
            stream.Position = offset + 588;
            Field83 = stream.ReadValueS32();
            stream.Position = offset + 592;
            Field84 = stream.ReadValueS32();
            stream.Position = offset + 596;
            Field85 = stream.ReadValueS32();
            stream.Position = offset + 600;
            Field86 = stream.ReadValueS32();
            stream.Position = offset + 604;
            Field87 = stream.ReadValueS32();
            stream.Position = offset + 608;
            Field88 = stream.ReadValueS32();
            stream.Position = offset + 612;
            Field89 = stream.ReadValueS32();
            stream.Position = offset + 616;
            Field90 = stream.ReadValueS32();
            stream.Position = offset + 620;
            Field91 = stream.ReadValueS32();
            stream.Position = offset + 624;
            Field92 = stream.ReadValueS32();
            stream.Position = offset + 628;
            Field93 = stream.ReadValueS32();
            stream.Position = offset + 632;
            Field94 = stream.ReadValueS32();
            stream.Position = offset + 636;
            Field95 = stream.ReadValueS32();
            stream.Position = offset + 640;
            Field96 = stream.ReadValueS32();
            stream.Position = offset + 644;
            Field97 = stream.ReadValueS32();
            stream.Position = offset + 648;
            Field98 = stream.ReadValueS32();
            stream.Position = offset + 652;
            Field99 = stream.ReadValueS32();
            stream.Position = offset + 656;
            Field100 = stream.ReadValueS32();
            stream.Position = offset + 660;
            Field101 = stream.ReadValueS32();
            stream.Position = offset + 664;
            Field102 = stream.ReadValueS32();
            stream.Position = offset + 668;
            Field103 = stream.ReadValueS32();
            stream.Position = offset + 672;
            Field104 = stream.ReadValueS32();
            stream.Position = offset + 676;
            Field105 = stream.ReadValueS32();
            stream.Position = offset + 680;
            Field106 = stream.ReadValueS32();
            stream.Position = offset + 684;
            Field107 = stream.ReadValueS32();
            stream.Position = offset + 688;
            Field108 = stream.ReadValueS32();
            stream.Position = offset + 692;
            Field109 = stream.ReadValueS32();
            stream.Position = offset + 696;
            Field110 = stream.ReadValueS32();
            stream.Position = offset + 700;
            Field111 = stream.ReadValueS32();
            stream.Position = offset + 704;
            Field112 = stream.ReadValueS32();
            stream.Position = offset + 708;
            Field113 = stream.ReadValueS32();
            stream.Position = offset + 712;
            Field114 = stream.ReadValueS32();
            stream.Position = offset + 716;
            Field115 = stream.ReadValueS32();
            stream.Position = offset + 720;
            Field116 = stream.ReadValueS32();
            stream.Position = offset + 724;
            Field117 = stream.ReadValueS32();
            stream.Position = offset + 728;
            Field118 = stream.ReadValueS32();
            stream.Position = offset + 732;
            Field119 = stream.ReadValueS32();
            stream.Position = offset + 736;
            Field120 = stream.ReadValueS32();
            stream.Position = offset + 740;
            Field121 = stream.ReadValueS32();
            stream.Position = offset + 744;
            Field122 = stream.ReadValueS32();
            stream.Position = offset + 748;
            Field123 = stream.ReadValueS32();
            stream.Position = offset + 752;
            Field124 = stream.ReadValueS32();
            stream.Position = offset + 756;
            Field125 = stream.ReadValueS32();
            stream.Position = offset + 760;
            Field126 = stream.ReadValueS32();
            stream.Position = offset + 764;
            Field127 = stream.ReadValueS32();
            stream.Position = offset + 768;
            Field128 = stream.ReadValueS32();
            stream.Position = offset + 772;
            Field129 = stream.ReadValueS32();
            stream.Position = offset + 776;
            Field130 = stream.ReadValueS32();
            stream.Position = offset + 780;
            Field131 = stream.ReadValueS32();
            stream.Position = offset + 784;
            Field132 = stream.ReadValueS32();
            stream.Position = offset + 788;
            Field133 = stream.ReadValueS32();
            stream.Position = offset + 792;
            Field134 = stream.ReadValueS32();
            stream.Position = offset + 796;
            Field135 = stream.ReadValueS32();
            stream.Position = offset + 800;
            Field136 = stream.ReadValueS32();
            stream.Position = offset + 804;
            Field137 = stream.ReadValueS32();
            stream.Position = offset + 808;
            Field138 = stream.ReadValueS32();
            stream.Position = offset + 812;
            Field139 = stream.ReadValueS32();
            stream.Position = offset + 816;
            Field140 = stream.ReadValueS32();
            stream.Position = offset + 820;
            Field141 = stream.ReadValueS32();
            stream.Position = offset + 824;
            Field142 = stream.ReadValueS32();
            stream.Position = offset + 828;
            Field143 = stream.ReadValueS32();
            stream.Position = offset + 832;
            Field144 = stream.ReadValueS32();
            stream.Position = offset + 836;
            Field145 = stream.ReadValueS32();
            stream.Position = offset + 840;
            Field146 = stream.ReadValueS32();
            stream.Position = offset + 844;
            Field147 = stream.ReadValueS32();
            stream.Position = offset + 848;
            Field148 = stream.ReadValueS32();
            stream.Position = offset + 852;
            Field149 = stream.ReadValueS32();
            stream.Position = offset + 856;
            Field150 = stream.ReadValueS32();
            stream.Position = offset + 860;
            Field151 = stream.ReadValueS32();
            stream.Position = offset + 864;
            Field152 = stream.ReadValueS32();
            stream.Position = offset + 868;
            Field153 = stream.ReadValueS32();
            stream.Position = offset + 872;
            Field154 = stream.ReadValueS32();
            stream.Position = offset + 876;
            Field155 = stream.ReadValueS32();
            stream.Position = offset + 880;
            Field156 = stream.ReadValueS32();
            stream.Position = offset + 884;
            Field157 = stream.ReadValueS32();
            stream.Position = offset + 888;
            Field158 = stream.ReadValueS32();
            stream.Position = offset + 892;
            Field159 = stream.ReadValueS32();
            stream.Position = offset + 896;
            Field160 = stream.ReadValueS32();
            stream.Position = offset + 900;
            Field161 = stream.ReadValueS32();
            stream.Position = offset + 904;
            Field162 = stream.ReadValueS32();
            stream.Position = offset + 908;
            Field163 = stream.ReadValueS32();
            stream.Position = offset + 912;
            Field164 = stream.ReadValueS32();
            stream.Position = offset + 916;
            Field165 = stream.ReadValueS32();
            stream.Position = offset + 920;
            Field166 = stream.ReadValueS32();
            stream.Position = offset + 924;
            Field167 = stream.ReadValueS32();
            stream.Position = offset + 928;
            Field168 = stream.ReadValueS32();
            stream.Position = offset + 932;
            Field169 = stream.ReadValueS32();
            stream.Position = offset + 936;
            Field170 = stream.ReadValueS32();
            stream.Position = offset + 940;
            Field171 = stream.ReadValueS32();
            stream.Position = offset + 944;
            Field172 = stream.ReadValueS32();
            stream.Position = offset + 948;
            Field173 = stream.ReadValueS32();
            stream.Position = offset + 952;
            Field174 = stream.ReadValueS32();
            stream.Position = offset + 956;
            Field175 = stream.ReadValueS32();
            stream.Position = offset + 960;
            Field176 = stream.ReadValueS32();
            stream.Position = offset + 964;
            Field177 = stream.ReadValueS32();
            stream.Position = offset + 968;
            Field178 = stream.ReadValueS32();
            stream.Position = offset + 972;
            Field179 = stream.ReadValueS32();
            stream.Position = offset + 976;
            Field180 = stream.ReadValueS32();
            stream.Position = offset + 980;
            Field181 = stream.ReadValueS32();
            stream.Position = offset + 984;
            Field182 = stream.ReadValueS32();
            stream.Position = offset + 988;
            Field183 = stream.ReadValueS32();
            stream.Position = offset + 992;
            Field184 = stream.ReadValueS32();
            stream.Position = offset + 996;
            Field185 = stream.ReadValueS32();
            stream.Position = offset + 1000;
            Field186 = stream.ReadValueS32();
            stream.Position = offset + 1004;
            Field187 = stream.ReadValueS32();
            stream.Position = offset + 1008;
            Field188 = stream.ReadValueS32();
            stream.Position = offset + 1012;
            Field189 = stream.ReadValueS32();
            stream.Position = offset + 1016;
            Field190 = stream.ReadValueS32();
            stream.Position = offset + 1024;
            Field191 = stream.ReadValueS32();
            stream.Position = offset + 1028;
            Field192 = stream.ReadValueS32();
            stream.Position = offset + 1032;
            Field193 = stream.ReadValueS32();
            stream.Position = offset + 1036;
            Field194 = stream.ReadValueS32();
            stream.Position = offset + 1040;
            Field195 = stream.ReadValueS32();
            stream.Position = offset + 1044;
            Field196 = stream.ReadValueS32();
            stream.Position = offset + 1048;
            Field197 = stream.ReadValueS32();
            stream.Position = offset + 1052;
            Field198 = stream.ReadValueS32();
            stream.Position = offset + 1056;
            Field199 = stream.ReadValueS32();
            stream.Position = offset + 1060;
            Field200 = stream.ReadValueS32();
            stream.Position = offset + 1064;
            Field201 = stream.ReadValueS32();
            stream.Position = offset + 1068;
            Field202 = stream.ReadValueS32();
            stream.Position = offset + 1072;
            Field203 = stream.ReadValueS32();
            stream.Position = offset + 1076;
            Field204 = stream.ReadValueS32();
            stream.Position = offset + 1080;
            Field205 = stream.ReadValueS32();
            stream.Position = offset + 1084;
            Field206 = stream.ReadValueS32();
            stream.Position = offset + 1088;
            Field207 = stream.ReadValueS32();
            stream.Position = offset + 1092;
            Field208 = stream.ReadValueS32();
            stream.Position = offset + 1096;
            Field209 = stream.ReadValueS32();
            stream.Position = offset + 1100;
            Field210 = stream.ReadValueS32();
            stream.Position = offset + 1104;
            Field211 = stream.ReadValueS32();
            stream.Position = offset + 1108;
            Field212 = stream.ReadValueS32();
            stream.Position = offset + 1112;
            Field213 = stream.ReadValueS32();
            stream.Position = offset + 1116;
            Field214 = stream.ReadValueS32();
            stream.Position = offset + 1120;
            Field215 = stream.ReadValueS32();
            stream.Position = offset + 1124;
            Field216 = stream.ReadValueS32();
            stream.Position = offset + 1128;
            Field217 = stream.ReadValueS32();
            stream.Position = offset + 1132;
            Field218 = stream.ReadValueS32();
            stream.Position = offset + 1136;
            Field219 = stream.ReadValueS32();
        }

    }

    public class ItemLevelModTable : GameMessage
    {
        public SerializeData serItemLevelModifiers;
        List<LootDistribution> _ItemLevelModifiers;
        public List<LootDistribution> ItemLevelModifiers { get { return _ItemLevelModifiers; } set { _ItemLevelModifiers = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serItemLevelModifiers = new SerializeData();
            serItemLevelModifiers.Parse(buffer);
            //still checking variablearrays
            this.ItemLevelModifiers = new List<LootDistribution>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ItemLevelModifiers.Count; loop12++)
            {
                _ItemLevelModifiers[loop12] = new LootDistribution();
                _ItemLevelModifiers[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serItemLevelModifiers.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ItemLevelModifiers.Count);
            for (int loop12 = 0; loop12 < _ItemLevelModifiers.Count; loop12++)
            {
                _ItemLevelModifiers[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemLevelModTable {");
            pad += 4;
            serItemLevelModifiers.AsText(b, pad, "serItemLevelModifiers: ");
            for (int loop12 = 0; loop12 < _ItemLevelModifiers.Count; loop12++)
            {
                _ItemLevelModifiers[loop12].AsText(b, pad, "_ItemLevelModifiers[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serItemLevelModifiers = new SerializeData();
            serItemLevelModifiers.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            ItemLevelModifiers = new List<LootDistribution>();
            for (int i = 0; i < (int)(serItemLevelModifiers.Field1 / 92); i++)
            {
                stream.Position = serItemLevelModifiers.Field0 + 16 + (92 * i);
                LootDistribution temp12_ItemLevelModifiers;
                temp12_ItemLevelModifiers = new LootDistribution();
                temp12_ItemLevelModifiers.FileRead(stream, stream.Position);
                _ItemLevelModifiers.Add(temp12_ItemLevelModifiers);
            }
        }

    }

    public class LootDistribution : GameMessage
    {
        public int Field0;
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public int Field12;
        public int Field13;
        public int Field14;
        public int Field15;
        public int Field16;
        public int Field17;
        public int Field18;
        public int Field19;
        public int Field20;
        public int Field21;
        public int Field22;
        public override int StructSize() { return 92; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadInt(32);
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadInt(32);
            Field16 = buffer.ReadInt(32);
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadInt(32);
            Field19 = buffer.ReadInt(32);
            Field20 = buffer.ReadInt(32);
            Field21 = buffer.ReadInt(32);
            Field22 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteInt(32, Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteInt(32, Field15);
            buffer.WriteInt(32, Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteInt(32, Field18);
            buffer.WriteInt(32, Field19);
            buffer.WriteInt(32, Field20);
            buffer.WriteInt(32, Field21);
            buffer.WriteInt(32, Field22);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "LootDistribution {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 16;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 20;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 24;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 28;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 32;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 36;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 40;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 44;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 48;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 52;
            Field13 = stream.ReadValueS32();
            stream.Position = offset + 56;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 60;
            Field15 = stream.ReadValueS32();
            stream.Position = offset + 64;
            Field16 = stream.ReadValueS32();
            stream.Position = offset + 68;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 72;
            Field18 = stream.ReadValueS32();
            stream.Position = offset + 76;
            Field19 = stream.ReadValueS32();
            stream.Position = offset + 80;
            Field20 = stream.ReadValueS32();
            stream.Position = offset + 84;
            Field21 = stream.ReadValueS32();
            stream.Position = offset + 88;
            Field22 = stream.ReadValueS32();
        }

    }

    public class QualityClassTable : GameMessage
    {
        public SerializeData serQualityClasses;
        List<QualityClass> _QualityClasses;
        public List<QualityClass> QualityClasses { get { return _QualityClasses; } set { _QualityClasses = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serQualityClasses = new SerializeData();
            serQualityClasses.Parse(buffer);
            //still checking variablearrays
            this.QualityClasses = new List<QualityClass>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _QualityClasses.Count; loop12++)
            {
                _QualityClasses[loop12] = new QualityClass();
                _QualityClasses[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serQualityClasses.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _QualityClasses.Count);
            for (int loop12 = 0; loop12 < _QualityClasses.Count; loop12++)
            {
                _QualityClasses[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QualityClassTable {");
            pad += 4;
            serQualityClasses.AsText(b, pad, "serQualityClasses: ");
            for (int loop12 = 0; loop12 < _QualityClasses.Count; loop12++)
            {
                _QualityClasses[loop12].AsText(b, pad, "_QualityClasses[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serQualityClasses = new SerializeData();
            serQualityClasses.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            QualityClasses = new List<QualityClass>();
            for (int i = 0; i < (int)(serQualityClasses.Field1 / 352); i++)
            {
                stream.Position = serQualityClasses.Field0 + 16 + (352 * i);
                QualityClass temp12_QualityClasses;
                temp12_QualityClasses = new QualityClass();
                temp12_QualityClasses.FileRead(stream, stream.Position);
                _QualityClasses.Add(temp12_QualityClasses);
            }
        }

    }

    public class QualityClass : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public float Field21;
        public float Field22;
        public override int StructSize() { return 352; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadFloat32();
            Field22 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteFloat32(Field21);
            buffer.WriteFloat32(Field22);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "QualityClass {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 264;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 268;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 272;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 276;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 280;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 284;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 288;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 292;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 296;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 300;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 304;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 308;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 312;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 316;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 320;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 324;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 328;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 332;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 336;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 340;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 344;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 348;
            Field22 = stream.ReadValueF32();
        }

    }

    public class Hirelings : GameMessage
    {
        public SerializeData serHirelings;
        List<HirelingEntry> _arHirelings;
        public List<HirelingEntry> arHirelings { get { return _arHirelings; } set { _arHirelings = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serHirelings = new SerializeData();
            serHirelings.Parse(buffer);
            //still checking variablearrays
            this.arHirelings = new List<HirelingEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _arHirelings.Count; loop12++)
            {
                _arHirelings[loop12] = new HirelingEntry();
                _arHirelings[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serHirelings.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _arHirelings.Count);
            for (int loop12 = 0; loop12 < _arHirelings.Count; loop12++)
            {
                _arHirelings[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "Hirelings {");
            pad += 4;
            serHirelings.AsText(b, pad, "serHirelings: ");
            for (int loop12 = 0; loop12 < _arHirelings.Count; loop12++)
            {
                _arHirelings[loop12].AsText(b, pad, "_arHirelings[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serHirelings = new SerializeData();
            serHirelings.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            arHirelings = new List<HirelingEntry>();
            for (int i = 0; i < (int)(serHirelings.Field1 / 832); i++)
            {
                stream.Position = serHirelings.Field0 + 16 + (832 * i);
                HirelingEntry temp12_arHirelings;
                temp12_arHirelings = new HirelingEntry();
                temp12_arHirelings.FileRead(stream, stream.Position);
                _arHirelings.Add(temp12_arHirelings);
            }
        }

    }

    public class SetItemBonusTable : GameMessage
    {
        public SerializeData serSetItemBonuses;
        List<SetItemBonusTableEntry> _SetItemBonuses;
        public List<SetItemBonusTableEntry> SetItemBonuses { get { return _SetItemBonuses; } set { _SetItemBonuses = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serSetItemBonuses = new SerializeData();
            serSetItemBonuses.Parse(buffer);
            //still checking variablearrays
            this.SetItemBonuses = new List<SetItemBonusTableEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _SetItemBonuses.Count; loop12++)
            {
                _SetItemBonuses[loop12] = new SetItemBonusTableEntry();
                _SetItemBonuses[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serSetItemBonuses.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _SetItemBonuses.Count);
            for (int loop12 = 0; loop12 < _SetItemBonuses.Count; loop12++)
            {
                _SetItemBonuses[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SetItemBonusTable {");
            pad += 4;
            serSetItemBonuses.AsText(b, pad, "serSetItemBonuses: ");
            for (int loop12 = 0; loop12 < _SetItemBonuses.Count; loop12++)
            {
                _SetItemBonuses[loop12].AsText(b, pad, "_SetItemBonuses[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serSetItemBonuses = new SerializeData();
            serSetItemBonuses.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            SetItemBonuses = new List<SetItemBonusTableEntry>();
            for (int i = 0; i < (int)(serSetItemBonuses.Field1 / 464); i++)
            {
                stream.Position = serSetItemBonuses.Field0 + 16 + (464 * i);
                SetItemBonusTableEntry temp12_SetItemBonuses;
                temp12_SetItemBonuses = new SetItemBonusTableEntry();
                temp12_SetItemBonuses.FileRead(stream, stream.Position);
                _SetItemBonuses.Add(temp12_SetItemBonuses);
            }
        }

    }

    public class EliteModifiers : GameMessage
    {
        public SerializeData serMods;
        List<EliteModifierData> _Mods;
        public List<EliteModifierData> Mods { get { return _Mods; } set { _Mods = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serMods = new SerializeData();
            serMods.Parse(buffer);
            //still checking variablearrays
            this.Mods = new List<EliteModifierData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Mods.Count; loop12++)
            {
                _Mods[loop12] = new EliteModifierData();
                _Mods[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serMods.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Mods.Count);
            for (int loop12 = 0; loop12 < _Mods.Count; loop12++)
            {
                _Mods[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EliteModifiers {");
            pad += 4;
            serMods.AsText(b, pad, "serMods: ");
            for (int loop12 = 0; loop12 < _Mods.Count; loop12++)
            {
                _Mods[loop12].AsText(b, pad, "_Mods[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serMods = new SerializeData();
            serMods.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Mods = new List<EliteModifierData>();
            for (int i = 0; i < (int)(serMods.Field1 / 344); i++)
            {
                stream.Position = serMods.Field0 + 16 + (344 * i);
                EliteModifierData temp12_Mods;
                temp12_Mods = new EliteModifierData();
                temp12_Mods.FileRead(stream, stream.Position);
                _Mods.Add(temp12_Mods);
            }
        }

    }

    public class EliteModifierData : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public float Field1;
        public int Field2;
        public float Field3;
        public int Field4;
        public float Field5;
        public int Field6;
        public float Field7;
        public int Field8;
        public float Field9;
        public int Field10;
        public float Field11;
        public int Field12;
        public float Field13;
        public int Field14;
        public float Field15;
        public float Field16;
        public int Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public float Field21;
        public override int StructSize() { return 344; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadInt(32);
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadInt(32);
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadInt(32);
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadInt(32);
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadInt(32);
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadInt(32);
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteFloat32(Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteInt(32, Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteInt(32, Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteInt(32, Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteInt(32, Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteInt(32, Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteInt(32, Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteFloat32(Field21);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EliteModifierData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 264;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 276;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 280;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 288;
            Field8 = stream.ReadValueS32();
            stream.Position = offset + 292;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 296;
            Field10 = stream.ReadValueS32();
            stream.Position = offset + 300;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 304;
            Field12 = stream.ReadValueS32();
            stream.Position = offset + 308;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 312;
            Field14 = stream.ReadValueS32();
            stream.Position = offset + 316;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 320;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 324;
            Field17 = stream.ReadValueS32();
            stream.Position = offset + 328;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 332;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 336;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 340;
            Field21 = stream.ReadValueF32();
        }

    }

    public class ItemTiers : GameMessage
    {
        public SerializeData serTiers;
        List<ItemTierData> _Tiers;
        public List<ItemTierData> Tiers { get { return _Tiers; } set { _Tiers = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serTiers = new SerializeData();
            serTiers.Parse(buffer);
            //still checking variablearrays
            this.Tiers = new List<ItemTierData>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Tiers.Count; loop12++)
            {
                _Tiers[loop12] = new ItemTierData();
                _Tiers[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serTiers.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Tiers.Count);
            for (int loop12 = 0; loop12 < _Tiers.Count; loop12++)
            {
                _Tiers[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemTiers {");
            pad += 4;
            serTiers.AsText(b, pad, "serTiers: ");
            for (int loop12 = 0; loop12 < _Tiers.Count; loop12++)
            {
                _Tiers[loop12].AsText(b, pad, "_Tiers[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serTiers = new SerializeData();
            serTiers.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Tiers = new List<ItemTierData>();
            for (int i = 0; i < (int)(serTiers.Field1 / 32); i++)
            {
                stream.Position = serTiers.Field0 + 16 + (32 * i);
                ItemTierData temp12_Tiers;
                temp12_Tiers = new ItemTierData();
                temp12_Tiers.FileRead(stream, stream.Position);
                _Tiers.Add(temp12_Tiers);
            }
        }

    }

    public class ItemTierData : GameMessage
    {
        public int Head;
        public int Torso;
        public int Feet;
        public int Hands;
        public int Shoulders;
        public int Legs;
        public int Bracers;
        public int Belt;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Head = buffer.ReadInt(32);
            Torso = buffer.ReadInt(32);
            Feet = buffer.ReadInt(32);
            Hands = buffer.ReadInt(32);
            Shoulders = buffer.ReadInt(32);
            Legs = buffer.ReadInt(32);
            Bracers = buffer.ReadInt(32);
            Belt = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Head);
            buffer.WriteInt(32, Torso);
            buffer.WriteInt(32, Feet);
            buffer.WriteInt(32, Hands);
            buffer.WriteInt(32, Shoulders);
            buffer.WriteInt(32, Legs);
            buffer.WriteInt(32, Bracers);
            buffer.WriteInt(32, Belt);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemTierData {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Head:" + Head.ToString());
            b.Append(' ', pad); b.AppendLine("Torso:" + Torso.ToString());
            b.Append(' ', pad); b.AppendLine("Feet:" + Feet.ToString());
            b.Append(' ', pad); b.AppendLine("Hands:" + Hands.ToString());
            b.Append(' ', pad); b.AppendLine("Shoulders:" + Shoulders.ToString());
            b.Append(' ', pad); b.AppendLine("Legs:" + Legs.ToString());
            b.Append(' ', pad); b.AppendLine("Bracers:" + Bracers.ToString());
            b.Append(' ', pad); b.AppendLine("Belt:" + Belt.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Head = stream.ReadValueS32();
            stream.Position = offset + 4;
            Torso = stream.ReadValueS32();
            stream.Position = offset + 8;
            Feet = stream.ReadValueS32();
            stream.Position = offset + 12;
            Hands = stream.ReadValueS32();
            stream.Position = offset + 16;
            Shoulders = stream.ReadValueS32();
            stream.Position = offset + 20;
            Legs = stream.ReadValueS32();
            stream.Position = offset + 24;
            Bracers = stream.ReadValueS32();
            stream.Position = offset + 28;
            Belt = stream.ReadValueS32();
        }

    }

    public class PowerFormulaTable : GameMessage
    {
        public SerializeData serPowerFormulaTableEntries;
        List<PowerFormulaTableEntry> _PowerFormulaTableEntries;
        public List<PowerFormulaTableEntry> PowerFormulaTableEntries { get { return _PowerFormulaTableEntries; } set { _PowerFormulaTableEntries = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serPowerFormulaTableEntries = new SerializeData();
            serPowerFormulaTableEntries.Parse(buffer);
            //still checking variablearrays
            this.PowerFormulaTableEntries = new List<PowerFormulaTableEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _PowerFormulaTableEntries.Count; loop12++)
            {
                _PowerFormulaTableEntries[loop12] = new PowerFormulaTableEntry();
                _PowerFormulaTableEntries[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serPowerFormulaTableEntries.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _PowerFormulaTableEntries.Count);
            for (int loop12 = 0; loop12 < _PowerFormulaTableEntries.Count; loop12++)
            {
                _PowerFormulaTableEntries[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PowerFormulaTable {");
            pad += 4;
            serPowerFormulaTableEntries.AsText(b, pad, "serPowerFormulaTableEntries: ");
            for (int loop12 = 0; loop12 < _PowerFormulaTableEntries.Count; loop12++)
            {
                _PowerFormulaTableEntries[loop12].AsText(b, pad, "_PowerFormulaTableEntries[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serPowerFormulaTableEntries = new SerializeData();
            serPowerFormulaTableEntries.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            PowerFormulaTableEntries = new List<PowerFormulaTableEntry>();
            for (int i = 0; i < (int)(serPowerFormulaTableEntries.Field1 / 1268); i++)
            {
                stream.Position = serPowerFormulaTableEntries.Field0 + 16 + (1268 * i);
                PowerFormulaTableEntry temp12_PowerFormulaTableEntries;
                temp12_PowerFormulaTableEntries = new PowerFormulaTableEntry();
                temp12_PowerFormulaTableEntries.FileRead(stream, stream.Position);
                _PowerFormulaTableEntries.Add(temp12_PowerFormulaTableEntries);
            }
        }

    }

    public class PowerFormulaTableEntry : GameMessage
    {
        public string _Field0;
        public string Field0 { get { return _Field0; } set { if (value != null && value.Length > 1024) throw new ArgumentOutOfRangeException(); _Field0 = value; } }
        public float Field1;
        public float Field2;
        public float Field3;
        public float Field4;
        public float Field5;
        public float Field6;
        public float Field7;
        public float Field8;
        public float Field9;
        public float Field10;
        public float Field11;
        public float Field12;
        public float Field13;
        public float Field14;
        public float Field15;
        public float Field16;
        public float Field17;
        public float Field18;
        public float Field19;
        public float Field20;
        public float Field21;
        public float Field22;
        public float Field23;
        public float Field24;
        public float Field25;
        public float Field26;
        public float Field27;
        public float Field28;
        public float Field29;
        public float Field30;
        public float Field31;
        public float Field32;
        public float Field33;
        public float Field34;
        public float Field35;
        public float Field36;
        public float Field37;
        public float Field38;
        public float Field39;
        public float Field40;
        public float Field41;
        public float Field42;
        public float Field43;
        public float Field44;
        public float Field45;
        public float Field46;
        public float Field47;
        public float Field48;
        public float Field49;
        public float Field50;
        public float Field51;
        public float Field52;
        public float Field53;
        public float Field54;
        public float Field55;
        public float Field56;
        public float Field57;
        public float Field58;
        public float Field59;
        public float Field60;
        public float Field61;
        public override int StructSize() { return 1268; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadCharArray(1024);
            Field1 = buffer.ReadFloat32();
            Field2 = buffer.ReadFloat32();
            Field3 = buffer.ReadFloat32();
            Field4 = buffer.ReadFloat32();
            Field5 = buffer.ReadFloat32();
            Field6 = buffer.ReadFloat32();
            Field7 = buffer.ReadFloat32();
            Field8 = buffer.ReadFloat32();
            Field9 = buffer.ReadFloat32();
            Field10 = buffer.ReadFloat32();
            Field11 = buffer.ReadFloat32();
            Field12 = buffer.ReadFloat32();
            Field13 = buffer.ReadFloat32();
            Field14 = buffer.ReadFloat32();
            Field15 = buffer.ReadFloat32();
            Field16 = buffer.ReadFloat32();
            Field17 = buffer.ReadFloat32();
            Field18 = buffer.ReadFloat32();
            Field19 = buffer.ReadFloat32();
            Field20 = buffer.ReadFloat32();
            Field21 = buffer.ReadFloat32();
            Field22 = buffer.ReadFloat32();
            Field23 = buffer.ReadFloat32();
            Field24 = buffer.ReadFloat32();
            Field25 = buffer.ReadFloat32();
            Field26 = buffer.ReadFloat32();
            Field27 = buffer.ReadFloat32();
            Field28 = buffer.ReadFloat32();
            Field29 = buffer.ReadFloat32();
            Field30 = buffer.ReadFloat32();
            Field31 = buffer.ReadFloat32();
            Field32 = buffer.ReadFloat32();
            Field33 = buffer.ReadFloat32();
            Field34 = buffer.ReadFloat32();
            Field35 = buffer.ReadFloat32();
            Field36 = buffer.ReadFloat32();
            Field37 = buffer.ReadFloat32();
            Field38 = buffer.ReadFloat32();
            Field39 = buffer.ReadFloat32();
            Field40 = buffer.ReadFloat32();
            Field41 = buffer.ReadFloat32();
            Field42 = buffer.ReadFloat32();
            Field43 = buffer.ReadFloat32();
            Field44 = buffer.ReadFloat32();
            Field45 = buffer.ReadFloat32();
            Field46 = buffer.ReadFloat32();
            Field47 = buffer.ReadFloat32();
            Field48 = buffer.ReadFloat32();
            Field49 = buffer.ReadFloat32();
            Field50 = buffer.ReadFloat32();
            Field51 = buffer.ReadFloat32();
            Field52 = buffer.ReadFloat32();
            Field53 = buffer.ReadFloat32();
            Field54 = buffer.ReadFloat32();
            Field55 = buffer.ReadFloat32();
            Field56 = buffer.ReadFloat32();
            Field57 = buffer.ReadFloat32();
            Field58 = buffer.ReadFloat32();
            Field59 = buffer.ReadFloat32();
            Field60 = buffer.ReadFloat32();
            Field61 = buffer.ReadFloat32();
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(1024, Field0);
            buffer.WriteFloat32(Field1);
            buffer.WriteFloat32(Field2);
            buffer.WriteFloat32(Field3);
            buffer.WriteFloat32(Field4);
            buffer.WriteFloat32(Field5);
            buffer.WriteFloat32(Field6);
            buffer.WriteFloat32(Field7);
            buffer.WriteFloat32(Field8);
            buffer.WriteFloat32(Field9);
            buffer.WriteFloat32(Field10);
            buffer.WriteFloat32(Field11);
            buffer.WriteFloat32(Field12);
            buffer.WriteFloat32(Field13);
            buffer.WriteFloat32(Field14);
            buffer.WriteFloat32(Field15);
            buffer.WriteFloat32(Field16);
            buffer.WriteFloat32(Field17);
            buffer.WriteFloat32(Field18);
            buffer.WriteFloat32(Field19);
            buffer.WriteFloat32(Field20);
            buffer.WriteFloat32(Field21);
            buffer.WriteFloat32(Field22);
            buffer.WriteFloat32(Field23);
            buffer.WriteFloat32(Field24);
            buffer.WriteFloat32(Field25);
            buffer.WriteFloat32(Field26);
            buffer.WriteFloat32(Field27);
            buffer.WriteFloat32(Field28);
            buffer.WriteFloat32(Field29);
            buffer.WriteFloat32(Field30);
            buffer.WriteFloat32(Field31);
            buffer.WriteFloat32(Field32);
            buffer.WriteFloat32(Field33);
            buffer.WriteFloat32(Field34);
            buffer.WriteFloat32(Field35);
            buffer.WriteFloat32(Field36);
            buffer.WriteFloat32(Field37);
            buffer.WriteFloat32(Field38);
            buffer.WriteFloat32(Field39);
            buffer.WriteFloat32(Field40);
            buffer.WriteFloat32(Field41);
            buffer.WriteFloat32(Field42);
            buffer.WriteFloat32(Field43);
            buffer.WriteFloat32(Field44);
            buffer.WriteFloat32(Field45);
            buffer.WriteFloat32(Field46);
            buffer.WriteFloat32(Field47);
            buffer.WriteFloat32(Field48);
            buffer.WriteFloat32(Field49);
            buffer.WriteFloat32(Field50);
            buffer.WriteFloat32(Field51);
            buffer.WriteFloat32(Field52);
            buffer.WriteFloat32(Field53);
            buffer.WriteFloat32(Field54);
            buffer.WriteFloat32(Field55);
            buffer.WriteFloat32(Field56);
            buffer.WriteFloat32(Field57);
            buffer.WriteFloat32(Field58);
            buffer.WriteFloat32(Field59);
            buffer.WriteFloat32(Field60);
            buffer.WriteFloat32(Field61);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "PowerFormulaTableEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            b.Append(' ', pad); b.AppendLine("Field7:" + Field7.ToString());
            b.Append(' ', pad); b.AppendLine("Field8:" + Field8.ToString());
            b.Append(' ', pad); b.AppendLine("Field9:" + Field9.ToString());
            b.Append(' ', pad); b.AppendLine("Field10:" + Field10.ToString());
            b.Append(' ', pad); b.AppendLine("Field11:" + Field11.ToString());
            b.Append(' ', pad); b.AppendLine("Field12:" + Field12.ToString());
            b.Append(' ', pad); b.AppendLine("Field13:" + Field13.ToString());
            b.Append(' ', pad); b.AppendLine("Field14:" + Field14.ToString());
            b.Append(' ', pad); b.AppendLine("Field15:" + Field15.ToString());
            b.Append(' ', pad); b.AppendLine("Field16:" + Field16.ToString());
            b.Append(' ', pad); b.AppendLine("Field17:" + Field17.ToString());
            b.Append(' ', pad); b.AppendLine("Field18:" + Field18.ToString());
            b.Append(' ', pad); b.AppendLine("Field19:" + Field19.ToString());
            b.Append(' ', pad); b.AppendLine("Field20:" + Field20.ToString());
            b.Append(' ', pad); b.AppendLine("Field21:" + Field21.ToString());
            b.Append(' ', pad); b.AppendLine("Field22:" + Field22.ToString());
            b.Append(' ', pad); b.AppendLine("Field23:" + Field23.ToString());
            b.Append(' ', pad); b.AppendLine("Field24:" + Field24.ToString());
            b.Append(' ', pad); b.AppendLine("Field25:" + Field25.ToString());
            b.Append(' ', pad); b.AppendLine("Field26:" + Field26.ToString());
            b.Append(' ', pad); b.AppendLine("Field27:" + Field27.ToString());
            b.Append(' ', pad); b.AppendLine("Field28:" + Field28.ToString());
            b.Append(' ', pad); b.AppendLine("Field29:" + Field29.ToString());
            b.Append(' ', pad); b.AppendLine("Field30:" + Field30.ToString());
            b.Append(' ', pad); b.AppendLine("Field31:" + Field31.ToString());
            b.Append(' ', pad); b.AppendLine("Field32:" + Field32.ToString());
            b.Append(' ', pad); b.AppendLine("Field33:" + Field33.ToString());
            b.Append(' ', pad); b.AppendLine("Field34:" + Field34.ToString());
            b.Append(' ', pad); b.AppendLine("Field35:" + Field35.ToString());
            b.Append(' ', pad); b.AppendLine("Field36:" + Field36.ToString());
            b.Append(' ', pad); b.AppendLine("Field37:" + Field37.ToString());
            b.Append(' ', pad); b.AppendLine("Field38:" + Field38.ToString());
            b.Append(' ', pad); b.AppendLine("Field39:" + Field39.ToString());
            b.Append(' ', pad); b.AppendLine("Field40:" + Field40.ToString());
            b.Append(' ', pad); b.AppendLine("Field41:" + Field41.ToString());
            b.Append(' ', pad); b.AppendLine("Field42:" + Field42.ToString());
            b.Append(' ', pad); b.AppendLine("Field43:" + Field43.ToString());
            b.Append(' ', pad); b.AppendLine("Field44:" + Field44.ToString());
            b.Append(' ', pad); b.AppendLine("Field45:" + Field45.ToString());
            b.Append(' ', pad); b.AppendLine("Field46:" + Field46.ToString());
            b.Append(' ', pad); b.AppendLine("Field47:" + Field47.ToString());
            b.Append(' ', pad); b.AppendLine("Field48:" + Field48.ToString());
            b.Append(' ', pad); b.AppendLine("Field49:" + Field49.ToString());
            b.Append(' ', pad); b.AppendLine("Field50:" + Field50.ToString());
            b.Append(' ', pad); b.AppendLine("Field51:" + Field51.ToString());
            b.Append(' ', pad); b.AppendLine("Field52:" + Field52.ToString());
            b.Append(' ', pad); b.AppendLine("Field53:" + Field53.ToString());
            b.Append(' ', pad); b.AppendLine("Field54:" + Field54.ToString());
            b.Append(' ', pad); b.AppendLine("Field55:" + Field55.ToString());
            b.Append(' ', pad); b.AppendLine("Field56:" + Field56.ToString());
            b.Append(' ', pad); b.AppendLine("Field57:" + Field57.ToString());
            b.Append(' ', pad); b.AppendLine("Field58:" + Field58.ToString());
            b.Append(' ', pad); b.AppendLine("Field59:" + Field59.ToString());
            b.Append(' ', pad); b.AppendLine("Field60:" + Field60.ToString());
            b.Append(' ', pad); b.AppendLine("Field61:" + Field61.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadString(1024);
            stream.Position = offset + 1024;
            Field1 = stream.ReadValueF32();
            stream.Position = offset + 1028;
            Field2 = stream.ReadValueF32();
            stream.Position = offset + 1032;
            Field3 = stream.ReadValueF32();
            stream.Position = offset + 1036;
            Field4 = stream.ReadValueF32();
            stream.Position = offset + 1040;
            Field5 = stream.ReadValueF32();
            stream.Position = offset + 1044;
            Field6 = stream.ReadValueF32();
            stream.Position = offset + 1048;
            Field7 = stream.ReadValueF32();
            stream.Position = offset + 1052;
            Field8 = stream.ReadValueF32();
            stream.Position = offset + 1056;
            Field9 = stream.ReadValueF32();
            stream.Position = offset + 1060;
            Field10 = stream.ReadValueF32();
            stream.Position = offset + 1064;
            Field11 = stream.ReadValueF32();
            stream.Position = offset + 1068;
            Field12 = stream.ReadValueF32();
            stream.Position = offset + 1072;
            Field13 = stream.ReadValueF32();
            stream.Position = offset + 1076;
            Field14 = stream.ReadValueF32();
            stream.Position = offset + 1080;
            Field15 = stream.ReadValueF32();
            stream.Position = offset + 1084;
            Field16 = stream.ReadValueF32();
            stream.Position = offset + 1088;
            Field17 = stream.ReadValueF32();
            stream.Position = offset + 1092;
            Field18 = stream.ReadValueF32();
            stream.Position = offset + 1096;
            Field19 = stream.ReadValueF32();
            stream.Position = offset + 1100;
            Field20 = stream.ReadValueF32();
            stream.Position = offset + 1104;
            Field21 = stream.ReadValueF32();
            stream.Position = offset + 1108;
            Field22 = stream.ReadValueF32();
            stream.Position = offset + 1112;
            Field23 = stream.ReadValueF32();
            stream.Position = offset + 1116;
            Field24 = stream.ReadValueF32();
            stream.Position = offset + 1120;
            Field25 = stream.ReadValueF32();
            stream.Position = offset + 1124;
            Field26 = stream.ReadValueF32();
            stream.Position = offset + 1128;
            Field27 = stream.ReadValueF32();
            stream.Position = offset + 1132;
            Field28 = stream.ReadValueF32();
            stream.Position = offset + 1136;
            Field29 = stream.ReadValueF32();
            stream.Position = offset + 1140;
            Field30 = stream.ReadValueF32();
            stream.Position = offset + 1144;
            Field31 = stream.ReadValueF32();
            stream.Position = offset + 1148;
            Field32 = stream.ReadValueF32();
            stream.Position = offset + 1152;
            Field33 = stream.ReadValueF32();
            stream.Position = offset + 1156;
            Field34 = stream.ReadValueF32();
            stream.Position = offset + 1160;
            Field35 = stream.ReadValueF32();
            stream.Position = offset + 1164;
            Field36 = stream.ReadValueF32();
            stream.Position = offset + 1168;
            Field37 = stream.ReadValueF32();
            stream.Position = offset + 1172;
            Field38 = stream.ReadValueF32();
            stream.Position = offset + 1176;
            Field39 = stream.ReadValueF32();
            stream.Position = offset + 1180;
            Field40 = stream.ReadValueF32();
            stream.Position = offset + 1184;
            Field41 = stream.ReadValueF32();
            stream.Position = offset + 1188;
            Field42 = stream.ReadValueF32();
            stream.Position = offset + 1192;
            Field43 = stream.ReadValueF32();
            stream.Position = offset + 1196;
            Field44 = stream.ReadValueF32();
            stream.Position = offset + 1200;
            Field45 = stream.ReadValueF32();
            stream.Position = offset + 1204;
            Field46 = stream.ReadValueF32();
            stream.Position = offset + 1208;
            Field47 = stream.ReadValueF32();
            stream.Position = offset + 1212;
            Field48 = stream.ReadValueF32();
            stream.Position = offset + 1216;
            Field49 = stream.ReadValueF32();
            stream.Position = offset + 1220;
            Field50 = stream.ReadValueF32();
            stream.Position = offset + 1224;
            Field51 = stream.ReadValueF32();
            stream.Position = offset + 1228;
            Field52 = stream.ReadValueF32();
            stream.Position = offset + 1232;
            Field53 = stream.ReadValueF32();
            stream.Position = offset + 1236;
            Field54 = stream.ReadValueF32();
            stream.Position = offset + 1240;
            Field55 = stream.ReadValueF32();
            stream.Position = offset + 1244;
            Field56 = stream.ReadValueF32();
            stream.Position = offset + 1248;
            Field57 = stream.ReadValueF32();
            stream.Position = offset + 1252;
            Field58 = stream.ReadValueF32();
            stream.Position = offset + 1256;
            Field59 = stream.ReadValueF32();
            stream.Position = offset + 1260;
            Field60 = stream.ReadValueF32();
            stream.Position = offset + 1264;
            Field61 = stream.ReadValueF32();
        }

    }

    public class RecipesTable : GameMessage
    {
        public SerializeData serRecipes;
        List<RecipeEntry> _Recipes;
        public List<RecipeEntry> Recipes { get { return _Recipes; } set { _Recipes = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serRecipes = new SerializeData();
            serRecipes.Parse(buffer);
            //still checking variablearrays
            this.Recipes = new List<RecipeEntry>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _Recipes.Count; loop12++)
            {
                _Recipes[loop12] = new RecipeEntry();
                _Recipes[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serRecipes.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _Recipes.Count);
            for (int loop12 = 0; loop12 < _Recipes.Count; loop12++)
            {
                _Recipes[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RecipesTable {");
            pad += 4;
            serRecipes.AsText(b, pad, "serRecipes: ");
            for (int loop12 = 0; loop12 < _Recipes.Count; loop12++)
            {
                _Recipes[loop12].AsText(b, pad, "_Recipes[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serRecipes = new SerializeData();
            serRecipes.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            Recipes = new List<RecipeEntry>();
            for (int i = 0; i < (int)(serRecipes.Field1 / 332); i++)
            {
                stream.Position = serRecipes.Field0 + 16 + (332 * i);
                RecipeEntry temp12_Recipes;
                temp12_Recipes = new RecipeEntry();
                temp12_Recipes.FileRead(stream, stream.Position);
                _Recipes.Add(temp12_Recipes);
            }
        }

    }

    public class RecipeEntry : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public int snoRecipe;
        int _Field2;
        public int Field2 { get { return _Field2; } set { if (value < 0 || value > 3) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public int Field3;
        public int Field4;
        public int Field5;
        public int Field6;
        RecipeIngredient[] _Field7;
        public RecipeIngredient[] Field7 { get { return _Field7; } set { if (value != null && value.Length != 6) throw new ArgumentOutOfRangeException(); _Field7 = value; } }
        public override int StructSize() { return 332; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
            snoRecipe = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(2);
            Field3 = buffer.ReadInt(32);
            Field4 = buffer.ReadInt(32);
            Field5 = buffer.ReadInt(32);
            Field6 = buffer.ReadInt(32);
            Field7 = new RecipeIngredient[6];
            for (int i = 0; i < _Field7.Length; i++)
            {
                _Field7[i] = new RecipeIngredient();
                _Field7[i].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
            buffer.WriteInt(32, snoRecipe);
            buffer.WriteInt(2, Field2);
            buffer.WriteInt(32, Field3);
            buffer.WriteInt(32, Field4);
            buffer.WriteInt(32, Field5);
            buffer.WriteInt(32, Field6);
            for (int i = 0; i < _Field7.Length; i++) _Field7[i].Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "RecipeEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            b.Append(' ', pad); b.AppendLine("snoRecipe:" + snoRecipe.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            b.Append(' ', pad); b.AppendLine("Field4:" + Field4.ToString());
            b.Append(' ', pad); b.AppendLine("Field5:" + Field5.ToString());
            b.Append(' ', pad); b.AppendLine("Field6:" + Field6.ToString());
            for (int loop12 = 0; loop12 < _Field7.Length; loop12++)
            {
                _Field7[loop12].AsText(b, pad, "_Field7[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
            stream.Position = offset + 260;
            snoRecipe = stream.ReadValueS32();
            stream.Position = offset + 264;
            _Field2 = stream.ReadValueS32();
            stream.Position = offset + 268;
            Field3 = stream.ReadValueS32();
            stream.Position = offset + 272;
            Field4 = stream.ReadValueS32();
            stream.Position = offset + 276;
            Field5 = stream.ReadValueS32();
            stream.Position = offset + 280;
            Field6 = stream.ReadValueS32();
            stream.Position = offset + 284;
            Field7 = new RecipeIngredient[6];
            for (int loop12 = 0; loop12 < 6; loop12++)
            {
                RecipeIngredient temp12_Field7;
                temp12_Field7 = new RecipeIngredient();
                temp12_Field7.FileRead(stream, stream.Position);
                _Field7[loop12] = temp12_Field7;
            }
        }

    }

    public class ScriptedAchievementEventsTable : GameMessage
    {
        public SerializeData serScriptedAchievementEvents;
        List<ScriptedAchievementEvent> _ScriptedAchievementEvents;
        public List<ScriptedAchievementEvent> ScriptedAchievementEvents { get { return _ScriptedAchievementEvents; } set { _ScriptedAchievementEvents = value; } }
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            serScriptedAchievementEvents = new SerializeData();
            serScriptedAchievementEvents.Parse(buffer);
            //still checking variablearrays
            this.ScriptedAchievementEvents = new List<ScriptedAchievementEvent>(buffer.ReadInt(0));
            for (int loop12 = 0; loop12 < _ScriptedAchievementEvents.Count; loop12++)
            {
                _ScriptedAchievementEvents[loop12] = new ScriptedAchievementEvent();
                _ScriptedAchievementEvents[loop12].Parse(buffer);
            }
        }

        public override void Encode(GameBitBuffer buffer)
        {
            serScriptedAchievementEvents.Encode(buffer);
            //still checking variablearrays
            buffer.WriteInt(0, _ScriptedAchievementEvents.Count);
            for (int loop12 = 0; loop12 < _ScriptedAchievementEvents.Count; loop12++)
            {
                _ScriptedAchievementEvents[loop12].Encode(buffer);
            }
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ScriptedAchievementEventsTable {");
            pad += 4;
            serScriptedAchievementEvents.AsText(b, pad, "serScriptedAchievementEvents: ");
            for (int loop12 = 0; loop12 < _ScriptedAchievementEvents.Count; loop12++)
            {
                _ScriptedAchievementEvents[loop12].AsText(b, pad, "_ScriptedAchievementEvents[loop12]: ");
            }
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            serScriptedAchievementEvents = new SerializeData();
            serScriptedAchievementEvents.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            //still checking variablearrays
            ScriptedAchievementEvents = new List<ScriptedAchievementEvent>();
            for (int i = 0; i < (int)(serScriptedAchievementEvents.Field1 / 260); i++)
            {
                stream.Position = serScriptedAchievementEvents.Field0 + 16 + (260 * i);
                ScriptedAchievementEvent temp12_ScriptedAchievementEvents;
                temp12_ScriptedAchievementEvents = new ScriptedAchievementEvent();
                temp12_ScriptedAchievementEvents.FileRead(stream, stream.Position);
                _ScriptedAchievementEvents.Add(temp12_ScriptedAchievementEvents);
            }
        }

    }

    public class ScriptedAchievementEvent : GameMessage
    {
        public string _Name;
        public string Name { get { return _Name; } set { if (value != null && value.Length > 256) throw new ArgumentOutOfRangeException(); _Name = value; } }
        public override int StructSize() { return 260; }

        public override void Parse(GameBitBuffer buffer)
        {
            Name = buffer.ReadCharArray(256);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteCharArray(256, Name);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ScriptedAchievementEvent {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Name:" + Name.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 4;
            Name = stream.ReadString(256);
        }

    }

    public class CrafterLevelUpMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CrafterLevelUpMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
        }

    }

    public class CraftingResultsMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 20; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "CraftingResultsMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 16;
            Field3 = stream.ReadValueS32();
        }

    }

    public class EnchantItemMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public int Field1;
        public int Field2;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EnchantItemMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field2 = stream.ReadValueS32();
        }

    }

    public class ItemIdMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public ItemId Field1;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new ItemId();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemIdMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new ItemId();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class ItemId : GameMessage
    {
        public long Field0;
        public long Field1;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt64(64);
            Field1 = buffer.ReadInt64(64);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt64(64, Field0);
            buffer.WriteInt64(64, Field1);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "ItemId {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS64();
            stream.Position = offset + 8;
            Field1 = stream.ReadValueS64();
        }

    }

    public class GameIdMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public GameId Field1;
        public override int StructSize() { return 32; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new GameId();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameIdMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new GameId();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class EntityIdMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public EntityId Field1;
        public override int StructSize() { return 24; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new EntityId();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "EntityIdMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new EntityId();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class GameSyncedDataMessage : GameMessage
    {
        public RequiredMessageHeader Field0;
        public GameSyncedData Field1;
        public override int StructSize() { return 100; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = new RequiredMessageHeader();
            Field0.Parse(buffer);
            Field1 = new GameSyncedData();
            Field1.Parse(buffer);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            Field0.Encode(buffer);
            Field1.Encode(buffer);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "GameSyncedDataMessage {");
            pad += 4;
            Field0.AsText(b, pad, "Field0: ");
            Field1.AsText(b, pad, "Field1: ");
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = new RequiredMessageHeader();
            Field0.FileRead(stream, stream.Position);
            stream.Position = offset + 8;
            Field1 = new GameSyncedData();
            Field1.FileRead(stream, stream.Position);
        }

    }

    public class SNOEntry : GameMessage
    {
        public int Field0;
        public int Field1;
        public string _Field2;
        public string Field2 { get { return _Field2; } set { if (value != null && value.Length > 128) throw new ArgumentOutOfRangeException(); _Field2 = value; } }
        public override int StructSize() { return 136; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadCharArray(128);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteCharArray(128, Field2);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SNOEntry {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadString(128);
        }

    }

    public class SNOFileHeader : GameMessage
    {
        public int Field0;
        public int Field1;
        public int Field2;
        public int Field3;
        public override int StructSize() { return 16; }

        public override void Parse(GameBitBuffer buffer)
        {
            Field0 = buffer.ReadInt(32);
            Field1 = buffer.ReadInt(32);
            Field2 = buffer.ReadInt(32);
            Field3 = buffer.ReadInt(32);
        }

        public override void Encode(GameBitBuffer buffer)
        {
            buffer.WriteInt(32, Field0);
            buffer.WriteInt(32, Field1);
            buffer.WriteInt(32, Field2);
            buffer.WriteInt(32, Field3);
        }

        public void AsText(StringBuilder b, int pad, string fname = "")
        {
            b.Append(' ', pad); b.AppendLine(fname + "SNOFileHeader {");
            pad += 4;
            b.Append(' ', pad); b.AppendLine("Field0:" + Field0.ToString());
            b.Append(' ', pad); b.AppendLine("Field1:" + Field1.ToString());
            b.Append(' ', pad); b.AppendLine("Field2:" + Field2.ToString());
            b.Append(' ', pad); b.AppendLine("Field3:" + Field3.ToString());
            pad -= 4;
            b.Append(' ', pad); b.AppendLine("}");
        }

        public override void AsText(StringBuilder b, int pad)
        {
            this.AsText(b, pad, "");
        }

        public void FileRead(MpqFileStream stream, long offset)
        {
            stream.Position = offset + 0;
            Field0 = stream.ReadValueS32();
            stream.Position = offset + 4;
            Field1 = stream.ReadValueS32();
            stream.Position = offset + 8;
            Field2 = stream.ReadValueS32();
            stream.Position = offset + 12;
            Field3 = stream.ReadValueS32();
        }

    }

}
